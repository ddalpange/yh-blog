<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[YH.K Logs]]></title><description><![CDATA[Engineering experiences]]></description><link>https://ddalpange.github.io</link><generator>GatsbyJS</generator><lastBuildDate>Tue, 12 Oct 2021 08:40:45 GMT</lastBuildDate><item><title><![CDATA[또 한번의 이직]]></title><description><![CDATA[…]]></description><link>https://ddalpange.github.io/2019-04-25-change-company/</link><guid isPermaLink="false">https://ddalpange.github.io/2019-04-25-change-company/</guid><pubDate>Thu, 25 Apr 2019 18:39:55 GMT</pubDate><content:encoded>&lt;p&gt;1년을 갓 넘기고 잘 다니던 회사를 퇴사하였다. 프론트엔드 기술을 무시하는 정도가 심했고 마지막 즈음엔 프론트엔드 일이 거의 없다고 백엔드 개발을 진행했는데 그 기술의 수준이나 배움이 나 자신을 풀스택 개발자라고 주장하기엔 턱없이 모자랐다. 새로 개발하는 제품도 미래가 밝아 보이지 않았다.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;&lt;img src=&quot;https://media.giphy.com/media/7zuzoS2MJ6ESMhqCR0/giphy.gif&quot; alt=&quot;절이 싫으면 중이 떠나야한다. by 김요한&quot;&gt;&lt;/p&gt;
&lt;h2&gt;나 자신을 PR 해보자&lt;/h2&gt;
&lt;p&gt;나는 현재 22살이고 병역은 면제로 해결되었다. 약 2년 4개월 가량 프론트엔드 개발을 해왔으며 SPA의 개념과 웹에 대한 전반적인 이해도가 높다. Javascript 기술 스택으로 클라이언트 서버 쪽 구분 없이 전부 개발할 수 있다. 사실 말로 설명하면 이 사람의 기술 수준이 어느정도인지 내가 시장에서 어느정도의 평가를 받을지 감이 안온다. 로켓펀치, 원티드 등에 올라와 있는 프론트엔드 개발자의 자격요건과 우대사항을 테이블로 정리하여 내가 어느정도 수준인지 알아보자.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;프론트엔드 자격요건 및 우대사항&lt;/strong&gt;&lt;/p&gt;
&lt;ul class=&quot;contains-task-list&quot;&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; 프론트엔드 개발 경력 2년 이상 혹은 그에 준하는 실력을 갖추신 분&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; TypeScript에 대한 깊은 이해가 있으신 분, GraphQL과 Apollo를 다루어 보신 분&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; 웹이 아닌 환경에서 자바스크립트를 사용해본적이 있으신 분&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; HTML, SCSS에 대한 이해가 있으신 분&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; React, Vue, Angular를 사용한 SPA 개발 경험이 있으신 분&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; 자신의 지식을 팀원들에게 전달할 수 있는 원활한 의사소통 능력을 가지신 분&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; 웹 성능 측정에 능숙하고 렌더링 성능 개선을 위해 reflow-repaint 등을 이해하고 DOM 조작에 익숙하신 분&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Webpack/Bable/Rollup/Metro 등 JS bundling이나 JS AST를 이해하고 관련 작업에 익숙하신 분&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; 오픈소스에 커밋을 한 경험이 있으신 분.&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; 개발 만큼이나 문서화도 중요하다고 생각하시는 분&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; 자신의 프로젝트에 TDD를 적용하여 활용할 수 있는 분&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; SSR을 이해하고 사용해본 적이 있는 분&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Flux 패턴을 이해하고 Redux나 Vuex 등을 활용한 경험&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; 영문으로된 개발문서, 원문 등을 독해할 수 있는 능력&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Rest api에 대한 이해&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Sass, Less, Scss와 같은 CSS pre-processor&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Bootstrap, Maetirlize같은 CSS 프레임웍 활용&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; 지식 공유를 위해 블로그를 운영하시는 분&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;18개중에 2개를 체크하지 못했다. SSR과 TDD이다. 까다로운 면접관을 만난다면 체크한 15가지보다 못한 2가지에 관해 질문할 것이다. 그 때 나는 어떻게 대답을 해야할까?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;왜 SSR을 사용하지 않았나요?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;내가 한 대부분의 프로젝트는 SEO 검색 최적화가 필요하지 않았다. 그래서 당연하게 리스크를 감당 해야할 SSR을 선택하지 않았다. SEO가 중요한 회사 소개 페이지를 만들 때도 서버를 올리기 귀찮아서 정적 사이트 생성기인 Gatsby를 사용하였다. 앞으로도 굳이 SEO와 초기 속도가 중요한 프로젝트라면 SSR을 사용하지 않을것이다. 하지만 둘 중 하나라도 가져가야 한다면 난 주저없이 SSR을 사용할 것이다. 어려워서 또는 몰라서 사용하지 않은 것이 아니라 필요하지 않기 때문에 사용하지 않은 것이다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;왜 TDD를 적용하지 않았나요?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;프론트엔드는 백엔드와 달리 항상 바뀐다. 처음부터 설계를 잡고 그대로 진행한다면 TDD를 적용하지 못할 이유가 없다. 하지만 디자이너와 현업에 있는 마케터 그리고 실무자들에게 다양한 피드백을 받다보면 항상 화면이 바뀌고 설계가 바뀐다. Request와 Response만 신경쓰면 되는 백엔드와 달리 수 없이 많은 화면이 어떻게 렌더링이 되어야 하는지 돔의 구조를 어디까지 체크할지 등 생각해야할 것이 너무 많다. 그래서 비지니스 로직을 짜는 시간보다 테스트를 짜는 시간이 더 길어질 것이다. 그래서 난 아직도 프론트엔드에 TDD를 적용해야할지 의심스럽다.&lt;/p&gt;
&lt;p&gt;이 외에 나에 대한 소개는 면접에서 받는 질문을 통해 대신할 수 있을것 같다. 정리를 해보니 상당히 만족스럽다. 나 꽤 잘하는 듯? 이제 내가 바라는 회사에 대하여 정리하여 보자.&lt;/p&gt;
&lt;h2&gt;새로 갈 회사에게 바라는 점&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;나이로 무시하지 않는 회사&lt;/li&gt;
&lt;li&gt;학력으로 무시하지 않는 회사&lt;/li&gt;
&lt;li&gt;성별로 차별하지 않는 회사&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;성공한&lt;/strong&gt; 또는 &lt;strong&gt;성공할 예정인&lt;/strong&gt; 또는 &lt;strong&gt;사람을 끌어당기는&lt;/strong&gt; 매력이 있는 제품을 가진 회사&lt;/li&gt;
&lt;li&gt;사내정치가 없는 회사&lt;/li&gt;
&lt;li&gt;개발장비에 돈을 아끼지 않는 회사&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;상시 근로자 수 5인 이상인 회사&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;연차 사용 자유&lt;/li&gt;
&lt;li&gt;탄력 근무제 또는 재택 근무제&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;정리를 해보니 9가지 정도 되는 것 같다. 위 조건을 지키지 못하는 회사가 존재할 수 있느냐? 라고 생각할 수도 있지만 정말 많다. 세상은 넓고 이상한 회사는 많다. 난 이 9개 중에 4번을 제일 중점으로 두었다. 개발자로써 개발의 깊이도 물론 중요하지만 지금의 나에겐 제품을 발전시키고 이해할 줄 아는 능력이 더 중요하다고 생각했다.&lt;/p&gt;
&lt;h2&gt;면접을 보았던 회사들&lt;/h2&gt;
&lt;p&gt;위의 9가지 조건을 만족하는 회사를 찾기가 꽤 어려웠다. 그래서 찾고 찾아낸 끝에 5개의 회사에 지원했다.&lt;/p&gt;
&lt;h3&gt;B.M 스타트업&lt;/h3&gt;
&lt;p&gt;배달 업계에서 1위를 달린다는 그곳이다. 코딩 문제는 잘 풀었는데 자기소개서를 쓰기 너무 귀찮아서 고등학교 졸업 직후 썼던 자소서를 그대로 냈다. 당연히 탈락이었다.&lt;/p&gt;
&lt;h3&gt;H 스타트업&lt;/h3&gt;
&lt;p&gt;스타트업중에서 이름있는 곳 중 하나인 이곳은 익명 영상 채팅 서비스로 대단한 인기를 끌었다. 코딩 문제를 꽤 잘풀었는데 탈락했다. 왜지? 너무 오래 전이라 기억이 잘 나지 않는다.&lt;/p&gt;
&lt;h3&gt;B 스타트업&lt;/h3&gt;
&lt;p&gt;마케팅으로 굉장히 유명한 스타트업이다. 순도 100% 마케팅 회사라 봐도 무방한데 빠른 시장 선점을 위해 개발 인력을 꾸리고 있었다. 면접을 가서 HR 담당자와 PM과 한시간 가량 꽤 재미있는 얘기를 나눴다. 붙을 줄 알았지만 결과는 탈락이었다. 아무래도 이 기업은 기술보단 빠른 출시와 효율을 선호 하였고 난 그에 반대되는 성향을 가지고 있었던 탓인 듯 하다.&lt;/p&gt;
&lt;h3&gt;T 스타트업&lt;/h3&gt;
&lt;p&gt;간편 송금 서비스로 유명한 곳이다. 정확히 지원한지 4분만에 서류 탈락이라고 연락이 왔다. 그래서 “아 난 4분이면 끝날 이력서를 가지고 있구나”라고 절실히 깨닫고 이력서를 다 지우고 처음부터 다시 작성하였다.&lt;/p&gt;
&lt;h3&gt;Class101&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;온라인 취미 클래스 플랫폼&lt;/strong&gt;
“세상 사람들이 자신이 사랑하는 일을 하면서 살 수 있게 만들어주자”&lt;/p&gt;
&lt;p&gt;어렸을 때 저희는 항상 고민했습니다. ‘나중에 뭐먹고 살지?’ , ‘나중에 뭐해야하지?’ , ‘이게 돈이될까?’ , ‘야, 그거 하면서 어떻게 먹고 살려고해? 얼릉 공부해.’ 등등…&lt;/p&gt;
&lt;p&gt;그래서 저희는 이렇게 생각했습니다.&lt;/p&gt;
&lt;p&gt;‘그냥 자기가 하고싶고 사랑하는 일을 하면서 살면 안되나?’&lt;/p&gt;
&lt;p&gt;그렇습니다. 저희가 만들고 싶은 세상은 모든 사람들이 자신이 사랑하는 일을 하면서 살 수 있는 세상입니다. 어떻게 그런 세상을 만들 수 있을까요? 저희가 생각한 방법은 자신이 사랑하는 일을 다른 사람들에게 가르치면서 살 수 있게 만들어 드리고자 합니다. 자신이 사랑하는 일을 다른 사람의 취미로 전파할 수 있다면 그렇게 알려주는 과정에서 충분한 수익이 생기고, 더 많은 사람들이 자신이 살아하는 일을 함께 하는 기쁨도 얻을 수 있다고 생각합니다.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;제품의 설명 중 일부를 가져왔다. 회사의 비전이 한 눈에 들어왔고 그에 대한 이상향 또한 마음에 들었다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;“세상 사람들이 자신이 사랑하는 일을 하면서 살 수 있게 만들어주자”&lt;/strong&gt; 라는 말이 너무 좋았다.&lt;/p&gt;
&lt;p&gt;그래서 별 고민 없이 합류를 결정했다.&lt;/p&gt;
&lt;p&gt;이번에 이직을 하면서 깨달은 것은 아래 2가지다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;학력보단 경력, 경력보단 실력이다.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;개발자 본인도 기업을 평가할 수 있어야 한다.&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://media.giphy.com/media/1CxoQyLnmFTd6/giphy.gif&quot; alt=&quot;탈출은 능지순&quot;&gt;&lt;/p&gt;
&lt;p&gt;항상 자신을 되돌아보고 정진하는 사람이 될 수 있도록 노력하자.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Redux 마스터하기 - 리덕스의 미들웨어에 대하여 알아보자.]]></title><description><![CDATA[…]]></description><link>https://ddalpange.github.io/2019-01-11-redux-step2/</link><guid isPermaLink="false">https://ddalpange.github.io/2019-01-11-redux-step2/</guid><pubDate>Fri, 11 Jan 2019 18:39:55 GMT</pubDate><content:encoded>&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Redux&lt;/code&gt;는 &lt;code class=&quot;language-text&quot;&gt;Action&lt;/code&gt;이 &lt;code class=&quot;language-text&quot;&gt;Reducer&lt;/code&gt;에 전해지기 전 해야할 작업을 정의할 수 있는 미들웨어를 지원한다. &lt;code class=&quot;language-text&quot;&gt;Redux&lt;/code&gt;의 비동기 작업들을 도와주는 미들웨어에 대하여 알아보자.&lt;/p&gt;
 &lt;!-- more --&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsapi.js&quot;&gt;&lt;pre class=&quot;language-jsapi.js&quot;&gt;&lt;code class=&quot;language-jsapi.js&quot;&gt;let todoId = 0;
export const addTodo = text =&amp;gt;
  new Promise(resolve =&amp;gt; {
    window.setTimeout(() =&amp;gt; {
      resolve({
        text: text,
        id: todoId++,
        completed: false
      });
    }, 2000);
  });&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;setTimeout&lt;/code&gt;을 걸어 &lt;code class=&quot;language-text&quot;&gt;Promise&lt;/code&gt;를 반환하는 비동기 작업을 임시로 구현하였다. 위와 같은 비동기 작업이 있을때 &lt;code class=&quot;language-text&quot;&gt;Redux&lt;/code&gt;의 &lt;code class=&quot;language-text&quot;&gt;Action&lt;/code&gt;은 어떻게 처리해야 할까?&lt;/p&gt;
&lt;h2&gt;Async / Await&lt;/h2&gt;
&lt;p&gt;간단하게 &lt;strong&gt;Async / Await&lt;/strong&gt; 를 이용하여 동기적으로 구현할 수 있을것 같아서 테스트해보았다. 코드는 다음과 같다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsactions.js&quot;&gt;&lt;pre class=&quot;language-jsactions.js&quot;&gt;&lt;code class=&quot;language-jsactions.js&quot;&gt;import * as Api from &amp;quot;./api&amp;quot;;
export const addTodo = async text =&amp;gt; await Api.addTodo(text);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;돌려보니 &lt;code class=&quot;language-text&quot;&gt;Actions must be plain objects. Use custom middleware for async actions.&lt;/code&gt;라는 에러가 뜨면서 되질 않는다. 액션은 순수한 객체여야 하며 비동기 액션을 위해서는 커스텀 미들웨어를 쓰라는 뜻이다.&lt;/p&gt;
&lt;h2&gt;Redux Thunk&lt;/h2&gt;
&lt;p&gt;대표적으로 많이들 쓰는 &lt;a href=&quot;https://github.com/reduxjs/redux-thunk&quot;&gt;redux-thunk&lt;/a&gt;에 대하여 알아보자.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; -S redux-thunk&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;기존 &lt;code class=&quot;language-text&quot;&gt;action -&gt; addTodo&lt;/code&gt;는 단순한 &lt;strong&gt;객체&lt;/strong&gt;를 리턴했지만 이제 비동기를 처리하기 위해 &lt;strong&gt;dispatch를 인자로 받고 그에 대한 작업을 promise로 반환하는 함수&lt;/strong&gt;를 리턴해야한다.
&lt;code class=&quot;language-text&quot;&gt;redux-thunk&lt;/code&gt;는 단순히 &lt;code class=&quot;language-text&quot;&gt;action&lt;/code&gt;에서 반환되어온 함수에 &lt;code class=&quot;language-text&quot;&gt;dispatch&lt;/code&gt;를 인자로 넣어 실행할 뿐이다. &lt;code class=&quot;language-text&quot;&gt;redux-thunk&lt;/code&gt;를 적용한 코드는 아래와 같다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsindex.js&quot;&gt;&lt;pre class=&quot;language-jsindex.js&quot;&gt;&lt;code class=&quot;language-jsindex.js&quot;&gt;import { createStore, applyMiddleware } from &amp;quot;redux&amp;quot;;
import { addTodo } from &amp;quot;./actions&amp;quot;;
import reducers from &amp;quot;./reducers&amp;quot;;
import ReduxThunk from &amp;quot;redux-thunk&amp;quot;;
const store = createStore(reducers, applyMiddleware(ReduxThunk));
log(&amp;quot;before&amp;quot;, store.getState());
store.dispatch(addTodo(&amp;quot;Hello world&amp;quot;)).then(() =&amp;gt; {
  log(&amp;quot;after&amp;quot;, store.getState());
});
function log(label, json) {
  const app = document.getElementById(&amp;quot;app&amp;quot;);
  app.innerHTML += `&amp;lt;h1&amp;gt;${label}&amp;lt;h1&amp;gt;`;
  app.innerHTML += `&amp;lt;pre&amp;gt;${JSON.stringify(json, undefined, 2)}&amp;lt;/pre&amp;gt;`;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsactions.js&quot;&gt;&lt;pre class=&quot;language-jsactions.js&quot;&gt;&lt;code class=&quot;language-jsactions.js&quot;&gt;import * as Api from &amp;quot;./api&amp;quot;;
export const addTodo = text =&amp;gt; dispatch =&amp;gt;
  Api.addTodo(text).then(todo =&amp;gt; dispatch({ type: &amp;quot;ADD_TODO&amp;quot;, newTodo: todo }));&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;action&lt;/code&gt;이 &lt;code class=&quot;language-text&quot;&gt;Promise&lt;/code&gt;를 반환한다는거 외에는 크게 달라진점이 없다. 나머지 &lt;code class=&quot;language-text&quot;&gt;getTodos&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;editTodos&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;removeTodos&lt;/code&gt;도 액션과 리듀서에 추가해보자.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsapi.js&quot;&gt;&lt;pre class=&quot;language-jsapi.js&quot;&gt;&lt;code class=&quot;language-jsapi.js&quot;&gt;const todos = [
  {
    text: &amp;quot;First Todo&amp;quot;,
    id: 0,
    completed: false
  }
];
let todoId = 1;
export const getTodos = () =&amp;gt;
  new Promise(resolve =&amp;gt; {
    window.setTimeout(() =&amp;gt; {
      resolve(todos);
    }, 2000);
  });
export const addTodo = text =&amp;gt;
  new Promise(resolve =&amp;gt; {
    window.setTimeout(() =&amp;gt; {
      resolve({
        text: text,
        id: todoId++,
        completed: false
      });
    }, 2000);
  });
export const editTodo = newTodo =&amp;gt;
  new Promise(resolve =&amp;gt; {
    window.setTimeout(() =&amp;gt; {
      const todoIndex = todos.find(todo =&amp;gt; todo.id === newTodo.id);
      todos[todoIndex] = { ...todos[todoIndex], ...newTodo };
      resolve(todos[todoIndex]);
    }, 2000);
  });
export const removeTodo = todoId =&amp;gt;
  new Promise(resolve =&amp;gt; {
    window.setTimeout(() =&amp;gt; {
      todos.splice(todos.findIndex(todo =&amp;gt; todo.id === todoId));
      resolve(todoId);
    }, 2000);
  });&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsactions.js&quot;&gt;&lt;pre class=&quot;language-jsactions.js&quot;&gt;&lt;code class=&quot;language-jsactions.js&quot;&gt;import * as Api from &amp;quot;./api&amp;quot;;
export const addTodo = text =&amp;gt; dispatch =&amp;gt;
  Api.addTodo(text).then(res =&amp;gt; dispatch({ type: &amp;quot;ADD_TODO&amp;quot;, newTodo: res }));
export const editTodo = newTodo =&amp;gt; dispatch =&amp;gt;
  Api.editTodo(newTodo).then(res =&amp;gt;
    dispatch({ type: &amp;quot;EDIT_TODO&amp;quot;, newTodo: res })
  );
export const removeTodo = todoId =&amp;gt; dispatch =&amp;gt;
  Api.removeTodo(todoId).then(res =&amp;gt;
    dispatch({ type: &amp;quot;REMOVE_TODO&amp;quot;, todoId: res })
  );
export const getTodos = () =&amp;gt; dispatch =&amp;gt;
  Api.getTodos().then(res =&amp;gt; dispatch({ type: &amp;quot;GET_TODOS&amp;quot;, todos: res }));&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsreducers.js&quot;&gt;&lt;pre class=&quot;language-jsreducers.js&quot;&gt;&lt;code class=&quot;language-jsreducers.js&quot;&gt;import { combineReducers } from &amp;quot;redux&amp;quot;;
export default combineReducers({
  todos: (todos = [], action) =&amp;gt; {
    switch (action.type) {
      case &amp;quot;GET_TODOS&amp;quot;:
        return action.todos;
      case &amp;quot;ADD_TODO&amp;quot;:
        return [...todos, action.newTodo];
      case &amp;quot;REMOVE_TODO&amp;quot;:
        return todos.filter(todo =&amp;gt; todo.id !== action.todoId);
      case &amp;quot;EDIT_TODO&amp;quot;:
        const sliced = todos.slice();
        const index = sliced.findIndex(todo =&amp;gt; todo.id === action.newTodo.id);
        if (index &amp;gt; -1) sliced[index] = action.newTodo;
        return sliced;
      default:
        return todos;
    }
  }
});&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsindex.js&quot;&gt;&lt;pre class=&quot;language-jsindex.js&quot;&gt;&lt;code class=&quot;language-jsindex.js&quot;&gt;import { createStore, applyMiddleware } from &amp;quot;redux&amp;quot;;
import { addTodo, getTodos, editTodo, removeTodo } from &amp;quot;./actions&amp;quot;;
import reducers from &amp;quot;./reducers&amp;quot;;
import ReduxThunk from &amp;quot;redux-thunk&amp;quot;;
const store = createStore(reducers, applyMiddleware(ReduxThunk));
start();
async function start() {
  log(&amp;quot;initial&amp;quot;, store.getState());
  await store.dispatch(getTodos());
  log(&amp;quot;getTodos&amp;quot;, store.getState());
  await store.dispatch(addTodo(&amp;quot;Hello Todo!&amp;quot;));
  log(&amp;quot;addTodos&amp;quot;, store.getState());
  await store.dispatch(
    editTodo({
      id: store.getState().todos[0].id,
      completed: true,
      text: &amp;quot;Edited!&amp;quot;
    })
  );
  log(&amp;quot;editTodo&amp;quot;, store.getState());
  await store.dispatch(removeTodo(store.getState().todos[0].id));
  log(&amp;quot;removeTodo&amp;quot;, store.getState());
}
function log(label, json) {
  const app = document.getElementById(&amp;quot;app&amp;quot;);
  app.innerHTML += `&amp;lt;h1&amp;gt;${label}&amp;lt;h1&amp;gt;`;
  app.innerHTML += `&amp;lt;pre&amp;gt;${JSON.stringify(json, undefined, 2)}&amp;lt;/pre&amp;gt;`;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;기본적인 &lt;code class=&quot;language-text&quot;&gt;CRUD&lt;/code&gt; 작업을 완료하였다. 다음 포스트에서는 &lt;code class=&quot;language-text&quot;&gt;react&lt;/code&gt;와 &lt;code class=&quot;language-text&quot;&gt;react-redux&lt;/code&gt;를 이용해 뷰를 만드는 작업을 진행한다.
CodeSandBox에 예제를 올려두었으니 참고하면 된다.&lt;/p&gt;
 &lt;iframe src=&quot;https://codesandbox.io/embed/kmx0w14lo3&quot; style=&quot;width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;&quot; sandbox=&quot;allow-modals allow-forms allow-popups allow-scripts allow-same-origin&quot;&gt;&lt;/iframe&gt;</content:encoded></item><item><title><![CDATA[Redux 마스터하기 - 리덕스란 무엇인가]]></title><description><![CDATA[…]]></description><link>https://ddalpange.github.io/2019-01-09-redux-step1/</link><guid isPermaLink="false">https://ddalpange.github.io/2019-01-09-redux-step1/</guid><pubDate>Wed, 09 Jan 2019 18:39:55 GMT</pubDate><content:encoded>&lt;p&gt;현재 &lt;code class=&quot;language-text&quot;&gt;RxJS&lt;/code&gt;와 &lt;code class=&quot;language-text&quot;&gt;Vuex&lt;/code&gt;를 쓰고 있는데 뭐니뭐니해도 대세는 &lt;code class=&quot;language-text&quot;&gt;Redux&lt;/code&gt;다. &lt;code class=&quot;language-text&quot;&gt;Redux&lt;/code&gt;를 심도깊게 본적이 없어서 이번기회에 정리할려고 한다. 많은 사람들이 &lt;code class=&quot;language-text&quot;&gt;React&lt;/code&gt;와 &lt;code class=&quot;language-text&quot;&gt;Redux&lt;/code&gt;를 세트메뉴로 생각하시는 분들이 많은데 나는 그냥 &lt;code class=&quot;language-text&quot;&gt;Redux&lt;/code&gt;에만 초점을 맞추고자 한다. 이번 포스트에는 간단히 &lt;code class=&quot;language-text&quot;&gt;Redux&lt;/code&gt;와 &lt;code class=&quot;language-text&quot;&gt;Flux&lt;/code&gt;의 차이를 알아보고 리덕스를 구현해보자.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2&gt;작성 예정 포스트&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;리덕스란 무엇인가&lt;/li&gt;
&lt;li&gt;리덕스의 미들웨어에 대하여 알아보자.&lt;/li&gt;
&lt;li&gt;리액트와 리덕스를 연결해보자.&lt;/li&gt;
&lt;li&gt;리덕스청크와 리덕스사가의 차이점은?&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Redux와 Flux의 차이점&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/949/1*3lvNEQE4SF6Z1l-680cfSQ.jpeg&quot; alt=&quot;Redux와 Flux의 차이&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Flux&lt;/code&gt;와 대비되는 &lt;code class=&quot;language-text&quot;&gt;Redux&lt;/code&gt;의 주요 특징을 꼽자면 &lt;strong&gt;하나의 스토어&lt;/strong&gt;와 &lt;strong&gt;리듀서&lt;/strong&gt; 그리고 &lt;strong&gt;불변&lt;/strong&gt;이라는 개념을 탑재했다. 어려워보이지만 별거 없다. 하나하나 따라치며 구현하다 보면 저절로 생각이 정리될 것이다.&lt;/p&gt;
&lt;h2&gt;코드로 구현해보자&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sh&quot;&gt;&lt;pre class=&quot;language-sh&quot;&gt;&lt;code class=&quot;language-sh&quot;&gt;npm i -S redux&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsactions.js&quot;&gt;&lt;pre class=&quot;language-jsactions.js&quot;&gt;&lt;code class=&quot;language-jsactions.js&quot;&gt;let nextTodoId = 0;

export const addTodo = text =&amp;gt; ({
  type: &amp;quot;ADD_TODO&amp;quot;,
  id: nextTodoId++,
  text
});&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsreducers.js&quot;&gt;&lt;pre class=&quot;language-jsreducers.js&quot;&gt;&lt;code class=&quot;language-jsreducers.js&quot;&gt;import { combineReducers } from &amp;quot;redux&amp;quot;;

export default combineReducers({
  todos: (todos = [], action) =&amp;gt; {
    switch (action.type) {
      case &amp;quot;ADD_TODO&amp;quot;:
        return [
          ...todos,
          {
            id: action.id,
            text: action.text,
            completed: false
          }
        ];
      default:
        return todos;
    }
  }
});&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsindex.js&quot;&gt;&lt;pre class=&quot;language-jsindex.js&quot;&gt;&lt;code class=&quot;language-jsindex.js&quot;&gt;import { createStore } from &amp;quot;redux&amp;quot;;
import { addTodo } from &amp;quot;./actions&amp;quot;;
import reducers from &amp;quot;./reducers&amp;quot;;

const store = createStore(reducers);

log(&amp;quot;before&amp;quot;, store.getState());
store.dispatch(addTodo(&amp;quot;Hello world&amp;quot;));
log(&amp;quot;after&amp;quot;, store.getState());

function log(label, json) {
  const app = document.getElementById(&amp;quot;app&amp;quot;);
  app.innerHTML += `&amp;lt;h1&amp;gt;${label}&amp;lt;h1&amp;gt;`;
  app.innerHTML += `&amp;lt;pre&amp;gt;${JSON.stringify(json, undefined, 2)}&amp;lt;/pre&amp;gt;`;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;간단하게 보자면 &lt;code class=&quot;language-text&quot;&gt;action&lt;/code&gt;에 비지니스 로직(비동기 통신 등)이 들어가고 리턴한 값을 &lt;code class=&quot;language-text&quot;&gt;reducer&lt;/code&gt;에서 &lt;code class=&quot;language-text&quot;&gt;state&lt;/code&gt;에 세팅한다.
즉 &lt;code class=&quot;language-text&quot;&gt;initial state&lt;/code&gt; -&gt; &lt;code class=&quot;language-text&quot;&gt;action&lt;/code&gt; -&gt; &lt;code class=&quot;language-text&quot;&gt;reducer&lt;/code&gt; -&gt; &lt;code class=&quot;language-text&quot;&gt;changed state&lt;/code&gt; 의 순서이다. 여기서 중요한 점은 &lt;code class=&quot;language-text&quot;&gt;reducer&lt;/code&gt;에서 들어온 인자값과 내뱉는 리턴값 사이의 종속성이 없어야하며, 인자가 아닌 외부 값들에 의하여 리턴값이 영향을 받아서는 안된다.
즉 &lt;code class=&quot;language-text&quot;&gt;reducer&lt;/code&gt;는 &lt;strong&gt;순수함수&lt;/strong&gt;여야만 한다. &lt;strong&gt;순수함수&lt;/strong&gt;에 대한 설명은 이 &lt;a href=&quot;https://ddalpange.github.io/2017/10/03/js-pureFunc/&quot;&gt;포스트&lt;/a&gt;를 참고하면 좋다.&lt;/p&gt;
&lt;h2&gt;완성본 보기&lt;/h2&gt;
&lt;p&gt;CodeSandbox에 올려두었다.&lt;/p&gt;
&lt;iframe src=&quot;https://codesandbox.io/embed/7jm4xr7lv6&quot; style=&quot;width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;&quot; sandbox=&quot;allow-modals allow-forms allow-popups allow-scripts allow-same-origin&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;다음 포스트에서는&lt;code class=&quot;language-text&quot;&gt;Action&lt;/code&gt;에서 비동기 통신을 도와주는 미들웨어를 소개할 예정이다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[2018년 회고]]></title><description><![CDATA[벌써 2018년이 다 지났다.  앞으로 매년간 한해를 돌아보는 회고를 작성하고자 한다.
이게 첫 시작이다 :) 2018년 TODO List 테스트프레임웍 (Mocha, Jest, etc…]]></description><link>https://ddalpange.github.io/2018-12-31-remember-2018/</link><guid isPermaLink="false">https://ddalpange.github.io/2018-12-31-remember-2018/</guid><pubDate>Mon, 31 Dec 2018 18:39:55 GMT</pubDate><content:encoded>&lt;p&gt;벌써 2018년이 다 지났다.  앞으로 매년간 한해를 돌아보는 회고를 작성하고자 한다.
이게 첫 시작이다 :)&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2&gt;2018년 TODO List&lt;/h2&gt;
&lt;ul class=&quot;contains-task-list&quot;&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; 테스트프레임웍 (Mocha, Jest, etc..) 실무에 써보기.&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; 서버사이드 렌더링 실무에 써보기.&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; 자신의 힘만으로 온전한 프로젝트를 만들기.&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; 오픈소스 활동 참여하기.&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; 컨퍼런스 경험하기.&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; 프론트엔드 영역에 대한 깊은 지식.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;테스트프레임웍 (Mocha, Jest, etc..) 실무에 써보기.&lt;/h3&gt;
&lt;p&gt;노루에서 프론트엔드 개발자는 나밖에 없다. 신규 프로젝트 개발도 해야하고 내가 개발한 노루의 아키텍쳐도 수정할게 너무 많이 보이는 지금 테스트도입은 그림의 떡이다.&lt;/p&gt;
&lt;h3&gt;서버사이드 렌더링 실무에 써보기.&lt;/h3&gt;
&lt;p&gt;현재 노루는 &lt;strong&gt;Angular&lt;/strong&gt;로 되어있고 AI Interview는 &lt;strong&gt;Vue&lt;/strong&gt;로 되어있다.
&lt;strong&gt;Nuxt&lt;/strong&gt;와 &lt;strong&gt;Angular Universal&lt;/strong&gt;을 도입할 수 있었는데 프로젝트 특성상 SEO가 중요하지 않음으로 도입하지 않았다.
&lt;strong&gt;React&lt;/strong&gt; + &lt;strong&gt;Next&lt;/strong&gt;의 조합은 하는 사람도 많고 후기도 간간이 들려오기에 부담스럽지 않았지만 &lt;strong&gt;Angular Universal&lt;/strong&gt;같은 경우는 예제도 많이 없었다.&lt;/p&gt;
&lt;h3&gt;자신의 힘만으로 온전한 프로젝트를 만들기.&lt;/h3&gt;
&lt;p&gt;정말 원없이 했다. 엎어진 프로젝트를 포함 4개의 프로젝트를 진행하였는데 깨닫는게 정말 많았다.
혼자 개발을 할때 중요한 점은 &lt;strong&gt;신중한 선택&lt;/strong&gt;과 &lt;strong&gt;빠른 생산성&lt;/strong&gt;이다.&lt;/p&gt;
&lt;p&gt;흔히들 &lt;strong&gt;Angular&lt;/strong&gt;와 &lt;strong&gt;React&lt;/strong&gt; 그리고 &lt;strong&gt;Vue&lt;/strong&gt; 중 어느게 제일 좋나요? 가 핫한 질문인데 3개 다 사용해본 입장으로써 말해보자면 다 똑같다. 프레임워크는 죄가 없다. 어차피 개발하다 보면 하나부터 끝까지 전부 구현해야한다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Angular&lt;/strong&gt;로 개발하면서 느낀 단점은 문서가 너무 빈약하단 점과 다른 프레임웍과 달리 &lt;strong&gt;Module&lt;/strong&gt;이란 개념을 탑재했는데 왜 굳이 &lt;strong&gt;Module&lt;/strong&gt;을 만들었는지 모르겠다. &lt;strong&gt;Module&lt;/strong&gt;별로 레이지로딩을 지원하는것도 아니고.. 코드 양만 길어진다.&lt;/p&gt;
&lt;p&gt;협업을 하면서 느낀 점은 프론트엔드 개발자가 아닌 백엔드, 서버 개발자들은 &lt;strong&gt;JS&lt;/strong&gt;에 대해 정말 하나도 모른다는 것이었다. 변수 앞에 &lt;code class=&quot;language-text&quot;&gt;var&lt;/code&gt;도 안붙이는게 태반이었고 코딩 스타일은 신기한 것들이 많았다. &lt;strong&gt;Prettier&lt;/strong&gt;가 없었다면 정말 한숨만 나왔을 것이다.&lt;/p&gt;
&lt;h3&gt;오픈소스 활동 참여하기.&lt;/h3&gt;
&lt;p&gt;업무중 &lt;strong&gt;TUI Chart&lt;/strong&gt;에서 애니메이션 에러가 나서 수정했다.
또 현재 깃허브에서 사용중인 &lt;strong&gt;Minos&lt;/strong&gt; 테마에 코드를 복사할 수 있는 기능을 추가했다.
오픈소스 시작 치고 나쁘지 않은것 같다. 적당한 오픈소스 프레임웍 하나 까고 싶은데 고민이다.&lt;/p&gt;
&lt;h3&gt;컨퍼런스 경험하기.&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;FEConf&lt;/strong&gt;에 가고싶어서 티켓팅을 기다리고 있었는데 판매사 사이트가 터졌다.
그래서 다음날로 밀렸는데 일하느라 티켓팅에 실패했다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;GDC Frontend&lt;/strong&gt;에 갈려고 티켓을 구매했는데 당일 응급실에 가서 2만원 날려먹었다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://media.giphy.com/media/11tTNkNy1SdXGg/giphy.gif&quot; alt=&quot;망할&quot;&gt;&lt;/p&gt;
&lt;p&gt;컨퍼런스와는 인연이 없는 해인듯 하다.&lt;/p&gt;
&lt;h3&gt;프론트엔드 영역에 대한 깊은 지식.&lt;/h3&gt;
&lt;p&gt;혼자 프론트엔드 업무를 전담하다 보니 생산성과 탄탄한 설계 중 어느 부분에서 멈춰야 할지에 대한 생각이 많았다.
페이스북 또는 구글같이 대규모 애플리케이션을 설계할려면 어떻게 해야할까?
아직 알고싶은 것들이 너무나 많다.&lt;/p&gt;
&lt;h2&gt;2019년 TODO List&lt;/h2&gt;
&lt;ul class=&quot;contains-task-list&quot;&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; 테스트프레임웍 (Mocha, Jest, etc..) 실무에 써보기.&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; 서버사이드 렌더링 실무에 써보기.&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; 컨퍼런스 참여하기.&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; 오픈소스 프로젝트 만들기.&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; 헥소 테마 만들던 것 마무리 하기.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;블로그 결산&lt;/h2&gt;
&lt;p&gt;2018년에는 총 14개의 포스트를 작성했다. 총 사용자 수는 &lt;strong&gt;3700&lt;/strong&gt; 총 세션 수는 &lt;strong&gt;4700&lt;/strong&gt;이다. 별도로 홍보한적은 거의 없음으로 이정도면 양호한 수준인것 같다.&lt;/p&gt;
&lt;p&gt;블로그를 하면서 느낀건 제목을 잘 정해야 한다는 것이다. &lt;a href=&quot;https://ddalpange.github.io/2017/10/10/js-not-duplicated-object-array/&quot;&gt;자바스크립트 배열 중복 제거하기&lt;/a&gt;에서 총 2394의 뷰가 있었는데 &lt;a href=&quot;https://ddalpange.github.io/2017/10/03/js-study-1/&quot;&gt;자바스크립트 이론 공부 1&lt;/a&gt;에서는 뷰가 거의 없었다.&lt;/p&gt;
&lt;p&gt;내년에는 글의 수 보다는 글의 질에 더 신경을 쓰면서 포스팅을 해야겠다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Written with &lt;a href=&quot;https://stackedit.io/&quot;&gt;StackEdit&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!--stackedit_data:
eyJoaXN0b3J5IjpbLTE4Mjk5NDkxODcsOTMzOTI1MTE2LC0xOD
EwMzIwMzY3LC0xMzc5MjE0MjUxLDIwNDA3NDA1NzBdfQ==
--&gt;</content:encoded></item><item><title><![CDATA[Rxjs 구독을 취소하는 여러가지 방법]]></title><description><![CDATA[Angular는 기본적으로 RxJS를 사용합니다. RxJS를 사용할때 스트림을 연 컴포넌트가 없어진다 해도 열린 스트림은 닫히지 않기 때문에 메모리를 계속 먹습니다. 그렇기 때문에 Unsubscribe…]]></description><link>https://ddalpange.github.io/2018-11-21-how-to-unsubscibe-in-rxjs/</link><guid isPermaLink="false">https://ddalpange.github.io/2018-11-21-how-to-unsubscibe-in-rxjs/</guid><pubDate>Wed, 21 Nov 2018 18:39:55 GMT</pubDate><content:encoded>&lt;p&gt;&lt;strong&gt;Angular&lt;/strong&gt;는 기본적으로 &lt;strong&gt;RxJS&lt;/strong&gt;를 사용합니다. &lt;strong&gt;RxJS&lt;/strong&gt;를 사용할때 스트림을 연 컴포넌트가 없어진다 해도 열린 스트림은 닫히지 않기 때문에 메모리를 계속 먹습니다. 그렇기 때문에 &lt;strong&gt;Unsubscribe&lt;/strong&gt;를 호출하여 스트림을 닫아주어야하는데요. 매번 &lt;strong&gt;Unsubscribe&lt;/strong&gt;를 하기는 너무나 귀찮음으로 스트림 구독을 해제할 수 있는 다양한 방법을 소개합니다.
참고로 &lt;strong&gt;HttpClient&lt;/strong&gt;, &lt;strong&gt;Router&lt;/strong&gt; 등 앵귤러 내부에서 제공하는 기능들은 따로 &lt;strong&gt;Unsubscribe&lt;/strong&gt;를 하지 않아도 자동으로 구독을 해제합니다.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2&gt;Async Pipe&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescriptsome-component.ts&quot;&gt;&lt;pre class=&quot;language-typescriptsome-component.ts&quot;&gt;&lt;code class=&quot;language-typescriptsome-component.ts&quot;&gt;export class SomeComponent implements OnInit {
	list$: Observable&amp;lt;Item[]&amp;gt;;
	ngOnInit(): void {
	    this.list$ = this.api.getList();
	}
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;htmlsome-component.html&quot;&gt;&lt;pre class=&quot;language-htmlsome-component.html&quot;&gt;&lt;code class=&quot;language-htmlsome-component.html&quot;&gt;&amp;lt;ng-container *ngIf=&amp;quot;list$ | async as list; else loadingTemplate&amp;quot;&amp;gt;
    &amp;lt;app-table [list]=&amp;quot;list&amp;quot; [keys]=&amp;quot;keys&amp;quot;&amp;gt;&amp;lt;/app-table&amp;gt;
&amp;lt;/ng-container&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Angular&lt;/strong&gt; 에서 제공하는 &lt;strong&gt;Async&lt;/strong&gt; pipe를 사용하는 방법입니다.
&lt;strong&gt;Async&lt;/strong&gt; pipe가 알아서 Observable을 구독하고 해지하기 때문에 사용자는 별도로 신경써줄 필요가 없죠. 다만 이 방법은 두가지의 문제가 있습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescriptsome-component.ts&quot;&gt;&lt;pre class=&quot;language-typescriptsome-component.ts&quot;&gt;&lt;code class=&quot;language-typescriptsome-component.ts&quot;&gt;export class SomeComponent implements OnInit {
	list$: Observable&amp;lt;Item[]&amp;gt;;
	ngOnInit(): void {
		this.list$ = this.api.getList().pipe(
			tap(list =&amp;gt; console.log(list))
		);
	}
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;첫번째로 스크립트내에서 데이터를 쓰기가 귀찮습니다. html에서 event를 통해서 받거나, 아니면 tap operator를 이용해 후킹하여 데이터를 저장해야합니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;htmlsome-component.html&quot;&gt;&lt;pre class=&quot;language-htmlsome-component.html&quot;&gt;&lt;code class=&quot;language-htmlsome-component.html&quot;&gt;&amp;lt;section&amp;gt;
	&amp;lt;ng-container *ngIf=&amp;quot;list$ | async as list; else loadingTemplate&amp;quot;&amp;gt;
	    &amp;lt;app-table [list]=&amp;quot;list&amp;quot; [keys]=&amp;quot;keys&amp;quot;&amp;gt;&amp;lt;/app-table&amp;gt;
	&amp;lt;/ng-container&amp;gt;
&amp;lt;/section&amp;gt;
&amp;lt;footer class=&amp;quot;another&amp;quot;&amp;gt;
	&amp;lt;!-- Error --&amp;gt;
	&amp;lt;pre [innerHTML]=&amp;quot;list | json&amp;quot;&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;/footer&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;list를 선언한 안쪽이 아닌 바깥쪽에서는 list에 접근할 수가 없습니다.
async pipe를 여러번 사용하면 api 요청도 여러번 날라가기 때문에 미리 마크업 구조를 잡고 가야합니다.&lt;/p&gt;
&lt;h2&gt;TakeUntill&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescriptsome-component.ts&quot;&gt;&lt;pre class=&quot;language-typescriptsome-component.ts&quot;&gt;&lt;code class=&quot;language-typescriptsome-component.ts&quot;&gt;export class SomeComponent implements OnInit, OnDestroy {
	list: Item[];
	list$: Observable&amp;lt;Item[]&amp;gt;;
	private unsubscribe$ = new Subject();
	ngOnInit(): void {
		this.list$ = this.api.getList().pipe(
			takeUntill(this.unsubscribe$)
		).subscribe(list =&amp;gt; {
			this.list = list;
		});
	}
	ngOnDestroy(): void {
	    this.unsubscribe$.next();
	    this.unsubscribe$.complete();
	}
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;인자로 넣어준 Observable (Subject)가 값을 방출하거나 종료할 경우 구독을 해제합니다.&lt;/p&gt;
&lt;h2&gt;TakeWhile&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescriptsome-component.ts&quot;&gt;&lt;pre class=&quot;language-typescriptsome-component.ts&quot;&gt;&lt;code class=&quot;language-typescriptsome-component.ts&quot;&gt;export class SomeComponent implements OnInit, OnDestroy {
	list: Item[];
	list$: Observable&amp;lt;Item[]&amp;gt;;
	private subscribing = true;
	ngOnInit(): void {
		this.list$ = this.api.getList().pipe(
			takeWhile(this.subscribing)
		).subscribe(list =&amp;gt; {
			this.list = list;
		});
	}
	ngOnDestroy(): void {
	    this.subscribing = false;
	}
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;인자로 넣어준 Boolean 값이 false일 경우 구독이 일어나지 않습니다.&lt;/p&gt;
&lt;h2&gt;Take&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescriptsome-component.ts&quot;&gt;&lt;pre class=&quot;language-typescriptsome-component.ts&quot;&gt;&lt;code class=&quot;language-typescriptsome-component.ts&quot;&gt;export class SomeComponent implements OnInit {
	list: Item[];
	list$: Observable&amp;lt;Item[]&amp;gt;;

	ngOnInit(): void {
		this.list$ = this.api.getList().pipe(
			take(1)
		).subscribe(list =&amp;gt; {
			this.list = list;
		});
	}
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;인자로 넣어준 숫자만큼 &lt;strong&gt;publish&lt;/strong&gt;가 일어나면 구독을 종료합니다.&lt;/p&gt;
&lt;h2&gt;First&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescriptsome-component.ts&quot;&gt;&lt;pre class=&quot;language-typescriptsome-component.ts&quot;&gt;&lt;code class=&quot;language-typescriptsome-component.ts&quot;&gt;export class SomeComponent implements OnInit {
	list: Item[];
	list$: Observable&amp;lt;Item[]&amp;gt;;

	ngOnInit(): void {
		this.list$ = this.api.getList().pipe(
			first()
		).subscribe(list =&amp;gt; {
			this.list = list;
		});
	}
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;첫번째 구독만 받는 operator입니다.
인자로 expression을 넘겨줄 수 있습니다.&lt;/p&gt;
&lt;p&gt;이 밖에도 효율적인 &lt;strong&gt;Unsubscribe&lt;/strong&gt; 방법이 있다면 알려주세요 !!&lt;/p&gt;
&lt;!--stackedit_data:
eyJoaXN0b3J5IjpbLTYxOTU5MjM0MywxNjEwNTEzMzc5XX0=
--&gt;</content:encoded></item><item><title><![CDATA[Hexo에서 Code Copy (Clipboard) 버튼 만들기]]></title><description><![CDATA[헥소 블로그 테마로 Minos를 사용하고 있다. 헥소는 기본적으로 Highlight를 이용해서 코드를 이쁘게 하는데 Highlight는 Prism과 달리 Code Copy 플러그인이 없어서 Clipboard…]]></description><link>https://ddalpange.github.io/2018-12-11-hexo-clipboard/</link><guid isPermaLink="false">https://ddalpange.github.io/2018-12-11-hexo-clipboard/</guid><pubDate>Wed, 21 Nov 2018 18:39:55 GMT</pubDate><content:encoded>&lt;p&gt;헥소 블로그 테마로 &lt;a href=&quot;https://github.com/ppoffice/hexo-theme-minos&quot;&gt;Minos&lt;/a&gt;를 사용하고 있다. 헥소는 기본적으로 &lt;a href=&quot;https://highlightjs.org/&quot;&gt;Highlight&lt;/a&gt;를 이용해서 코드를 이쁘게 하는데 &lt;a href=&quot;https://highlightjs.org/&quot;&gt;Highlight&lt;/a&gt;는 &lt;a href=&quot;https://prismjs.com/index.html&quot;&gt;Prism&lt;/a&gt;과 달리 Code Copy 플러그인이 없어서 &lt;a href=&quot;https://clipboardjs.com/&quot;&gt;Clipboard&lt;/a&gt;를 이용하여 직접 만들었다. 해당 수정사항을 &lt;strong&gt;Pull Request&lt;/strong&gt;로 보냈더니 승인해줬다. 오픈소스 활동 하나 더 늘었다!! 생각해보니 그냥 &lt;a href=&quot;https://highlightjs.org/&quot;&gt;Highlight&lt;/a&gt;를 &lt;a href=&quot;https://prismjs.com/index.html&quot;&gt;Prism&lt;/a&gt;으로 교체하는게 빠른듯.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;&lt;img src=&quot;/images/minos-contribute.png&quot; alt=&quot;Pull Request&quot;&gt;&lt;/p&gt;
&lt;h2&gt;사용법&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;clipboard.ejs&lt;/code&gt;를 &lt;strong&gt;themes/&lt;strong&gt;YOUR_THEME&lt;/strong&gt;/layout/plugins&lt;/strong&gt;에 넣는다.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;_config.yml&lt;/code&gt;에서 &lt;code class=&quot;language-text&quot;&gt;plugins.clipboard&lt;/code&gt;에 &lt;code class=&quot;language-text&quot;&gt;true&lt;/code&gt;를 넣는다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;ejsclipboard.ejs&quot;&gt;&lt;pre class=&quot;language-ejsclipboard.ejs&quot;&gt;&lt;code class=&quot;language-ejsclipboard.ejs&quot;&gt;&amp;lt;% if (!head &amp;amp;&amp;amp; !(has_config(&amp;#39;plugins.clipboard&amp;#39;) &amp;amp;&amp;amp; get_config(&amp;#39;plugins.clipboard&amp;#39;) === false)) { %&amp;gt;
    &amp;lt;script src=&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/clipboard.js/2.0.0/clipboard.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;style&amp;gt;
        .hljs {
            position: relative;
        }

        .hljs .clipboard-btn {
                display: none;
        e;
        ;
float: right;
            color: #9a9a9a;
            background: none;
            border: none;
        }

        .hljs &amp;gt; .clipboard-btn {
            })

        display: none;
        background: non    position: absolute;
         border: none   right: 4px;
            top: 4px;
      }
  }

        .hljs:hover &amp;gt; .clipboard-btn {
            display: inline;
        }

        .hljs &amp;gt; figcaption &amp;gt; .clipboard-btn {
            margin-right: 4px;
        }
    &amp;lt;/style&amp;gt;
    &amp;lt;script&amp;gt;
      $(document).ready(function () {
        $(&amp;#39;figure.hljs&amp;#39;).each(function(i, figure) {
          var codeId = ode&amp;#39;)&amp;#39;code-&amp;#39; + i;
           var code = figure.querySelector(&amp;#39;.code&amp;#39;);
          var copyButton = $(&amp;#39;&amp;lt;button&amp;gt;Copy &amp;lt;i class=&amp;quot;far fa-clipboard&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/button&amp;gt;&amp;#39;);
          code.id = codeId;
          copyButton.addClass(&amp;#39;clipboard-btn&amp;#39;);
          
          if (figcap&amp;#39;);
tion) {
            $(e.trigger).text(&amp;quot;Copied!&amp;quot;copyButton.attr(&amp;#39;data-clipboard-target-id&amp;#39;, codeId);

            e.clearSelecvar figcaption = figure.querySelector(&amp;#39;figcaption(&amp;#39;);

            setTimeout(funcif (figcaption() {
              $(e.trigger).text(&amp;quot;Copy&amp;quot;);
            }, 2500);
  figcaption.append(copyButton[0]);
          } else {
            figure.prepend(copyButton[0]);
          }
        });

         var clipboardfunction() {
            $(e.trigger).text(&amp;quot;Can&amp;#39;t in Safari&amp;quot;);
            setTimeout( = new ClipboardJS(&amp;#39;.clipboard-btn&amp;#39;, {
          target: function(trigger) {
              $(e.trigger).text(&amp;quot;Copy&amp;quot;);
            }, 2500);
  return document.getElementById(trigger.getAttribute(&amp;#39;data-clipboard-target-id&amp;#39;));
          }
        });
      })
    &amp;lt;/script&amp;gt;
&amp;lt;% } %&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;yml_config.yml&quot;&gt;&lt;pre class=&quot;language-yml_config.yml&quot;&gt;&lt;code class=&quot;language-yml_config.yml&quot;&gt;plugins:
	clipboard: true&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!--stackedit_data:
eyJoaXN0b3J5IjpbMjEzNzgzNDMxNiwtMTg0MDQyNDI2MCwtOD
Y5MDc0NDQwXX0=
--&gt;</content:encoded></item><item><title><![CDATA[Mac, IOS 프레임 웹 목업 만들기]]></title><description><![CDATA[pinterest 또는 google에 랜딩페이지 예시들을 보면 Mac, IOS 디바이스채로 앱을 소개하는 페이지들이 있다. 나도 이번에 knowru limited…]]></description><link>https://ddalpange.github.io/2018-11-16-make-site-mockup/</link><guid isPermaLink="false">https://ddalpange.github.io/2018-11-16-make-site-mockup/</guid><pubDate>Fri, 16 Nov 2018 18:39:55 GMT</pubDate><content:encoded>&lt;p&gt;pinterest 또는 google에 랜딩페이지 예시들을 보면 Mac, IOS 디바이스채로 앱을 소개하는 페이지들이 있다.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;나도 이번에 &lt;a href=&quot;https://www.knowrulimited.com&quot;&gt;knowru limited&lt;/a&gt;을 만들면서 해당 목업이 필요했는데 그림판, 파워포인트로는 아무리 붙여봤자 비율과 해상도가 맞지가 않더라.
전문적으로 포토샵을 다룰수 있는것이 아니라면 해상도와 비율을 맞춰 이미지를 만들기가 어려웠다.&lt;/p&gt;
&lt;p&gt;그래서 웹사이트들을 검색하다가 아주 유용한 사이트를 보아서 소개하려한다.
횟수 제한, 광고 그런거 없이 전부 무료다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mockuphone.com/?fbclid=IwAR3nVDAr5Tjimo5-4Sp7yBv9mQFVApwPjFjXML9jEMPo6Ot09UbYjoXsU-s#ios&quot;&gt;MockUPhone&lt;/a&gt;이라는 사이트다.&lt;/p&gt;
&lt;p&gt;해당 사이트에 스크린샷을 업로드하면 손쉽게 목업 이미지를 얻을 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/knowru-dashboard.png&quot; alt=&quot;Knowu Limited MockUp&quot;&gt;&lt;/p&gt;
&lt;!--stackedit_data:
eyJoaXN0b3J5IjpbNTQ5MTAzMTU3LDEzODE1MjQ2LDE4Nzk4ND
A1MDJdfQ==
--&gt;</content:encoded></item><item><title><![CDATA[블로깅을 편하게 하기 위한 발악 (hexo, travis, stackedit)]]></title><description><![CDATA[티스토리를 커스터마이징 하여 사용하다가 혈압이 올라서 다시 헥소로 포스팅을 하기로 했다. 티스토리는 자체 에디터를 사용하는데 html…]]></description><link>https://ddalpange.github.io/2018-11-17-hexo-travis-stackedit/</link><guid isPermaLink="false">https://ddalpange.github.io/2018-11-17-hexo-travis-stackedit/</guid><pubDate>Fri, 16 Nov 2018 18:39:55 GMT</pubDate><content:encoded>&lt;p&gt;티스토리를 커스터마이징 하여 사용하다가 혈압이 올라서 다시 헥소로 포스팅을 하기로 했다.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;티스토리는 자체 에디터를 사용하는데 html 결과물이 나오는 형태가 일관성이 없어서 테마를 바꿀때도 또 바꾸어줘야하고 심지어 페이지를 작성하는 에디터와 포스트를 작성하는 에디터가 달라서 포멧이 다르다. Gallery 등 다양한 툴을 붙여서 커스터마이징 하고 싶었는데 혈압올라서 그만뒀다&lt;/p&gt;
&lt;p&gt;그래서 티스토리의 단점을 커버하기보다 헥소의 단점을 커버하는게 더 낫다고 생각하여 변경하였다.&lt;/p&gt;
&lt;p&gt;헥소의 문제점은 두가지다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;hexo deploy -g&lt;/code&gt; 를 매번 해줘야한다.&lt;/li&gt;
&lt;li&gt;포스트만 따로 관리할수 있는 어드민이 없다&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;그래서 이 두가지 문제를 해결하는 방안을 포스팅하려한다.
헥소 블로그를 구성하는 방법은 따로 기술하지 않았다.&lt;/p&gt;
&lt;h2&gt;1. &lt;a href=&quot;https://travis-ci.org/&quot;&gt;Travis CI&lt;/a&gt;를 사용하여 자동 빌드 및 푸쉬하기&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.travis-ci.org/images/landing-page/laptop-f308ed79defa4f49c5f01af29a60084d.png&quot; alt=&quot;Travis CI screenshot&quot;&gt;&lt;/p&gt;
&lt;p&gt;앱의 빌드 및 배포를 도와주는 CI 툴이다. 완전 무료이고 사용법도 굉장히 쉽다. 헥소에서 트래비스를 적용하기 위한 과정은 다음과 같다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/settings/tokens&quot;&gt;https://github.com/settings/tokens&lt;/a&gt; 에서 &lt;strong&gt;repo&lt;/strong&gt;만 체크한 후 토큰을 발급받는다. 다른 권한은 필요하지 않다.&lt;/li&gt;
&lt;li&gt;헥소 저장소에 &lt;strong&gt;.travis.yml&lt;/strong&gt;를 추가하고 &lt;strong&gt;_config.yml&lt;/strong&gt;의 deploy 부분을 수정한다.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/marketplace/travis-ci&quot;&gt;Github Travis&lt;/a&gt;에 들어간 후 hexo blog 레파지토리를 등록해준다..&lt;/li&gt;
&lt;li&gt;travis에서 해당 레파지토리 settings에 들어간 후 environment variables에 **&lt;strong&gt;GITHUB_TOKEN&lt;/strong&gt;**라는 이름으로 깃허브에서 발급받은 토큰을 등록한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;yml.travis.yml&quot;&gt;&lt;pre class=&quot;language-yml.travis.yml&quot;&gt;&lt;code class=&quot;language-yml.travis.yml&quot;&gt;language: node_js
node_js:
	- &amp;quot;9&amp;quot;

branches:
	only:
		- master

install:
	- npm install

before_script:
	- git config --global user.name &amp;#39;YOURE_USERNAME&amp;#39;
	- git config --global user.email &amp;#39;YOURE_EMAIL&amp;#39;
	- sed -i &amp;quot;s/__GITHUB_TOKEN__/${__GITHUB_TOKEN__}/&amp;quot; _config.yml

script:
	- hexo clean
	- hexo generate
	- hexo deploy&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;yml_config.yml&quot;&gt;&lt;pre class=&quot;language-yml_config.yml&quot;&gt;&lt;code class=&quot;language-yml_config.yml&quot;&gt;deploy:
	type: git
	repo: https://__GITHUB_TOKEN__@github.com/YOURE_USERNAME/YOURE_USERNAME.github.io
	branch: master
	message: &amp;quot;travis auto deploy&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;2. Stackedit으로 markdown 파일들을 관리하기.&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://super-monitoring.com/blog/wp-content/uploads/2017/05/stackedit1.png&quot; alt=&quot;Stackedit&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://stackedit.io&quot;&gt;Stackedit&lt;/a&gt;은 온라인 마크다운 에디터다. 오프라인 글쓰기도 지원한다.
GitLab, Github, Google Drive 등 왠만한 클라우드 환경은 모두 지원해준다.
Github workspace를 등록해주면 자동으로 동기화를 진행한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;repo: &lt;code class=&quot;language-text&quot;&gt;https://github.com/username/blog.git&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;branch: &lt;code class=&quot;language-text&quot;&gt;master&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;path: &lt;code class=&quot;language-text&quot;&gt;source/_posts&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이제 Stackedit으로 마크다운 파일들을 관리할 수 있다 !!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://media.giphy.com/media/d2Z9QYzA2aidiWn6/giphy.gif&quot; alt=&quot;개쩔어&quot;&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Prettier에서 node를 찾지 못할 때.]]></title><description><![CDATA[NVM을 사용할 때 Node의 경로를 찾지 못하는 경우 해결하는 방법을 설명합니다. Webstorm에서 Prettier를 실행할 때 위와 같은 에러가 나는 경우가 있다. Webstorm의 Prettier 의 경로로 노드를 돌리는데 nvm…]]></description><link>https://ddalpange.github.io/2018-11-15-not-found-node-using-prettier/</link><guid isPermaLink="false">https://ddalpange.github.io/2018-11-15-not-found-node-using-prettier/</guid><pubDate>Thu, 15 Nov 2018 15:35:15 GMT</pubDate><content:encoded>&lt;p&gt;NVM을 사용할 때 Node의 경로를 찾지 못하는 경우 해결하는 방법을 설명합니다.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;Webstorm에서 Prettier를 실행할 때&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;/usr/bin/env: node: No such file or directory&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위와 같은 에러가 나는 경우가 있다.&lt;/p&gt;
&lt;p&gt;Webstorm의 Prettier &lt;code class=&quot;language-text&quot;&gt;/usr/bin/node&lt;/code&gt;의 경로로 노드를 돌리는데 nvm같은 경우에는 해당 경로에 node가 없기 때문에 에러가 난다.&lt;/p&gt;
&lt;p&gt;이럴 경우 nvm의 노드 경로와 &lt;code class=&quot;language-text&quot;&gt;/usr/bin/node&lt;/code&gt;에 심볼릭 링크를 연결해주면 정상적으로 동작한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;ln&lt;/span&gt; -s &lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;which&lt;/span&gt; node&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;&lt;/span&gt; /usr/bin/node&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!--stackedit_data:
eyJoaXN0b3J5IjpbLTUzNDU1NDg1MCwtMTkxODI1MDU3MywtMT
YyMzAwMTQ5Ml19
--&gt;</content:encoded></item><item><title><![CDATA[Ubuntu 18.04 개발환경, 한글 세팅하기]]></title><description><![CDATA[우분투 18.04 버전에서 개발환경과 한글 세팅하는 방법을 설명합니다. 사전 준비 패키지 설치하기 Gnome Shell Intergration 설치하기 한글 설정하기 Tweaks 실행하기 Keyboard & Mouse > Additional…]]></description><link>https://ddalpange.github.io/2018-11-15-ubuntu-18-0-4-hangul-and-devenv-setup/</link><guid isPermaLink="false">https://ddalpange.github.io/2018-11-15-ubuntu-18-0-4-hangul-and-devenv-setup/</guid><pubDate>Thu, 15 Nov 2018 15:34:40 GMT</pubDate><content:encoded>&lt;p&gt;우분투 18.04 버전에서 개발환경과 한글 세팅하는 방법을 설명합니다.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h3&gt;사전 준비&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;패키지 설치하기&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;apt-get&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; uim
&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;apt-get&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; gnome-tweak-tool
&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;apt-get&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; chrome-gnome-shell
&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;apt-get&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;zsh&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;apt-get&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;curl&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;sh&lt;/span&gt; -c &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;curl&lt;/span&gt; -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh&lt;span class=&quot;token variable&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&quot;&lt;/span&gt;
chsh -s /usr/bin/zsh&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/gnome-shell-integration/gphhapmejobijbbhgpjhcjognlahblep?hl=en&quot;&gt;Gnome Shell Intergration&lt;/a&gt; 설치하기&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;한글 설정하기&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Tweaks 실행하기&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Keyboard &amp;#x26; Mouse &gt; Additional Layout Options &gt; Korean Hangul/Hanja keys &gt; Right Alt as Hangul, right Ctrl as Hanja 체크&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Language Support &gt; Keyboard input method system 여기서 uim으로 변경&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;재부팅 후 Input Method 실행&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Global Settings &gt; Input method delployment &gt; Specity default IM 체크&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Global Settings &gt; Input method delployment &gt; Default input method 를 Byeoru로 변경&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Global Settings &gt; Input method toggle &gt; Enable input method toogle by hot keys 체크&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Global Settings &gt; Input method toggle &gt; Alternative input method 를 Byeoru로 변경&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Byepri key bindings 1 &gt; Byeoru [on]/[off] 를 “hangul”로 변경&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;재부팅 후 잘 되나 확인&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;2번을 모르는 사람들이 많은데 저걸 체크해주면 Xmodmap에서 부팅해줄때마다 오른쪽 Alt의 키코드를 바꿀 필요가 없다.&lt;/p&gt;
&lt;h3&gt;테마 세팅하기&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.gnome-look.org/&quot;&gt;gnome look&lt;/a&gt;에서 원하는 테마 및 아이콘을 다운받은 후 아이콘은 &lt;code class=&quot;language-text&quot;&gt;~/icons&lt;/code&gt; 또는 &lt;code class=&quot;language-text&quot;&gt;/usr/share/icons&lt;/code&gt; 디렉토리에, 테마는 &lt;code class=&quot;language-text&quot;&gt;~/.themes&lt;/code&gt; 또는 &lt;code class=&quot;language-text&quot;&gt;/usr/share/themes&lt;/code&gt; 디렉토리에 복사하고 적용하면 된다.&lt;/p&gt;
&lt;p&gt;Dock은 &lt;a href=&quot;https://extensions.gnome.org/&quot;&gt;Gnome Shell Extension&lt;/a&gt;에서 Dash To Dock을 적용하였고 쓸데없는 메뉴바를 사라지기 위해 Unite도 설치하였다.&lt;/p&gt;
&lt;!--stackedit_data:
eyJoaXN0b3J5IjpbOTgwNzI3MjgwLDk1MDkyODAzMCwxMDY2Nj
U5NTc1LDEzNjU1NzQwMzFdfQ==
--&gt;</content:encoded></item><item><title><![CDATA[티스토리에서 마크다운 지원하기]]></title><description><![CDATA[원래 블로그를 hexo로 운영하고 있었는데 아래와 같은 이유때문에 티스토리로 이전했다. 이미지를 넣기 매우매우 귀찮다 (일일이 asset폴더에 저장한 후, 경로를 써주어야한다) hexo 개발환경을 갖추어야한다. (개발환경이 안맞춰진 PC…]]></description><link>https://ddalpange.github.io/2018-11-15-support-tistory-markdown/</link><guid isPermaLink="false">https://ddalpange.github.io/2018-11-15-support-tistory-markdown/</guid><pubDate>Thu, 15 Nov 2018 15:33:47 GMT</pubDate><content:encoded>&lt;p&gt;원래 블로그를 hexo로 운영하고 있었는데 아래와 같은 이유때문에 티스토리로 이전했다.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;ul&gt;
&lt;li&gt;이미지를 넣기 매우매우 귀찮다 (일일이 asset폴더에 저장한 후, 경로를 써주어야한다)&lt;/li&gt;
&lt;li&gt;hexo 개발환경을 갖추어야한다. (개발환경이 안맞춰진 PC에서는 빌드 및 배포를 할수가 없다)&lt;/li&gt;
&lt;li&gt;잡다한 에러가 매우매우 많다.&lt;/li&gt;
&lt;li&gt;빌드할때마다 nvm으로 노드 버전을 바꾸어줘야한다.&lt;/li&gt;
&lt;li&gt;생각보다 검색 최적화가 이루어지지 않는다. (지킬을 쓸때는 꽤 많이 들어오는 편이었는데. 이상하게 hexo같은 경우는 유입이 거의 없었다.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;마크다운을 포기하고 싶지 않았기 때문에. 티스토리에서 마크다운을 지원하게 할 수 있도록 바꾸고싶었다. 구글에 검색해보니 다른 사람들이 작업한 방법은&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;CDN으로 github-markdown.css 를 내려받는다.&lt;/li&gt;
&lt;li&gt;별도의 마크다운 편집기를 사용하여 글을 작성한 후. html을 export한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;위 두 과정이었다.
내가 헥소로 넘어온 이유는 이미지를 넣기 귀찮아서인데, 별도의 마크다운 편집기를 사용해야한다면 티스토리를 사용할 이유가 없다. 직접 코드를 작성하기 시작했다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;CDN이어야한다. 별도로 js,css파일을 업로드하기 귀찮다.&lt;/li&gt;
&lt;li&gt;티스토리편집기의 장점과, 마크다운의 장점을 골고루 혼용할 수 있어야한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;그래서 아래와 같이 코드를 작성하여 기존 티스토리 편집기에서 마크다운을 지원하도록 바꾸었다.
테마 html 편집하기에서 아래 코드를 붙여넣기하면 된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;htmlmarkup&quot;&gt;&lt;pre class=&quot;language-htmlmarkup&quot;&gt;&lt;code class=&quot;language-htmlmarkup&quot;&gt;&amp;lt;!-- css --&amp;gt;
&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/github-markdown-css/2.10.0/github-markdown.css&amp;quot; /&amp;gt;
&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/prism/1.15.0/themes/prism.min.css&amp;quot; /&amp;gt;
&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/prism/1.15.0/plugins/toolbar/prism-toolbar.min.css&amp;quot; /&amp;gt;
&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/prism/1.15.0/plugins/line-numbers/prism-line-numbers.min.css&amp;quot; /&amp;gt;
&amp;lt;!-- js --&amp;gt;
&amp;lt;script src=&amp;quot;https://cdn.jsdelivr.net/npm/marked/marked.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/prism/1.15.0/prism.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/prism/1.15.0/plugins/toolbar/prism-toolbar.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/prism/1.15.0/plugins/line-numbers/prism-line-numbers.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/prism/1.15.0/plugins/copy-to-clipboard/prism-copy-to-clipboard.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/prism/1.15.0/components/prism-markup.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/prism/1.15.0/components/prism-c.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/prism/1.15.0/components/prism-typescript.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/prism/1.15.0/components/prism-scss.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/prism/1.15.0/components/prism-sass.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/prism/1.15.0/components/prism-css.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/prism/1.15.0/components/prism-javascript.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/prism/1.15.0/components/prism-json.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/prism/1.15.0/components/prism-python.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/prism/1.15.0/components/prism-jsx.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script&amp;gt;
try {
  var article = $(&amp;quot;.tt_article_useless_p_margin&amp;quot;);
  article[0].className += &amp;quot; markdown-body&amp;quot;;
  var childs = article.children();
  var results = [];

  for(var i = 0; i &amp;lt; childs.length; i++) {
    var child = childs[i];

    if (child.tagName === &amp;quot;P&amp;quot;) {
      if (child.children[0] &amp;amp;&amp;amp; child.children[0].tagName === &amp;quot;BR&amp;quot;) {
        results.push(&amp;quot;&amp;quot;);

      } else {
        results.push(child.innerText)

      }
    } else {
      results.push(child);

    }

    child.remove();

  }

  var string = &amp;quot;&amp;quot;;

  for (var i = 0; i &amp;lt; results.length; i++) {
    var result = results[i];

    if (typeof result === &amp;quot;string&amp;quot;) {
      string += result + &amp;quot;\n&amp;quot;;

    }  else {
      article.append(marked(string));
      string = &amp;quot;&amp;quot;;
      article.append(result);

    }
  }

  if (string) {
    article.append(marked(string));
  }
} catch (e) {
  console.error(e);
}
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;대충 만든 코드를 정리하고 &lt;strong&gt;TOC&lt;/strong&gt;를 적용해보자.
&lt;strong&gt;TOC&lt;/strong&gt;는 Table of Contents의 줄임말로 목차라고 생각하면 된다.&lt;/p&gt;
&lt;p&gt;markedJS에서 렌더러를 통해 마크다운을 엘리먼트로 변환하는 중간 과정에 hook을 걸 수 있다.
h1 ~ h6 엘리먼트에 훅을 걸고 본문의 맨 앞에 &lt;strong&gt;TOC&lt;/strong&gt;를 삽입하면 된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; toc &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; article &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;.tt_article_useless_p_margin&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;prepareTOC&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;toc&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;convert&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;article&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;insertTOC&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;article&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; toc&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;insertTOC&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;article&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; toc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;목차\n========\n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; firstLebel &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; toc&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; toc&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;level &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; toc&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; link &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; toc&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; tabs &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; j &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; firstLebel&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; j &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; link&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;level&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; j&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      tabs &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;\t&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    tabs &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;*&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    result &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; tabs &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot; [&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; link&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;text &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;](#&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; link&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;anchor &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;)\n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  
  result &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;\n\n&quot;&lt;/span&gt;
    
   &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;toc&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
     article&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;prepend&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;marked&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;result&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;	
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;



&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;convert&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;article&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

  article&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;className &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot; markdown-body&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; childs &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; article&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; results &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; childs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; child &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; childs&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;child&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;tagName &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;P&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;child&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;children&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; child&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;children&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;tagName &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;BR&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        results&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        results&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;child&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;innerText&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      results&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;child&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    child&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; string &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; results&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; results&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;string&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      string &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;\n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      article&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;marked&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;string&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      string &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      article&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;result&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;string&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    article&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;marked&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;string&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;



&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;prepareTOC&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;toc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; renderer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;marked&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Renderer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  renderer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;heading&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;text&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; level&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; raw&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; anchor &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;
    toc&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      anchor&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; anchor&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      level&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; level&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      text&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; text
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;&amp;lt;h&apos;&lt;/span&gt;
      &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; level
      &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos; id=&quot;&apos;&lt;/span&gt;
      &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; anchor
      &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;&quot;&gt;&apos;&lt;/span&gt;
      &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; text
      &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;&amp;lt;/h&apos;&lt;/span&gt;
      &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; level
      &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;&gt;\n&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  marked&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setOptions&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    renderer&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; renderer
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/markedjs/marked&quot;&gt;MarkedJS&lt;/a&gt;와 &lt;a href=&quot;https://github.com/PrismJS/prism&quot;&gt;PrismJS&lt;/a&gt;를 사용하였다.&lt;/p&gt;
&lt;p&gt;기존 티스토리 편집기에서 마크다운을 붙여넣다보니 다양한 문제들이 있다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;포스트 리스트에서 포스트 요약 내용을 마크다운으로 변환할 수 없다. 개행문자를 없앤채로 서버에서 내려오기 때문에 어디서 개행이 되었는지 알 수가 없기 때문.&lt;/li&gt;
&lt;li&gt;복붙하는 과정에서 편집기에서는 이상이 없으나, HTML보기를 체크하면 이상한 태그나 CSS가 먹어져 있는 경우가 많다.&lt;/li&gt;
&lt;li&gt;마크다운을 고려하지 않은 테마가 있기 때문에, github-markdown.css를 적용하더라도 눈으로 보고 css를 고쳐주어야한다.&lt;/li&gt;
&lt;li&gt;글을 작성할 때 마크다운 하이라이팅을 사용할 수 없다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;1번의 경우 고객센터를 통해 수정을 요구한 상태인데, 적용이 될지 안될지 모르겠다.&lt;/p&gt;
&lt;p&gt;좀 더 사용해보고 문제를 픽스한 후, 오픈소스로 배포할 예정이다&lt;/p&gt;
&lt;!--stackedit_data:
eyJoaXN0b3J5IjpbMzIxMDMzODUyLC0yNTU1ODc5NzUsLTI1MD
A3NTgyMF19
--&gt;</content:encoded></item><item><title><![CDATA[RxJS란 무엇인가?]]></title><description><![CDATA[을 사용하여 비동기 및 이벤트 기반의 프로그램을 작성하기 위한 라이브러리이다. 동기/비동기/이벤트 등 다양한 코드를 동일한 인터페이스로 작성할 수 있다는 점이 매우 인상적이다. 는 Iterator Pattern과 Observer Pattern…]]></description><link>https://ddalpange.github.io/2018-08-21-rxjs-whatisrxjs/</link><guid isPermaLink="false">https://ddalpange.github.io/2018-08-21-rxjs-whatisrxjs/</guid><pubDate>Tue, 21 Aug 2018 14:51:12 GMT</pubDate><content:encoded>&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Observable&lt;/code&gt;을 사용하여 비동기 및 이벤트 기반의 프로그램을 작성하기 위한 라이브러리이다. 동기/비동기/이벤트 등 다양한 코드를 동일한 인터페이스로 작성할 수 있다는 점이 매우 인상적이다. &lt;code class=&quot;language-text&quot;&gt;RxJS&lt;/code&gt;는 &lt;em&gt;Iterator Pattern&lt;/em&gt;과 &lt;em&gt;Observer Pattern&lt;/em&gt;을 결합하여 이벤트들을 관리하기 위한 효울적인 방법을 제공한다. &lt;code class=&quot;language-text&quot;&gt;RxJS&lt;/code&gt;의 주요 개념은 다음와 같다.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Observable&lt;/code&gt;: 미래에 발생할 이벤트, 값들을 모아놓은 컬렉션이다.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Observer&lt;/code&gt;: &lt;code class=&quot;language-text&quot;&gt;Observable&lt;/code&gt;이 배달한 값을 읽을 수 있도록 하는 콜백들의 컬렉션이다.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Subscription&lt;/code&gt;: &lt;code class=&quot;language-text&quot;&gt;Observable&lt;/code&gt;의 실행을 나타낸다. 기본적으로 &lt;code class=&quot;language-text&quot;&gt;Observable&lt;/code&gt;의 실행 취소에 적합하다.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Operators&lt;/code&gt;: 함수형 프로그램을 제공하기 위한 순수 함수들의 모음이다.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Subject&lt;/code&gt;: &lt;code class=&quot;language-text&quot;&gt;Observer&lt;/code&gt;이자 &lt;code class=&quot;language-text&quot;&gt;Observable&lt;/code&gt;이다. 다수의 &lt;code class=&quot;language-text&quot;&gt;Observable&lt;/code&gt;에 브로드캐스팅 할 수 있는 유일한 방법이다.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Scheduler&lt;/code&gt;: &lt;code class=&quot;language-text&quot;&gt;setTimeout&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;requestAnimationFrame&lt;/code&gt;과 같은 비동기 함수의 동시성을 제어할 수 있다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;예제&lt;/h3&gt;
&lt;h4&gt;버튼의 이벤트 리스너&lt;/h4&gt;
&lt;p&gt;일반적으로 이벤트 리스너를 만드는 코드는 다음과 같다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; button &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;button&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
button&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;click&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Clicked!&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;RxJS를 쓴다면 이것을 &lt;code class=&quot;language-text&quot;&gt;Observable&lt;/code&gt;로 변환 할 수 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; fromEvent &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; rxjs&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; button &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;button&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;fromEvent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;button&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;click&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Clicked!&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;순수성&lt;/h4&gt;
&lt;p&gt;RxJS는 순수함수를 제공하기 때문에 넘어오는 값은 모두 독립적(불변)이다.
불변이라는것은 에러가 날 확률이 적어진다는 것과 같다.&lt;/p&gt;
&lt;p&gt;일반적인 가변 변수를 사용하는 코드이다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; count &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; button &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;button&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
button&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;click&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Clicked &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;count&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; times&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;RxJS를 쓴다면 변수를 불변적으로 관리할 수 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; fromEvent &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; rxjs&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; scan &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; rxjs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;operators&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; button &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;button&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;fromEvent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;button&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;click&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;scan&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; count &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Clicked &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;count&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; times&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;scan&lt;/code&gt;은 배열의 &lt;code class=&quot;language-text&quot;&gt;reduce&lt;/code&gt;와 유사하게 동작한다.&lt;/p&gt;
&lt;h4&gt;흐름&lt;/h4&gt;
&lt;p&gt;RxJS는 다양한 오퍼레이터를 통해 이벤트흐름을 제어할 수 있다.&lt;/p&gt;
&lt;p&gt;그 예로 1초가 지나야 사용자의 클릭을 허용하는 코드가 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; count &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; rate &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; lastClick &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Date&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; rate&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; button &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;button&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
button&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;click&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Date&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; lastClick &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; rate&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Clicked &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;count&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; times&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    lastClick &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Date&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이것을 RxJS를 이용한다면 다음의 코드로 바꿀 수 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; fromEvent &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; rxjs&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; throttleTime&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; scan &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; rxjs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;operators&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; button &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;button&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;fromEvent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;button&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;click&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;throttleTime&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;scan&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; count &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Clicked &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;count&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; times&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;throttleTime&lt;/code&gt; 외에도 &lt;code class=&quot;language-text&quot;&gt;delay&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;debounceTime&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;take&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;takeUntil&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;distinct&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;distinctUntilChanged&lt;/code&gt; 등 엄청나게 많은 오퍼레이터를 제공한다&lt;/p&gt;
&lt;h4&gt;유연한 값&lt;/h4&gt;
&lt;p&gt;구독이 일어나기 전 오퍼레이터들을 이용하여 값들을 미리 변환시킬 수 있다.&lt;/p&gt;
&lt;p&gt;클릭할 때마다 마우스의 X Position을 더해주는 코드는 아래와 같다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; count &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; rate &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; lastClick &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Date&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; rate&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; button &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;button&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
button&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;click&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Date&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; lastClick &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; rate&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    count &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;clientX&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    lastClick &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Date&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이것을 RxJS로 쓴다면 아래와 같다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; fromEvent &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; rxjs&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; throttleTime&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; map&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; scan &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; rxjs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;operators&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; button &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;button&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;fromEvent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;button&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;click&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;throttleTime&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;clientX&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;scan&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;count&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; clientX&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; count &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; clientX&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 밖에도 &lt;code class=&quot;language-text&quot;&gt;pluck&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;pairwise&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;sample&lt;/code&gt;과 같은 다양한 오퍼레이터를 지원한다.&lt;/p&gt;
&lt;!--stackedit_data:
eyJoaXN0b3J5IjpbMTYxMjQzMzkwNywtMjA1MDg1MzQ4MiwtMT
U0MTI3NTgwMF19
--&gt;</content:encoded></item><item><title><![CDATA[첫 프로젝트]]></title><description><![CDATA[노루는 머신러닝 플랫폼을 대신 호스팅 및 통계 등을 제공하는 서비스인데. 기존에 있는 노루의 프론트엔드는 장고 템플릿을 사용하여 보여주고 있었다. 정말 기능만 중시했기 때문에 UI/UX…]]></description><link>https://ddalpange.github.io/2018-07-21-my-first-project/</link><guid isPermaLink="false">https://ddalpange.github.io/2018-07-21-my-first-project/</guid><pubDate>Sat, 21 Jul 2018 18:21:27 GMT</pubDate><content:encoded>&lt;p&gt;노루는 머신러닝 플랫폼을 대신 호스팅 및 통계 등을 제공하는 서비스인데. 기존에 있는 노루의 프론트엔드는 장고 템플릿을 사용하여 보여주고 있었다. 정말 기능만 중시했기 때문에 UI/UX가 매우 불편하고 유지보수 측면중에서도 어려운게 많았다. 무엇보다 &lt;code class=&quot;language-text&quot;&gt;Jquery&lt;/code&gt;를 쓰기 싫어서 강력하게 이것은 새로 만들어야한다! 라고 주장하고 프론트엔드 개발자가 나 혼자임에도 불구하고 아무 생각 없이 시작했다. (그것은 틀린 선택이었다.)
1달이면 될 줄 완성할줄 알았던 노루 프로젝트는 무려 3달 반까지 질질 끌었다. 그래서 내가 무엇을 잘못했는지 회고해보려고 한다.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h4&gt;UX/UI 라이브러리를 잘못 선택하였다.&lt;/h4&gt;
&lt;p&gt;유료 라이브러리면 잘 되어있겠지 하고 guruable이라는 상용 라이브러리를 구입하여 사용하였는데 그야말로 &lt;em&gt;&lt;strong&gt;쓰레기&lt;/strong&gt;&lt;/em&gt; 였다. 본적도 없는 패키지의 숫자가 20개가 넘어갔으며 앵귤러로 마이그레이션한 라이브러리가 앵귤러는 쓰지않고 jquery만 잔뜩 써대고 있었다. css 컴포넌트화는 전혀 안되어있었으며 그야말로 jquery 복붙한 코드를 돈주고 산셈이었다. 그래도 돈이 아까워서 2주동안 마이그레이션 하면서 진행하다가 앵귤러 5버전으로 업그레이드 하는 과정에서 버전을 올릴 수가 없어서 버렸다. ngx-admin을 사용하다가 테마가 너무 유치한것 같아서 material2로 갈아탔는데 처음부터 calary로 하면 좋지 않았을까 ..&lt;/p&gt;
&lt;h4&gt;http를 제대로 알지 못했다.&lt;/h4&gt;
&lt;p&gt;기존 회사에서는 기본적인 보안도 걸지 않았기 때문에 신경을 안 쓰고 있었는데 CSRF, CORS 등 알 수도 없는 문제들이 터지니 계속해서 늘어졌다. http 서비스를 설계할때 백엔드 rest api의 url을 이해하고 다양한 method를 공통적으로 쓸 수 있는 api를 시작할때부터 만들었어야 했는데 그러질 못했다.&lt;/p&gt;
&lt;h4&gt;다양한 input format을 대비하여 공통 컴포넌트를 만들었어야 했다.&lt;/h4&gt;
&lt;p&gt;노루를 하면서 만났던 가장 큰 복병은 FormData이다. JSON 말고는 다뤄본적이 없었기 때문에 Angular의 Reactive Form과 FormData를 조합하는데 어려움이 있었다. 또 백엔드로 보내야할 데이터의 형태가 이상한것들도 부지기수였다.&lt;/p&gt;
&lt;h4&gt;Rx에 대한 이해도가 부족했다.&lt;/h4&gt;
&lt;p&gt;부끄럽게도 Angular를 사용하면서 RxJS는 http 모듈로의 용도 외에는 사용하지 않았다.
기존의 자바스크립트 로직을 Rx로직으로 리팩토링 하다보니 Rx는 정말 잘 알고있으면 무적이라는 생각이 들었다.&lt;/p&gt;
&lt;h4&gt;앵귤러를 고집할 필요가 없었다.&lt;/h4&gt;
&lt;p&gt;angular는 기본적으로 프로젝트가 클때 진가를 발휘한다. 노루는 양이 많긴 하지만 별 어려운 작업은 없었는데 그냥 preact 또는 vue를 사용하여 장고 템플릿 안에 mba형식으로 만들었으면 훨씬 더 빠른 작업이 가능했을것 같다.&lt;/p&gt;
&lt;!--stackedit_data:
eyJoaXN0b3J5IjpbLTU0NzI2NTk5NSwxMDUyMTA2MDg2XX0=
--&gt;</content:encoded></item><item><title><![CDATA[나도 오픈소스 기여자다!]]></title><description><![CDATA[오픈소스에 대해 별 생각없이 살고 있다가 우연치 않게 업무중에 에러가 발생하여 수정 후 PR을 날려보았다. 첫 PR인데 머지되서 기쁘다. 열심히 살아야겠다. 나도 오픈소스 기여자다!]]></description><link>https://ddalpange.github.io/2018-05-14-im-open-source-contibutor/</link><guid isPermaLink="false">https://ddalpange.github.io/2018-05-14-im-open-source-contibutor/</guid><pubDate>Mon, 14 May 2018 18:21:27 GMT</pubDate><content:encoded>&lt;p&gt;오픈소스에 대해 별 생각없이 살고 있다가 우연치 않게 업무중에 에러가 발생하여 수정 후 PR을 날려보았다. 첫 PR인데 머지되서 기쁘다. 열심히 살아야겠다.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;&lt;img src=&quot;/images/tui-chart-contribute.png&quot; alt=&quot;나도 오픈소스 기여자다!&quot;&gt;&lt;/p&gt;
&lt;!--stackedit_data:
eyJoaXN0b3J5IjpbNTcxNzE5ODg3LC02MjMyNDM2MzEsLTE0Nz
g5NTAzNDBdfQ==
--&gt;</content:encoded></item><item><title><![CDATA[자바스크립트 차트 라이브러리]]></title><description><![CDATA[Knowru 회사에서 나의 주요업무는 데이터 시각화다. 여러 차트 라이브러리를 사용해보며 부딪히고 깨진 경험을 공유해보고자 한다. ChartJS…]]></description><link>https://ddalpange.github.io/2018-05-05-choice-chart-library/</link><guid isPermaLink="false">https://ddalpange.github.io/2018-05-05-choice-chart-library/</guid><pubDate>Sat, 05 May 2018 08:30:00 GMT</pubDate><content:encoded>&lt;p&gt;Knowru 회사에서 나의 주요업무는 데이터 시각화다. 여러 차트 라이브러리를 사용해보며 부딪히고 깨진 경험을 공유해보고자 한다.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h3&gt;&lt;a href=&quot;https://www.chartjs.org/&quot;&gt;ChartJS&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;깃허브에서 가장 많은 스타를 받은 차트 라이브러리이다.
사용법이 굉장히 직관적이고 문서화도 잘되어있는 편이다.
Canvas를 이용하여 그리기 때문에 반응형 레이아웃도 문제없으며
세부적인 커스터마이징도 어렵지 않은편이다.&lt;/p&gt;
&lt;p&gt;무엇보다 사용자가 많기 때문에 스택 오버플로에서 왠만하면 다 해결할 수 있다.
현재 Knowru 서비스에서 사용중이다.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;https://d3js.org/&quot;&gt;D3.js&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;D3또한 굉장히 유명한 데이터 시각화 라이브러리이다.
다만 ChartJS와는 용도가 좀 다른데 D3는 차트라는 단순한 주제를 넘어서
데이터 시각화에 대한 포괄적인 개념을 담아놓은 라이브러리이기 떄문에 사용법이 굉장히 복잡하다.
Table HeatMap 차트를 그리는데 Axis 픽셀 위치 정하다가 빡쳐서 집어던졌다.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;http://c3js.org/&quot;&gt;C3.js&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;D3를 베이스로차트에 한 차트 라이브러리이다.
사용법, 디자인 모두 괜찮아보이나 ChartJS에 비교하여 특징이 될만한 장점이 없어서 써보진 않았다.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;https://www.amcharts.com/&quot;&gt;AmCharts&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;엄청난 예제를 자랑하는 라이브러리이다.
유료차트 답게 Theming, Zoomable, Time Responsible 등
부수적인 기능들이 많이 탑재되어 있으며
다양한 차트 커스터마이징을 지원한다.&lt;/p&gt;
&lt;p&gt;이에 반해 차트를 그리는 api는 직관적이지 못해 아쉽다.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;https://www.highcharts.com&quot;&gt;HighCharts&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;유료인거같던데 안써봐서 모르겠다.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;https://github.com/nhnent/tui.chart&quot;&gt;TUIChart&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;네이버에서 제공하는 오픈소스 차트 라이브러리다.
이 차트의 장점은 무려 &lt;em&gt;IE8&lt;/em&gt;을 지원한다는 것과 다양한 차트타입을 지원한다는 것이다.
Oowa 서비스에서 Table HeatMap을 사용하기 위해 쓰고있다.&lt;/p&gt;
&lt;p&gt;단점은 반응형 웹에 매우 취약하단것과 문서가 매우매우매우 빈약하다는 것. 그리고 자잘한 에러들이 많다는 것이다.
반응형은 document.body에 resize이벤트를 걸어 놨지만, 속도가 매우매우 느리니 성능개선을 할 방법을 찾아야 할 것 같다.&lt;/p&gt;
&lt;p&gt;외국에서는 쓰질 않으니 스택오버플로 등 검색해도 나올리는 없고 정 궁금하면 개발자한테 메일을 쏘거나 소스를 까봐야한다.&lt;/p&gt;
&lt;p&gt;나 자신도 Table HeatMap을 쓰는데 에러가 있어 Pull Request를 보낸 상태이다.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;차트 용어는 이 &lt;a href=&quot;https://wiki.pentaho.com/display/Reporting/Charting+Terminology&quot;&gt;링크&lt;/a&gt;를 참고하면 좋다.&lt;/p&gt;
&lt;!--stackedit_data:
eyJoaXN0b3J5IjpbMTAzNDQzNjYxLC0xMzk0NjA4Mzc1LDcyMT
Q0ODA0NSwtNjU1NDEzNzQ1XX0=
--&gt;</content:encoded></item><item><title><![CDATA[VSCODE 익스텐션]]></title><description><![CDATA[한동안 Webstorm을 쓰다가 무료체험기간 30일이 끝나버려서 다시 VSCODE를 사용하고 있습니다. 유료툴인 Webstorm은 추가 패키지를 안깔아도 각종 인텔리센스와 개발경험을 제공하지만 VSCODE는 그렇지 않습니다. Angular…]]></description><link>https://ddalpange.github.io/2018-04-21-vscode-extensions/</link><guid isPermaLink="false">https://ddalpange.github.io/2018-04-21-vscode-extensions/</guid><pubDate>Sat, 21 Apr 2018 01:33:28 GMT</pubDate><content:encoded>&lt;p&gt;한동안 Webstorm을 쓰다가 무료체험기간 30일이 끝나버려서 다시 VSCODE를 사용하고 있습니다. 유료툴인 Webstorm은 추가 패키지를 안깔아도 각종 인텔리센스와 개발경험을 제공하지만 VSCODE는 그렇지 않습니다. Angular를 개발하면서 필요하다 느꼈던 Extension을 공유합니다.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;ol&gt;
&lt;li&gt;Angular Files&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;해당 위치에 &lt;code class=&quot;language-text&quot;&gt;ng generate someting&lt;/code&gt;를 할 수 있는 패키지입니다.
폴더구조를 고민할때 사용하면 좋습니다.&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Angular Language Service&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Angular팀에서 내놓은 공식 익스텐션입니다.
&lt;code class=&quot;language-text&quot;&gt;@angular/language-service&lt;/code&gt;를 같이 깔아야 한다는데 안깔았었네요.
역시 설명을 잘 읽어봐야 합니다.&lt;/p&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;Auto Rename Tag&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;html에서 여는 태그를 변경할때 자동으로 닫는 태그를 변경해줍니다.
비슷한 용도로 Auto Close Tag가 있는데 Generic을 선언해줄때도 태그로 인식해서 닫아버려요
&lt;code class=&quot;language-text&quot;&gt;Observable&amp;lt;any&gt;&amp;lt;/any&gt;&lt;/code&gt; 이런식으로 말이죠. 사실 &lt;em&gt;emmet&lt;/em&gt;을 주로 이용하기때문에 필요 없습니다.&lt;/p&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;Beautify&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;필수 패키지입니다.
html을 복붙할때 자꾸 한칸식 밀리는데 그럴때마다 사용하면 편합니다.&lt;/p&gt;
&lt;ol start=&quot;5&quot;&gt;
&lt;li&gt;Bracket Pair Colorizer&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;가끔가다 천국의 계단 만드시는분 있는데 이거 없으면 못봐요.&lt;/p&gt;
&lt;ol start=&quot;6&quot;&gt;
&lt;li&gt;Color Picker&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;디자인도 별로고 속도도 별로지만 별 대안이 없습니다.&lt;/p&gt;
&lt;ol start=&quot;7&quot;&gt;
&lt;li&gt;Debugger Chrome&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;vscode에서 찍은 중단점을 크롬에서 확인할 수 있어요.
사용법도 간편하고 좋아보이지만 느려서 잘 안써요.&lt;/p&gt;
&lt;ol start=&quot;8&quot;&gt;
&lt;li&gt;Code Runner&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;가끔가다 검사기로 함수 테스트하는데 이거 있으면 필요없습니다.&lt;/p&gt;
&lt;ol start=&quot;9&quot;&gt;
&lt;li&gt;ESLint&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;귀찮지만 켜서 나쁠거 없습니다.&lt;/p&gt;
&lt;ol start=&quot;10&quot;&gt;
&lt;li&gt;TSLint&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;마찬가지에요.&lt;/p&gt;
&lt;ol start=&quot;11&quot;&gt;
&lt;li&gt;expand-region&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;제일 중요합니다. 웹스톰에 &lt;em&gt;&lt;strong&gt;Ctrl + w&lt;/strong&gt;&lt;/em&gt;를 누르면 자동으로 블록이 확장되는데 vscode는 이러한 기능이 없어요.
웹스톰에 비하면 많이 멍청해서 단어 단위를 잘못 읽을때가 많지만 없는것보단 낫습니다.&lt;/p&gt;
&lt;ol start=&quot;12&quot;&gt;
&lt;li&gt;Git History&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;깃에 대한 히스토리를 볼 수 있어요.&lt;/p&gt;
&lt;ol start=&quot;13&quot;&gt;
&lt;li&gt;Git Lens&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;편집중인 라인의 마지막 커밋시점을 알 수 있습니다.
쓸만한거같아요.&lt;/p&gt;
&lt;ol start=&quot;14&quot;&gt;
&lt;li&gt;intellisense css class names in HTML&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;css에 대한 autocomplete를 제공합니다.
emmet할때는 안떠서 아쉬워요.&lt;/p&gt;
&lt;ol start=&quot;15&quot;&gt;
&lt;li&gt;npm&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;vscode의 명령팔레트에서 npm 명령어를 사용할 수 있습니다.&lt;/p&gt;
&lt;ol start=&quot;16&quot;&gt;
&lt;li&gt;npm intellisense&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;글로벌에 깔린 패키지들에 대한 인텔리센스를 제공합니다.&lt;/p&gt;
&lt;ol start=&quot;17&quot;&gt;
&lt;li&gt;path intellisense&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;from 쓸때 경로에 대한 intellisense를 알려줘요&lt;/p&gt;
&lt;ol start=&quot;18&quot;&gt;
&lt;li&gt;TODO Highright&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;이거 없으면 주석이 하얀색이에요 보기싫습니다.&lt;/p&gt;
&lt;ol start=&quot;19&quot;&gt;
&lt;li&gt;Auto Import&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;typescript를 사용할때 각종 package를 자동으로 import해줍니다.
비슷한 패키지로 typescript hero가 있는데 이 패키지는 absolute import를 지원하지 않습니다.&lt;/p&gt;
&lt;!--stackedit_data:
eyJoaXN0b3J5IjpbNTc0MDQ2OTMxLC0xODUxMzQwNzMsLTM3MD
E1ODMwN119
--&gt;</content:encoded></item><item><title><![CDATA[NVM(Node Version Manager)을 통한 NodeJS 버전 관리]]></title><description><![CDATA[Node 릴리즈 노트를 보면 약 3일 정도에 마이너 버전이 하나씩 올라갈 정도로 매우 매우 빠르다. 작년(2017) 3월 21일 기준으로 LTS는 6.10.1인데 올해(2018년) 3월 24일 기준으로 LTS는 8.10.0이다. STABLE은 9.…]]></description><link>https://ddalpange.github.io/2018-03-24-manage-node-version/</link><guid isPermaLink="false">https://ddalpange.github.io/2018-03-24-manage-node-version/</guid><pubDate>Sat, 24 Mar 2018 18:39:55 GMT</pubDate><content:encoded>&lt;p&gt;&lt;a href=&quot;https://nodejs.org/en/download/releases/&quot;&gt;Node 릴리즈 노트&lt;/a&gt;를 보면 약 3일 정도에 마이너 버전이 하나씩 올라갈 정도로 매우 매우 빠르다.&lt;/p&gt;
&lt;p&gt;작년(2017) 3월 21일 기준으로 LTS는 &lt;strong&gt;6.10.1&lt;/strong&gt;인데 올해(2018년) 3월 24일 기준으로 LTS는 &lt;strong&gt;8.10.0&lt;/strong&gt;이다.&lt;/p&gt;
&lt;p&gt;STABLE은 &lt;strong&gt;9.9.0&lt;/strong&gt;이니 말 다했다.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;안본 사이 노드 버전의 격차가 너무 벌어져서 생각없이 업데이트를 때렸다가는 &lt;code class=&quot;language-text&quot;&gt;node-sass&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;node-gyp&lt;/code&gt;같이 예민한 아이들이 피토를 하뿜뿜! 뿜어내며 퇴근을 방해한다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/common/node-gyp-error.png&quot; alt=&quot;흔한 에러&quot;&gt;&lt;/p&gt;
&lt;p&gt;그러므로 Node의 버전을 올릴때 또는 오래된 노드 프로젝트와 새로 만든 노드 프로젝트를 유연하게 빌드 할수 있을려면&lt;/p&gt;
&lt;p&gt;노드 버전을 명령어를 통해 바꿀 수 있어야한다.&lt;/p&gt;
&lt;p&gt;이와 같은 라이브러리론 &lt;a href=&quot;https://github.com/tj/n&quot;&gt;N&lt;/a&gt;과 &lt;a href=&quot;https://github.com/creationix/nvm&quot;&gt;NVM&lt;/a&gt;이 있다.&lt;/p&gt;
&lt;p&gt;윈도우라고 겁먹을 필요 없다. &lt;a href=&quot;https://github.com/coreybutler/nvm-windows&quot;&gt;NVM-Window&lt;/a&gt;도 있다.&lt;/p&gt;
&lt;p&gt;어떻게 쓰는지는 따로 포스팅하지 않겠다. 깃허브에 설명이 너무 잘 되어있으니&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;npm install&lt;/code&gt;을 휘갈길때 나는 에러는 내 경험상 노드의 버전이 안맞아서 나는 경우가 450%였다.&lt;/p&gt;
&lt;p&gt;사실 버전 관리에 대한건 아무 생각이 없었는데, 백엔드 개발자분이 pipenv, virtualenv, pyenv 등을 사용햐면서 유연하게 개발환경을 설정하는 것을 보고 알게되었다.&lt;/p&gt;
&lt;p&gt;좀 더 빨리 알았다면 좋았을텐데 :(&lt;/p&gt;
&lt;!--stackedit_data:
eyJoaXN0b3J5IjpbMTYzNzM3MDkxNSwtMTcwMDM2NjY2MCw2ND
Y3NjE5MjRdfQ==
--&gt;</content:encoded></item><item><title><![CDATA[간단한 메모장 만들기 정리]]></title><description><![CDATA[부족하지만 저의 첫 강좌?인 간단한 메모장 만들기를 소개합니다. POST 프로젝트 생성하기 페이지 프로토타이핑 가상데이터 적용해보기 파이어베이스 Auth 적용하기 파이어베이스 RealTime DB 사용하기 인피니티 스크롤 적용 LINK git demo]]></description><link>https://ddalpange.github.io/2018-02-26-project-make-simpe-memo-finall/</link><guid isPermaLink="false">https://ddalpange.github.io/2018-02-26-project-make-simpe-memo-finall/</guid><pubDate>Mon, 26 Feb 2018 15:37:14 GMT</pubDate><content:encoded>&lt;p&gt;부족하지만 저의 첫 강좌?인 간단한 메모장 만들기를 소개합니다.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h3&gt;POST&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;/2017/10/03/project-make-simple-memo-1&quot;&gt;프로젝트 생성하기&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/10/03/project-make-simple-memo-2&quot;&gt;페이지 프로토타이핑&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/10/03/project-make-simple-memo-3&quot;&gt;가상데이터 적용해보기&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/10/03/project-make-simple-memo-4&quot;&gt;파이어베이스 Auth 적용하기&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/10/03/project-make-simple-memo-5&quot;&gt;파이어베이스 RealTime DB 사용하기&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/10/03/project-make-simple-memo-6&quot;&gt;인피니티 스크롤 적용&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;LINK&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ddalpange/simple-memo&quot;&gt;git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://simple-memo-89b56.firebaseapp.com/&quot;&gt;demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!--stackedit_data:
eyJoaXN0b3J5IjpbMzYzMjk2NTU4XX0=
--&gt;</content:encoded></item><item><title><![CDATA[자바스크립트 3점 표기법]]></title><description><![CDATA[…]]></description><link>https://ddalpange.github.io/2018-01-11-js-es6-three-dots/</link><guid isPermaLink="false">https://ddalpange.github.io/2018-01-11-js-es6-three-dots/</guid><pubDate>Thu, 11 Jan 2018 14:21:32 GMT</pubDate><content:encoded>&lt;p&gt;자바스크립트는 빠른 버전업과 타입이 없는 동적 언어의 특성으로 다른 정적 언어에 비해 정해진게 많지 않고 새로운게 계속 나오기 떄문에 어려운 반면이 없지않아 있습니다. 다른 사람들의 소스코드를 읽을때마다 가끔씩 괴랄한 문법이 튀어나오는데 당황하지말고 정리해봅시다. 리액트를 쓰시다 보면 아래와 같이 수상한(?) 문법을 보셨을때가 있었을 겁니다.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;BlueButton&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; props &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		className&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
		name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;저장&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;token function-variable function&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
	
	&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; className&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;props &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		
		&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;btn btn-blueinfo &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;className&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token spread&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;		
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
	
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;사실 위의 &lt;strong&gt;…&lt;/strong&gt;  즉 Three dots 표기법은 ES6에서 제안된 문법인데요.
특성에 따라 ** Rest Operator**와 &lt;strong&gt;와 Spread Operator&lt;/strong&gt;로 나뉩니다. 한번 알아보도록 하죠&lt;/p&gt;
&lt;h3&gt;Rest Operator&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Rest Operator&lt;/strong&gt;를 알아보기 전에 리터럴 문법을 먼저 알아볼 필요가 있습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; object &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;a&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; c&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; object&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 1, 2&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; array &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;c&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; d&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; array&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;c&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 1, 2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위의 리터럴 문법대로 선언한다면 a,b와 c,d의값은 1, 2가 나올겁니다.&lt;/p&gt;
&lt;p&gt;하지만 프로퍼티가 많아져 점점 변수가 많아진다면 어떻게 해야할까요 ?&lt;/p&gt;
&lt;p&gt;a,b,c,d,e,f,g 기하급수적으로 늘어난다면 해당 값의 변수를 계속해서 선언해주기엔 무리가 따릅니다.&lt;/p&gt;
&lt;p&gt;그럴때 쓰는게 바로 &lt;strong&gt;Rest Operator&lt;/strong&gt;입니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; object &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;a&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; c&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;objRest&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; object&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; objRest&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 1, 2 { c: 3 }&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; array &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;c&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; d&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;arrayRest&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; array&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;c&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; arrayRest&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 1, 2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;앞에 &lt;strong&gt;…&lt;/strong&gt; 를 써주를 명시하면 배열이라면 나머지 원소들을 배열로 만들어 리턴하고,&lt;/p&gt;
&lt;p&gt;오브젝트라면 열거할수 있는 나머지 프로퍼티들을 묶어 오브젝트로 반환합니다.&lt;/p&gt;
&lt;h3&gt;Spread Operator&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Rest Operator&lt;/strong&gt;와 반대되는 의미라고 해석하면 될것같습니다.&lt;/p&gt;
&lt;p&gt;앞에 &lt;strong&gt;…&lt;/strong&gt; 를 써주을 명시하면 배열이라면 원소들을 나열하고,&lt;/p&gt;
&lt;p&gt;오브젝트라면 열거할수 있는 프로퍼티들을 나열합니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; aa &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;aa&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// [1, 2, 3, 1, 2, 3]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	defaultProps &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    props &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;token function-variable function&quot;&gt;setValue&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    	&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;defaultProps&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;	
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2018&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;오브젝트의 프로퍼티 나열할때 똑같은 프로퍼티가 있다면 뒤에 쓴걸로 덮어쓰기됩니다.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;여기서 의문!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;과연 Spread는 오브젝트를 딥카피할까요 ?&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; depth &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	value&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
	oneDepth&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		value&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
		twoDepth&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        	value&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;	
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; copiedDepth &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;depth &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
copiedDepth&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
copiedDepth&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;oneDepth&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;depth&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; depth&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;oneDepth&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;딥카피인지 스왈로카피일지, 아니면 단순 참조일지는 한번 실행해보세요 !&lt;/p&gt;
&lt;h3&gt;정리&lt;/h3&gt;
&lt;p&gt;이제 예제를 다 이해 하셨으면 처음의 문제로 돌아가보죠.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;BlueButton&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; props &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		className&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
		name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;저장&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;token function-variable function&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
	
	&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; className&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;props &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		
		&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;btn btn-blueinfo &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;className&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token spread&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;		
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
	
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위 코드는 &lt;strong&gt;Spread Operator&lt;/strong&gt;일까요 &lt;strong&gt;Rest Operator&lt;/strong&gt;일까요?&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; className&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;props &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;여기선 this.props에서 클래스네임을 따로 정의하고, 남은걸 props로 모았기 때문에 rest라 할 수 있습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;btn btn-info &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;className&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token spread&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;반대로 여기선 props의 남은 프로퍼티들을 열거했기 때문에 &lt;strong&gt;Sspread Operator&lt;/strong&gt;로 볼수 있겠죠 ?&lt;/p&gt;
&lt;p&gt;틀렸거나 궁금한점이 있다면 댓글 부탁드립니다.&lt;/p&gt;
&lt;!--stackedit_data:
eyJoaXN0b3J5IjpbLTEyMDk3MTQ4OTYsNDI0ODE1MzYzLC0xND
c4NTI2ODc0XX0=
--&gt;</content:encoded></item><item><title><![CDATA[리눅스 wget 명령어]]></title><description><![CDATA[설명 CUI환경에서 파일을 다운받을때 사용한다. 도움말 활용 예 영상 다운로드서버에 올라가있는 영상들이 정상적인지를 체크하기위해 한번씩 다운로드해준다. list.txt list…]]></description><link>https://ddalpange.github.io/2017-12-22-linux-wget/</link><guid isPermaLink="false">https://ddalpange.github.io/2017-12-22-linux-wget/</guid><pubDate>Fri, 22 Dec 2017 23:53:22 GMT</pubDate><content:encoded>&lt;h3&gt;설명&lt;/h3&gt;
&lt;p&gt;CUI환경에서 파일을 다운받을때 사용한다.&lt;/p&gt;
&lt;h3&gt;도움말&lt;/h3&gt;
&lt;!-- more --&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;wget&lt;/span&gt; -help

GNU Wget &lt;span class=&quot;token number&quot;&gt;1.17&lt;/span&gt;.1, a non-interactive network retriever.
Usage: &lt;span class=&quot;token function&quot;&gt;wget&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;OPTION&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;. &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;URL&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.

Mandatory arguments to long options are mandatory &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; short options too.

Startup:
  -V,  --version                   display the version of Wget and &lt;span class=&quot;token builtin class-name&quot;&gt;exit&lt;/span&gt;
  -h,  --help                      print this &lt;span class=&quot;token builtin class-name&quot;&gt;help&lt;/span&gt;
  -b,  --background                go to background after startup
  -e,  --execute&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;COMMAND           execute a `.wgetrc&lt;span class=&quot;token string&quot;&gt;&apos;-style command

Logging and input file:
  -o,  --output-file=FILE          log messages to FILE
  -a,  --append-output=FILE        append messages to FILE
  -d,  --debug                     print lots of debugging information
  -q,  --quiet                     quiet (no output)
  -v,  --verbose                   be verbose (this is the default)
  -nv, --no-verbose                turn off verboseness, without being quiet
       --report-speed=TYPE         output bandwidth as TYPE.  TYPE can be bits
  -i,  --input-file=FILE           download URLs found in local or external FILE
  -F,  --force-html                treat input file as HTML
  -B,  --base=URL                  resolves HTML input-file links (-i -F)
                                     relative to URL
       --config=FILE               specify config file to use
       --no-config                 do not read any config file
       --rejected-log=FILE         log reasons for URL rejection to FILE

Download:
  -t,  --tries=NUMBER              set number of retries to NUMBER (0 unlimits)
       --retry-connrefused         retry even if connection is refused
  -O,  --output-document=FILE      write documents to FILE
  -nc, --no-clobber                skip downloads that would download to
                                     existing files (overwriting them)
  -c,  --continue                  resume getting a partially-downloaded file
       --start-pos=OFFSET          start downloading from zero-based position OFFSET
       --progress=TYPE             select progress gauge type
       --show-progress             display the progress bar in any verbosity mode
  -N,  --timestamping              don&apos;&lt;/span&gt;t re-retrieve files unless newer than
                                     &lt;span class=&quot;token builtin class-name&quot;&gt;local&lt;/span&gt;
       --no-if-modified-since      don&lt;span class=&quot;token string&quot;&gt;&apos;t use conditional if-modified-since get
                                     requests in timestamping mode
       --no-use-server-timestamps  don&apos;&lt;/span&gt;t &lt;span class=&quot;token builtin class-name&quot;&gt;set&lt;/span&gt; the &lt;span class=&quot;token builtin class-name&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;s timestamp by
                                     the one on the server
  -S,  --server-response           print server response
       --spider                    don&apos;&lt;/span&gt;t download anything
  -T,  --timeout&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token environment constant&quot;&gt;SECONDS&lt;/span&gt;           &lt;span class=&quot;token builtin class-name&quot;&gt;set&lt;/span&gt; all &lt;span class=&quot;token function&quot;&gt;timeout&lt;/span&gt; values to &lt;span class=&quot;token environment constant&quot;&gt;SECONDS&lt;/span&gt;
       --dns-timeout&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;SECS          &lt;span class=&quot;token builtin class-name&quot;&gt;set&lt;/span&gt; the DNS lookup &lt;span class=&quot;token function&quot;&gt;timeout&lt;/span&gt; to SECS
       --connect-timeout&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;SECS      &lt;span class=&quot;token builtin class-name&quot;&gt;set&lt;/span&gt; the connect &lt;span class=&quot;token function&quot;&gt;timeout&lt;/span&gt; to SECS
       --read-timeout&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;SECS         &lt;span class=&quot;token builtin class-name&quot;&gt;set&lt;/span&gt; the &lt;span class=&quot;token builtin class-name&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;timeout&lt;/span&gt; to SECS
  -w,  --wait&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token environment constant&quot;&gt;SECONDS&lt;/span&gt;              &lt;span class=&quot;token function&quot;&gt;wait&lt;/span&gt; &lt;span class=&quot;token environment constant&quot;&gt;SECONDS&lt;/span&gt; between retrievals
       --waitretry&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token environment constant&quot;&gt;SECONDS&lt;/span&gt;         &lt;span class=&quot;token function&quot;&gt;wait&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;token environment constant&quot;&gt;SECONDS&lt;/span&gt; between retries of a retrieval
       --random-wait               &lt;span class=&quot;token function&quot;&gt;wait&lt;/span&gt; from &lt;span class=&quot;token number&quot;&gt;0.5&lt;/span&gt;*WAIT&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.1.5*WAIT secs between retrievals
       --no-proxy                  explicitly turn off proxy
  -Q,  --quota&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;NUMBER              &lt;span class=&quot;token builtin class-name&quot;&gt;set&lt;/span&gt; retrieval &lt;span class=&quot;token function&quot;&gt;quota&lt;/span&gt; to NUMBER
       --bind-address&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;ADDRESS      &lt;span class=&quot;token builtin class-name&quot;&gt;bind&lt;/span&gt; to ADDRESS &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;hostname or IP&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; on &lt;span class=&quot;token builtin class-name&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;host&lt;/span&gt;
       --limit-rate&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;RATE           limit download rate to RATE
       --no-dns-cache              disable caching DNS lookups
       --restrict-file-names&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;OS    restrict chars &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt; names to ones OS allows
       --ignore-case               ignore &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; when matching files/directories
  -4,  --inet4-only                connect only to IPv4 addresses
  -6,  --inet6-only                connect only to IPv6 addresses
       --prefer-family&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;FAMILY      connect first to addresses of specified family,
                                     one of IPv6, IPv4, or none
       --user&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token environment constant&quot;&gt;USER&lt;/span&gt;                 &lt;span class=&quot;token builtin class-name&quot;&gt;set&lt;/span&gt; both &lt;span class=&quot;token function&quot;&gt;ftp&lt;/span&gt; and http user to &lt;span class=&quot;token environment constant&quot;&gt;USER&lt;/span&gt;
       --password&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;PASS             &lt;span class=&quot;token builtin class-name&quot;&gt;set&lt;/span&gt; both &lt;span class=&quot;token function&quot;&gt;ftp&lt;/span&gt; and http password to PASS
       --ask-password              prompt &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; passwords
       --no-iri                    turn off IRI support
       --local-encoding&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;ENC        use ENC as the &lt;span class=&quot;token builtin class-name&quot;&gt;local&lt;/span&gt; encoding &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; IRIs
       --remote-encoding&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;ENC       use ENC as the default remote encoding
       --unlink                    remove &lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt; before clobber

Directories:
  -nd, --no-directories            don&lt;span class=&quot;token string&quot;&gt;&apos;t create directories
  -x,  --force-directories         force creation of directories
  -nH, --no-host-directories       don&apos;&lt;/span&gt;t create &lt;span class=&quot;token function&quot;&gt;host&lt;/span&gt; directories
       --protocol-directories      use protocol name &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; directories
  -P,  --directory-prefix&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;PREFIX   save files to PREFIX/&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;
       --cut-dirs&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;NUMBER           ignore NUMBER remote directory components

HTTP options:
       --http-user&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token environment constant&quot;&gt;USER&lt;/span&gt;            &lt;span class=&quot;token builtin class-name&quot;&gt;set&lt;/span&gt; http user to &lt;span class=&quot;token environment constant&quot;&gt;USER&lt;/span&gt;
       --http-password&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;PASS        &lt;span class=&quot;token builtin class-name&quot;&gt;set&lt;/span&gt; http password to PASS
       --no-cache                  disallow server-cached data
       --default-page&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;NAME         change the default page name &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;normally
                                     this is &lt;span class=&quot;token string&quot;&gt;&apos;index.html&apos;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  -E,  --adjust-extension          save HTML/CSS documents with proper extensions
       --ignore-length             ignore &lt;span class=&quot;token string&quot;&gt;&apos;Content-Length&apos;&lt;/span&gt; header field
       --header&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;STRING             insert STRING among the headers
       --max-redirect              maximum redirections allowed per page
       --proxy-user&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token environment constant&quot;&gt;USER&lt;/span&gt;           &lt;span class=&quot;token builtin class-name&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;token environment constant&quot;&gt;USER&lt;/span&gt; as proxy username
       --proxy-password&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;PASS       &lt;span class=&quot;token builtin class-name&quot;&gt;set&lt;/span&gt; PASS as proxy password
       --referer&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;URL               include &lt;span class=&quot;token string&quot;&gt;&apos;Referer: URL&apos;&lt;/span&gt; header &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; HTTP request
       --save-headers              save the HTTP headers to &lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt;
  -U,  --user-agent&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;AGENT          identify as AGENT instead of Wget/VERSION
       --no-http-keep-alive        disable HTTP keep-alive &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;persistent connections&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
       --no-cookies                don&lt;span class=&quot;token string&quot;&gt;&apos;t use cookies
       --load-cookies=FILE         load cookies from FILE before session
       --save-cookies=FILE         save cookies to FILE after session
       --keep-session-cookies      load and save session (non-permanent) cookies
       --post-data=STRING          use the POST method; send STRING as the data
       --post-file=FILE            use the POST method; send contents of FILE
       --method=HTTPMethod         use method &quot;HTTPMethod&quot; in the request
       --body-data=STRING          send STRING as data. --method MUST be set
       --body-file=FILE            send contents of FILE. --method MUST be set
       --content-disposition       honor the Content-Disposition header when
                                     choosing local file names (EXPERIMENTAL)
       --content-on-error          output the received content on server errors
       --auth-no-challenge         send Basic HTTP authentication information
                                     without first waiting for the server&apos;&lt;/span&gt;s
                                     challenge

HTTPS &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;SSL/TLS&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; options:
       --secure-protocol&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;PR        choose secure protocol, one of auto, SSLv2,
                                     SSLv3, TLSv1 and PFS
       --https-only                only follow secure HTTPS links
       --no-check-certificate      don&lt;span class=&quot;token string&quot;&gt;&apos;t validate the server&apos;&lt;/span&gt;s certificate
       --certificate&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;FILE          client certificate &lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt;
       --certificate-type&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;TYPE     client certificate type, PEM or DER
       --private-key&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;FILE          private key &lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt;
       --private-key-type&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;TYPE     private key type, PEM or DER
       --ca-certificate&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;FILE       &lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt; with the bundle of CAs
       --ca-directory&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;DIR          directory where &lt;span class=&quot;token builtin class-name&quot;&gt;hash&lt;/span&gt; list of CAs is stored
       --crl-file&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;FILE             &lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt; with bundle of CRLs
       --random-file&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;FILE          &lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt; with random data &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; seeding the SSL PRNG
       --egd-file&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;FILE             &lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt; naming the EGD socket with random data

HSTS options:
       --no-hsts                   disable HSTS
       --hsts-file                 path of HSTS database &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;will override default&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

FTP options:
       --ftp-user&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token environment constant&quot;&gt;USER&lt;/span&gt;             &lt;span class=&quot;token builtin class-name&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;ftp&lt;/span&gt; user to &lt;span class=&quot;token environment constant&quot;&gt;USER&lt;/span&gt;
       --ftp-password&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;PASS         &lt;span class=&quot;token builtin class-name&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;ftp&lt;/span&gt; password to PASS
       --no-remove-listing         don&lt;span class=&quot;token string&quot;&gt;&apos;t remove &apos;&lt;/span&gt;.listing&lt;span class=&quot;token string&quot;&gt;&apos; files
       --no-glob                   turn off FTP file name globbing
       --no-passive-ftp            disable the &quot;passive&quot; transfer mode
       --preserve-permissions      preserve remote file permissions
       --retr-symlinks             when recursing, get linked-to files (not dir)

FTPS options:
       --ftps-implicit                 use implicit FTPS (default port is 990)
       --ftps-resume-ssl               resume the SSL/TLS session started in the control connection when
                                         opening a data connection
       --ftps-clear-data-connection    cipher the control channel only; all the data will be in plaintext
       --ftps-fallback-to-ftp          fall back to FTP if FTPS is not supported in the target server
WARC options:
       --warc-file=FILENAME        save request/response data to a .warc.gz file
       --warc-header=STRING        insert STRING into the warcinfo record
       --warc-max-size=NUMBER      set maximum size of WARC files to NUMBER
       --warc-cdx                  write CDX index files
       --warc-dedup=FILENAME       do not store records listed in this CDX file
       --no-warc-compression       do not compress WARC files with GZIP
       --no-warc-digests           do not calculate SHA1 digests
       --no-warc-keep-log          do not store the log file in a WARC record
       --warc-tempdir=DIRECTORY    location for temporary files created by the
                                     WARC writer

Recursive download:
  -r,  --recursive                 specify recursive download
  -l,  --level=NUMBER              maximum recursion depth (inf or 0 for infinite)
       --delete-after              delete files locally after downloading them
  -k,  --convert-links             make links in downloaded HTML or CSS point to
                                     local files
       --convert-file-only         convert the file part of the URLs only (usually known as the basename)
       --backups=N                 before writing file X, rotate up to N backup files
  -K,  --backup-converted          before converting file X, back up as X.orig
  -m,  --mirror                    shortcut for -N -r -l inf --no-remove-listing
  -p,  --page-requisites           get all images, etc. needed to display HTML page
       --strict-comments           turn on strict (SGML) handling of HTML comments

Recursive accept/reject:
  -A,  --accept=LIST               comma-separated list of accepted extensions
  -R,  --reject=LIST               comma-separated list of rejected extensions
       --accept-regex=REGEX        regex matching accepted URLs
       --reject-regex=REGEX        regex matching rejected URLs
       --regex-type=TYPE           regex type (posix|pcre)
  -D,  --domains=LIST              comma-separated list of accepted domains
       --exclude-domains=LIST      comma-separated list of rejected domains
       --follow-ftp                follow FTP links from HTML documents
       --follow-tags=LIST          comma-separated list of followed HTML tags
       --ignore-tags=LIST          comma-separated list of ignored HTML tags
  -H,  --span-hosts                go to foreign hosts when recursive
  -L,  --relative                  follow relative links only
  -I,  --include-directories=LIST  list of allowed directories
       --trust-server-names        use the name specified by the redirection
                                     URL&apos;&lt;/span&gt;s last component
  -X,  --exclude-directories&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;LIST  list of excluded directories
  -np, --no-parent                 don&apos;t ascend to the parent directory

Mail bug reports and suggestions to &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;bug-wget@gnu.org&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;활용 예&lt;/h3&gt;
&lt;p&gt;영상 다운로드서버에 올라가있는 영상들이 정상적인지를 체크하기위해 한번씩 다운로드해준다.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;list.txt&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt; http://111.111.11.1/assets/prod/1629/ORIGINAL/1629_1504176178478.ts
 http://111.111.11.1/assets/prod/1630/ORIGINAL/1630_1504176206826.ts
 http://1111.111.11.1/assets/prod/1672/ORIGINAL/1672_1505466475322.ts
 엄청많아 100개가 넘어 ..&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sh&quot;&gt;&lt;pre class=&quot;language-sh&quot;&gt;&lt;code class=&quot;language-sh&quot;&gt;$ wget -i list.txt -o log --no-verbose&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;list에 써져있는 파일들을 차례대로 다운로드한 후 로그를 남긴다(성공여부만 필요)&lt;/p&gt;
&lt;p&gt;-i 인풋
-o 아웃풋
—no-verbose 다 남길 필요없다.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;log&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;2017-12-22 17:17:53 URL:http://111.111.11.1/assets/prod/1629/ORIGINAL/1629_1504176178478.ts [16958540/16958540] -&gt; &quot;1629_1504176178478.ts.2&quot; [1]
2017-12-22 17:17:56 URL:http://111.111.11.1/assets/prod/1630/ORIGINAL/1630_1504176206826.ts [32955836/32955836] -&gt; &quot;1630_1504176206826.ts.2&quot; [1]
2017-12-22 17:17:59 URL:http://111.111.11.1/assets/prod/1672/ORIGINAL/1672_1505466475322.ts [32954520/32954520] -&gt; &quot;1672_1505466475322.ts.2&quot; [1]
2017-12-22 17:18:03 URL:http://111.111.11.1/assets/uplus-assets/prod/1686/ORIGINAL/1686_1505969267788.ts [32950572/32950572] -&gt; &quot;1686_1505969267788.ts.2&quot; [1]
http://111.111.11.1/assets/prod/1692/ORIGINAL/1692_1506023232326203376.ts:
2017-12-22 17:18:03 ERROR 404: Not Found.
FINISHED --2017-12-22 17:18:03--
Total wall clock time: 12s
Downloaded: 4 files, 110M in 11s (9.61 MB/s)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;없으면 저렇게 404 Not Found 뜬다.&lt;/p&gt;
&lt;p&gt;20개정도 브라우저에 입력하다가 빡쳐서 찾았다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[자바스크립트 코딩 인터뷰 정리]]></title><description><![CDATA[자바스크립트 sort 메소드  답은 틀렸다. **[1, 3, 20]**이 아닌 **[1, 20, 3]**이라는 결과값이 나온다.
자바스크립트의 sort메소드는 배열을 순회할 떄 배열요소의 String…]]></description><link>https://ddalpange.github.io/2017-10-26-js-interview-example/</link><guid isPermaLink="false">https://ddalpange.github.io/2017-10-26-js-interview-example/</guid><pubDate>Thu, 26 Oct 2017 23:53:22 GMT</pubDate><content:encoded>&lt;h3&gt;자바스크립트 sort 메소드&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; array &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
array &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; array&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;array&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;위의 코드가 프로그래머가 원하는 결과값을 가져올것이라 생각하는가?&lt;/code&gt;&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;답은 틀렸다. **[1, 3, 20]**이 아닌 **[1, 20, 3]**이라는 결과값이 나온다.
자바스크립트의 sort메소드는 배열을 순회할 떄 배열요소의 &lt;strong&gt;String&lt;/strong&gt; 으로 바꾸기 떄문이다.
위의 코드를 정상적으로 작동하도록 바꾸려면 아래와 같이 코드를 작성해야한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; array &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
array &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; array&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;array&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;자바스크립트 async 테스트&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;답은 &lt;strong&gt;0, 2, 3, 1&lt;/strong&gt;이 아니라 &lt;strong&gt;0, 3, 2, 1&lt;/strong&gt;의 순서로 찍힌다.
자바스크립트는 기본적으로 &lt;strong&gt;비동기&lt;/strong&gt;로 작성이 되는데 setTimeout의 시간을 0으로 준다 하더라도 처리하는 시간이 발생하여 코드 아랫 라인이 같이 실행되기 때문이다.&lt;/p&gt;
&lt;h3&gt;변수 호이스팅&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;abc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;abc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;가장 큰 충격을 받았던 문제이다.
당연히 함수 abc의 a가 undefined이기 때문에 외부 스코프에 있는 a를 참조하여  &lt;strong&gt;0, 0&lt;/strong&gt;이라는 결과값이 나올줄 알았는데 abc()안의 if문 안에서 &lt;strong&gt;var&lt;/strong&gt;키워드로 선언되어있는 지역변수 a가 undefined로 올라가기 때문에 따로 if분기를 타지 않고 &lt;strong&gt;undefined&lt;/strong&gt;결과값을 뱉어낸다.
당연히 a가 undefined니 스코프체인을 타서 바깥 a를 찾을줄 알았는데 해당 함수 스코프에서 끝나버리니 당황했다.&lt;/p&gt;
&lt;p&gt;정리를 해보니 쉬우면서도 틀린문제들이 많다.
다 안다고 생각하는 것이 제일 무섭다. 열심히 공부하자.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[자바스크립트 객체 복사하기]]></title><description><![CDATA[시작하기 전에 A코드 B코드 A코드와 B…]]></description><link>https://ddalpange.github.io/2017-10-10-js-clone-object/</link><guid isPermaLink="false">https://ddalpange.github.io/2017-10-10-js-clone-object/</guid><pubDate>Tue, 10 Oct 2017 16:26:05 GMT</pubDate><content:encoded>&lt;h4&gt;시작하기 전에&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;A코드&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;B코드&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; p &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
b&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;p &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;p&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;p&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A코드와 B코드 두가지의 코드가 있다.
두 코드 모두 &lt;code class=&quot;language-text&quot;&gt;b에 a를 대입하였다.&lt;/code&gt;라고 생각하는가?
혹은
두 코드 모두 &lt;code class=&quot;language-text&quot;&gt;b에 a를 복사하였다&lt;/code&gt;라고 생각하는가?&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;결론부터 말하자면 &lt;strong&gt;틀렸다&lt;/strong&gt;.
자바스크립트는 불변형의 데이터를 선언할 때 포인터와 값 모두 생성하지만,
오브젝트(배열)을 생성할 때에는 메모리 절약을 위해 포인터만 새로 할당할 뿐이다.&lt;/p&gt;
&lt;p&gt;즉 A코드에서는 &lt;code class=&quot;language-text&quot;&gt;b에 a를 복사하였다.&lt;/code&gt;가 맞는것이고
B코드에서는 &lt;code class=&quot;language-text&quot;&gt;b에 a를 대입하였다.&lt;/code&gt;가 맞는 해석이 된다.
이제 B코드에서 &lt;code class=&quot;language-text&quot;&gt;b에 a를 복사하였다&lt;/code&gt;가 성립하도록 해보자.&lt;/p&gt;
&lt;h4&gt;1. &lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/assign&quot;&gt;Object.assign()&lt;/a&gt;을 이용&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;cloneObject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;assign&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; obj&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Object.assign&lt;/strong&gt;은 첫번째 인자로 들어오는 객체에 두번째 인자로 들어오는 객체의 프로퍼티들을 차례대로 덮어쓰기하여 반환하는 메소드이다.
여기서 주의할 점은 &lt;strong&gt;Object.assign&lt;/strong&gt;은 프로퍼티들에 대한 참조를 덮어쓰기하기 때문에, 오브젝트 안에 오브젝트 또는 배열이 있을 경우 복사가 아닌 참조를 하게된다.
즉 객체를 &lt;code class=&quot;language-text&quot;&gt;얕은 복사(Shallow Copy)&lt;/code&gt;한다.&lt;/p&gt;
&lt;h4&gt;2. JSON 객체의 메소드를 이용&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;cloneObject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;obj&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;JSON.stringify&lt;/strong&gt;는 자바스크립트 오브젝트를 스트링 포멧으로 변환하는 메소드이다.
&lt;strong&gt;JSON.parse&lt;/strong&gt;는 스트링 포멧을 자바스크립트 오브젝트로 변환하는 메소드이다.&lt;/p&gt;
&lt;p&gt;스트링으로 변환하였다가 다시 오브젝트로 변환하기 때문에 이전 객체에 대한 참조가 없어지지만 JSON 메소드 자체가 성능면에서 다른 방법에 비해 굉장히 느리기 때문에 주의해야한다.
이 방법은 객체를 &lt;code class=&quot;language-text&quot;&gt;깊은 복사(Deep Copy)&lt;/code&gt;한다.&lt;/p&gt;
&lt;h4&gt;3. 자바스크립트 재귀 사용&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;cloneObject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; clone &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; i &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; obj&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;obj&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;object&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; obj&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            clone&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;cloneObject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;obj&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;
            clone&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; obj&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; clone&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;오브젝트의 프로퍼티들을 순회하여 빈 오브젝트에 더한다. 그 과정에서 원본 오브젝트의 프로퍼티가 오브젝트일 경우 재귀적으로 함수를 실행한다.
이 방법은 객체를 &lt;code class=&quot;language-text&quot;&gt;깊은 복사(Deep Copy)&lt;/code&gt;한다.&lt;/p&gt;
&lt;h4&gt;4. &lt;a href=&quot;https://facebook.github.io/immutable-js/&quot;&gt;Immutable.js&lt;/a&gt; 사용&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; Map &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;immutable&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; map &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;a &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; newMap &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; map&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
newMap&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;a&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;map&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;a&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;newMap&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;a&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;페이스북에서 만든 오픈소스 라이브러리이다.
Immutable을 쓰게된다면 Array, Map 모두 이뮤터블하게 쓸 수 있게된다.
객체의 내부 값을 변경해도 원본 객체의 값은 변화하지 않고 새로운 객체를 배출한다는 뜻이다.
사용법이 비교적 간편하지만 처음 보는 사람일 경우 적응하는데 어려움이 있을 수 있다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;여담이지만 이 라이브러리를 사용할 때 로그를 찍을려면 &lt;strong&gt;toJS&lt;/strong&gt;메소드를 사용하여 순수 자바스크립트 객체로 변환해야하는데 매번 까먹어서 불편했다 :(&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;정리하며&lt;/h4&gt;
&lt;p&gt;사실 유지보수나 신규개발을 하면서 객체의 딥카피가 필요한 경우는 많이 없었다.
대부분 스왈로카피로 해결할 수 있으며 딥카피는 피하는것이 더 빠르고 직관적이기 때문이다.&lt;/p&gt;
&lt;p&gt;주의할 점은 단순히 &lt;code class=&quot;language-text&quot;&gt;=&lt;/code&gt;를 통해 변수를 대입하는것과  &lt;code class=&quot;language-text&quot;&gt;얕은 복사&lt;/code&gt;는 엄연히 다르다는 것이다.
&lt;code class=&quot;language-text&quot;&gt;=&lt;/code&gt;와 &lt;code class=&quot;language-text&quot;&gt;얕은 복사&lt;/code&gt;와 &lt;code class=&quot;language-text&quot;&gt;깊은 복사&lt;/code&gt;의 차이만 알아가도 성공한것이 아닐까 ?
이것을 모르는 개발자들이 적지 않아서 조금 놀랐다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[자바스크립트 오브젝트 배열 중복 삭제하기]]></title><description><![CDATA[React, Vue, Angular 등 프론트엔드 프레임웍을 쓰면 Data에 따라 UI…]]></description><link>https://ddalpange.github.io/2017-10-10-js-not-duplicated-object-array/</link><guid isPermaLink="false">https://ddalpange.github.io/2017-10-10-js-not-duplicated-object-array/</guid><pubDate>Tue, 10 Oct 2017 15:10:12 GMT</pubDate><content:encoded>&lt;p&gt;React, Vue, Angular 등 프론트엔드 프레임웍을 쓰면 Data에 따라 UI가 그려지기 때문에 어느정도 앱이 완성궤도에 올라오면 비지니스 로직 핸들링과 돔에 대한 퍼포먼스를 개선하는 성능최적화 작업이 대부분이다.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;가상 돔을 쓰는 프레임웍이면 데이터의 흐름 및 변화에 따라 자동으로 렌더링을 돌기 때문에 구조를 왠만큼 꼬거나 뎁스가 3~4뎁스를 넘기는게 아니라면 쾌적한 성능을 보장한다.&lt;/p&gt;
&lt;p&gt;비지니스 로직데이터를 핸들링하는 일을 개선하다보면 필히 오브젝트 배열의 특정 키값을 기준으로 중복을 제거해야할 일이 생기는데 그에 대한 방법을 포스팅해본다.&lt;/p&gt;
&lt;h3&gt;언더스코어의 uniq 메소드를 이용하는 방법&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;name&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Amir&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;surname&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Rahnama&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;name&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Amir&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;surname&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Stevens&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; non_duplidated_data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; _&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;uniq&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;name&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;http://underscorejs.org/&quot;&gt;언더스코어&lt;/a&gt;를 사용한다면 위와 같이 구현할 수 있다.&lt;/p&gt;
&lt;p&gt;개인적으로 언더스코어 라이브러리를 사용해 본적이 없고, 구현하는데 시간이 많이 걸리는 코드가 아닌 이상 라이브러리를 사용하지 않는 편이기 때문에 사용한 적이 없는 방법이다.&lt;/p&gt;
&lt;h3&gt;ES6 문법 사용&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getUniqueObjectArray&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;array&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; key&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; array&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;item&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; i&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; array&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;findIndex&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;item2&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; j&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; item&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;key &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; item2&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;코드가 단순하고 쉬우며 직관적이지만 &lt;strong&gt;ES6&lt;/strong&gt;에서 지원하는 메소드이기 때문에 바벨로 트랜스파일을 해야하며, 경우에 따라 익스플로러를 지원해야할 경우 폴리필을 적용해야한다.&lt;/p&gt;
&lt;p&gt;프로젝트의 환경에 따라 위의 코드를 적용할지 말지 결정해야한다.&lt;/p&gt;
&lt;h3&gt;ES5 문법 사용&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getUniqueObjectArray&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;array&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; key&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; tempArray &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; resultArray &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; array&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; item &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; array&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;temArray&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;item&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      resultArray&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;item&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      tempArray&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;item&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; resultArray&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;가장 단순한 방법이다. 양이 제법 길긴 하지만 해당 펑션을 처음 보더라도 코드의 가독성이 어렵지 않은 편이기에 충분히 이해할수 있다.
ES6를 사용하지 않았기 때문에 비교적 크로스 브라우징 문제에 안전하다고 볼 수 있다 :)&lt;/p&gt;
&lt;h3&gt;정리하며&lt;/h3&gt;
&lt;p&gt;위의 나온 세 방법만이 정답은 아니다.
문법적으로 또는 이론적으로 이해가 어려운 방법들은 제외했으며 &lt;strong&gt;JSON.stringify&lt;/strong&gt;같은 메소드가 들어가는 방법은 성능에 좋지 않을것 같아 마찬가지로 제외하였다.
스택오버플로를 찾아보면 굉장히 다양한 방법이 있다. 참고하여 자신만의 메소드를 만들면 좋을것 같다.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;참고문서&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/36032179/remove-duplicates-in-an-object-array-javascript&quot;&gt;https://stackoverflow.com/questions/36032179/remove-duplicates-in-an-object-array-javascript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/2218999/remove-duplicates-from-an-array-of-objects-in-javascript&quot;&gt;https://stackoverflow.com/questions/2218999/remove-duplicates-from-an-array-of-objects-in-javascript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!--stackedit_data:
eyJoaXN0b3J5IjpbLTk5MDUzMTU1LC0xMDkzMDI3Mjg2LDE5OT
YxNTE4NzRdfQ==
--&gt;</content:encoded></item><item><title><![CDATA[헥소 블로그 삽질]]></title><description><![CDATA[블로그 배포에 문제가 있었다. 한글 제목의 포스팅이 윈도우에서 빌드 및 배포했을 때는 잘 되지만 맥에서 빌드 및 배포를 했을 때 404 에러가 뜨기 시작했다. 원인을 찾아보니 윈도우에서 배포를 했을때는 URL…]]></description><link>https://ddalpange.github.io/2017-10-03-make-new-blog/</link><guid isPermaLink="false">https://ddalpange.github.io/2017-10-03-make-new-blog/</guid><pubDate>Tue, 03 Oct 2017 23:39:41 GMT</pubDate><content:encoded>&lt;p&gt;블로그 배포에 문제가 있었다. 한글 제목의 포스팅이 윈도우에서 빌드 및 배포했을 때는 잘 되지만 맥에서 빌드 및 배포를 했을 때 404 에러가 뜨기 시작했다.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;원인을 찾아보니 윈도우에서 배포를 했을때는 URL에서 한글 인코딩이 정상적으로 작동하지만
맥에서 배포를 하니 한글 인코딩이 제대로 이루어지지 않고 있었다.&lt;/p&gt;
&lt;p&gt;이 말이 무엇이냐 함은
&lt;strong&gt;안녕하세요 김요한입니다.&lt;/strong&gt;
라는 문자를 접근할려면 URL에서는 한글 부분만 인코딩을 하게된다. 즉 결과값은 아래와 같이 되는것이다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;%EC%95%88%EB%85%95%ED%95%98%EC%84%B8%EC%9A%94+%EA%B9%80%EC%9A%94%ED%95%9C%EC%9E%85%EB%8B%88%EB%8B%A4.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;윈도우에서 배포를 했을 때 포스트 링크를 클릭하면 정상적으로 한글을 인코딩한다.
반면에 맥에서 배포를 했을 때는 아래와 같이 작동한다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;del&gt;&lt;strong&gt;SOME-POST-LINK/안녕하세요-김요한입니다.&lt;/strong&gt;&lt;/del&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;del&gt;즉 인코딩을 하지 않고 URL을 접근한다는 뜻이다.&lt;/del&gt;
정정한다.
맥(unix)계열의 한글 인코딩과 URL 한글 인코딩 방식이 틀리기 때문에 발생하는 문제이다.&lt;/p&gt;
&lt;p&gt;여러 방면으로 검색을 해보았으나 해결하지 못하였다.
어쩔수 없이 포스트의 파일명을 전부 영어로 변경하는 수 밖에 없었다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/hexo/filename-before.png&quot; alt=&quot;before&quot;&gt;
&lt;img src=&quot;/images/hexo/filename-after.png&quot; alt=&quot;after&quot;&gt;&lt;/p&gt;
&lt;p&gt;-&gt; &lt;em&gt;헥소에서 URL은 파일명을 따라가고 제목은 title을 따라간다.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;기분도 전환할 겸 테마도 새로 바꾸었으니 새로운 마음으로 포스트를 시작해야겠다 :)&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;참고문서&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.partialrecall.net/2015/10/11/hexo-blog-deploy/&quot;&gt;http://www.partialrecall.net/2015/10/11/hexo-blog-deploy/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.convertstring.com/ko/EncodeDecode/UrlEncode&quot;&gt;http://www.convertstring.com/ko/EncodeDecode/UrlEncode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[간단한 메모장 만들기 6 - 무한 스크롤 적용]]></title><description><![CDATA[이번시간에는 아이오닉에서 제공해주는 무한 스크롤(infinite scroll)을 적용해볼거에요!! 테스트 환경 작성 테스트케이스 작성을 위해서 아래 코드를 메모리스트 페이지의 ngOnInit…]]></description><link>https://ddalpange.github.io/2017-10-03-project-make-simple-memo-6/</link><guid isPermaLink="false">https://ddalpange.github.io/2017-10-03-project-make-simple-memo-6/</guid><pubDate>Tue, 03 Oct 2017 22:49:05 GMT</pubDate><content:encoded>&lt;p&gt;이번시간에는 아이오닉에서 제공해주는 무한 스크롤(infinite scroll)을 적용해볼거에요!!&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h3&gt;테스트 환경 작성&lt;/h3&gt;
&lt;p&gt;테스트케이스 작성을 위해서 아래 코드를 &lt;strong&gt;메모리스트&lt;/strong&gt; 페이지의 &lt;strong&gt;ngOnInit&lt;/strong&gt; 생명주기 메서드의 아래의 코드를 작성한 후 새로고침해주세요.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;memoManager&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createMemo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;제목&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;내용&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;toString&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;5000개가 넘어가면 메모리스트 페이지가 많이 느려지는걸 볼 수 있습니다.
텍스트만 있어도 느린데 이미지가 있는 페이지라면 어느정도일지 짐작이 되시겠죠?&lt;/p&gt;
&lt;h3&gt;코드 작성&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;htmlsrc/pages/memo-list/memo-list/html&quot;&gt;&lt;pre class=&quot;language-htmlsrc/pages/memo-list/memo-list/html&quot;&gt;&lt;code class=&quot;language-htmlsrc/pages/memo-list/memo-list/html&quot;&gt;&amp;lt;ion-header&amp;gt;
  &amp;lt;ion-navbar color=&amp;quot;primary&amp;quot;&amp;gt;
    &amp;lt;ion-searchbar [(ngModel)]=&amp;quot;searchKeyword&amp;quot;&amp;gt;&amp;lt;/ion-searchbar&amp;gt;
    &amp;lt;ion-buttons end&amp;gt;
      &amp;lt;button ion-button icon-only (click)=&amp;quot;onClickMoreOption()&amp;quot;&amp;gt;
        &amp;lt;ion-icon name=&amp;quot;more&amp;quot;&amp;gt;
        &amp;lt;/ion-icon&amp;gt;
      &amp;lt;/button&amp;gt;
    &amp;lt;/ion-buttons&amp;gt;
  &amp;lt;/ion-navbar&amp;gt;
&amp;lt;/ion-header&amp;gt;
&amp;lt;ion-content&amp;gt;
  &amp;lt;ng-template ngFor let-memo [ngForOf]=&amp;quot;memoList | async | slice : 0 : viewCount&amp;quot; let-i=&amp;quot;index&amp;quot;&amp;gt;
    &amp;lt;ion-card (click)=&amp;quot;onClickViewMemoDetail(memo)&amp;quot; *ngIf=&amp;quot;filterMemo(memo)&amp;quot;&amp;gt;
      &amp;lt;ion-card-header&amp;gt;
        {{ memo.title }}
      &amp;lt;/ion-card-header&amp;gt;
      &amp;lt;ion-card-content&amp;gt;
        {{ memo.contents }}
      &amp;lt;/ion-card-content&amp;gt;
    &amp;lt;/ion-card&amp;gt;
  &amp;lt;/ng-template&amp;gt;
  &amp;lt;ion-infinite-scroll (ionInfinite)=&amp;quot;doInfinite($event)&amp;quot;&amp;gt;
    &amp;lt;ion-infinite-scroll-content
      loadingSpinner=&amp;quot;bubbles&amp;quot;
      loadingText=&amp;quot;please waite...&amp;quot;
    &amp;gt;&amp;lt;/ion-infinite-scroll-content&amp;gt;
  &amp;lt;/ion-infinite-scroll&amp;gt;
  &amp;lt;ion-fab right bottom&amp;gt;
    &amp;lt;button ion-fab icon-only (click)=&amp;quot;onClickCreateMemo()&amp;quot;&amp;gt;
      &amp;lt;ion-icon name=&amp;quot;add&amp;quot; big&amp;gt;&amp;lt;/ion-icon&amp;gt;
    &amp;lt;/button&amp;gt;
  &amp;lt;/ion-fab&amp;gt;
&amp;lt;/ion-content&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;전체 코드입니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;ng-template&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;ngFor&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;let-memo&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;[ngForOf]&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;memoList | async | slice : 0 : viewCount&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;let-i&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;index&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  ...
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;ng-template&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;ion-infinite-scroll&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;(ionInfinite)&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;doInfinite($event)&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  ...
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;ion-infinite-scroll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;ionInfinite&lt;/strong&gt;에 주목하세요. ion-infinite-scroll 태그가 화면상에 보일경우 등록해놓은 &lt;strong&gt;doInfinite&lt;/strong&gt; 함수를 호출합니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescriptsrc/pages/memo-list/memo-list/ts&quot;&gt;&lt;pre class=&quot;language-typescriptsrc/pages/memo-list/memo-list/ts&quot;&gt;&lt;code class=&quot;language-typescriptsrc/pages/memo-list/memo-list/ts&quot;&gt;import { AuthManagerProvider } from &amp;#39;./../../providers/auth-manager/auth-manager&amp;#39;;
import { FirebaseListObservable } from &amp;#39;angularfire2/database&amp;#39;;
import { Memo } from &amp;#39;./../../models/memo/memo.interface&amp;#39;;
import { Component, OnInit } from &amp;#39;@angular/core&amp;#39;;
import { IonicPage, NavController, NavParams, LoadingController, ActionSheetController } from &amp;#39;ionic-angular&amp;#39;;

import { MemoCreatePage } from &amp;#39;./../memo-create/memo-create&amp;#39;;
import { MemoDetailPage } from &amp;#39;./../memo-detail/memo-detail&amp;#39;;

import { MemoManagerProvider } from &amp;#39;./../../providers/memo-manager/memo-manager&amp;#39;;
@IonicPage()

@Component({
  selector: &amp;#39;page-memo-list&amp;#39;,
  templateUrl: &amp;#39;memo-list.html&amp;#39;,
})

export class MemoListPage {

  searchKeyword: string = &amp;#39;&amp;#39;;
  viewCount: number = 10;
  memoList: FirebaseListObservable&amp;lt;Memo&amp;gt;;

  constructor(
    public navCtrl: NavController,
    public navParams: NavParams,
    public loadingCtrl: LoadingController,
    public actionSheetCtrl: ActionSheetController,
    public authManager: AuthManagerProvider,
    public memoManager: MemoManagerProvider) {
  }
 
  ngOnInit() {
    this.memoList = this.memoManager.getMemoList();
  }

  doInfinite(infiniteScroll: any) {
    window.setTimeout(() =&amp;gt; {
      this.viewCount += this.viewCount;
      infiniteScroll.complete();
    }, 500);
  }

  filterMemo(memo: Memo): boolean {
    return memo.title.includes(this.searchKeyword) || memo.title.includes(this.searchKeyword);
  }

  onClickViewMemoDetail(memo: Memo) {
    this.navCtrl.push(MemoDetailPage, { memo: memo });
  }
  
  onClickCreateMemo() {
    this.navCtrl.push(MemoCreatePage);
  }

  onClickMoreOption() {
    const actionSheet = this.getMoreOptionActionSheet();
    actionSheet.present();
  }

  getMoreOptionActionSheet() {
    return this.actionSheetCtrl.create({
      buttons: [
        {
          text: &amp;#39;Logout&amp;#39;,
          role: &amp;#39;destructive&amp;#39;,
          handler: () =&amp;gt; {
            this.authManager.logoutUser();
          }
        }, {
          text: &amp;#39;Cancel&amp;#39;,
          role: &amp;#39;cancel&amp;#39;
        }
      ]
    });
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;별거없죠? slice할 viewCount를 증가시켜주고, infiniteScroll 이벤트를 종료합니다.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;참고 링크&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ddalpange/simple-memo&quot;&gt;해당 포스트에 작성된 모든 코드는 여기에 있습니다!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://memo-28314.firebaseapp.com&quot;&gt;해당 프로젝트는 여기서 볼 수 있습니다 !!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[간단한 메모장 만들기 5 - CRUD]]></title><description><![CDATA[이번 시간에는 메모리스트를 파이어베이스의 데이터베이스를 사용하여 를 해볼게요. 이나 에서 기능 개선을 위해 변경한 코드가 일부 있으니, 감안하여 봐주세요. CRUD CRUD는 대부분의 컴퓨터 소프트웨어가 가지는 기본적인 데이터 처리 기능인 Create…]]></description><link>https://ddalpange.github.io/2017-10-03-project-make-simple-memo-5/</link><guid isPermaLink="false">https://ddalpange.github.io/2017-10-03-project-make-simple-memo-5/</guid><pubDate>Tue, 03 Oct 2017 22:49:02 GMT</pubDate><content:encoded>&lt;p&gt;이번 시간에는 메모리스트를 파이어베이스의 데이터베이스를 사용하여 &lt;code class=&quot;language-text&quot;&gt;CRUD&lt;/code&gt;를 해볼게요. &lt;code class=&quot;language-text&quot;&gt;html&lt;/code&gt;이나 &lt;code class=&quot;language-text&quot;&gt;ts&lt;/code&gt;에서 기능 개선을 위해 변경한 코드가 일부 있으니, 감안하여 봐주세요.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;&lt;strong&gt;CRUD&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;CRUD는 대부분의 컴퓨터 소프트웨어가 가지는 기본적인 데이터 처리 기능인 Create(생성), Read(읽기), Update(갱신), Delete(삭제)를 묶어서 일컫는 말이다. 사용자 인터페이스가 갖추어야 할 기능(정보의 참조/검색/갱신)을 가리키는 용어로서도 사용된다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Real Time Database&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Firebase 실시간 데이터베이스는 클라우드 호스팅 데이터베이스입니다. &lt;strong&gt;데이터는 JSON으로 저장되며 연결된 모든 클라이언트에 실시간으로 동기화됩니다.&lt;/strong&gt; iOS, Android 및 자바스크립트 SDK로 교차 플랫폼 앱을 개발하면 모든 클라이언트가 하나의 실시간 데이터베이스 인스턴스를 공유하고 자동 업데이트로 최신 데이터를 수신합니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;인터페이스 변경하여 적용하기.&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescriptsrc/models/memo/memo.interface.ts&quot;&gt;&lt;pre class=&quot;language-typescriptsrc/models/memo/memo.interface.ts&quot;&gt;&lt;code class=&quot;language-typescriptsrc/models/memo/memo.interface.ts&quot;&gt;export interface Memo {
    uid: string;                    // 유저넘버
    author: string;                 // 작성자
    title: string;                  // 제목
    contents: string;               // 본문
    publishedDate: Date;           // 작성일
    recentUpdatedDate: Date;      // 최근 수정일
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;key&lt;/strong&gt;가 사라지고 &lt;strong&gt;uid&lt;/strong&gt;가 추가되었습니다.&lt;/p&gt;
&lt;h3&gt;메모매니저 파이어베이스 연동&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescriptsrc/providers/memo-manager/memo-manager.ts&quot;&gt;&lt;pre class=&quot;language-typescriptsrc/providers/memo-manager/memo-manager.ts&quot;&gt;&lt;code class=&quot;language-typescriptsrc/providers/memo-manager/memo-manager.ts&quot;&gt;import { AuthManagerProvider } from &amp;#39;./../auth-manager/auth-manager&amp;#39;;
import { Memo } from &amp;#39;./../../models/memo/memo.interface&amp;#39;;
import { Injectable } from &amp;#39;@angular/core&amp;#39;;
import { Http } from &amp;#39;@angular/http&amp;#39;;
import { AngularFireDatabase, FirebaseListObservable } from &amp;#39;angularfire2/database&amp;#39;;

/*
  Generated class for the MemoManagerProvider provider.

  See https://angular.io/docs/ts/latest/guide/dependency-injection.html
  for more info on providers and Angular DI.
*/
@Injectable()
export class MemoManagerProvider {

  memoList: FirebaseListObservable&amp;lt;any&amp;gt;

  constructor(
    public http: Http,
    public afDB: AngularFireDatabase,
    public authManager: AuthManagerProvider
  ) {
    this.initMemoList();
  }

  initMemoList() {
    this.memoList = this.afDB.list(`/memoList/${this.authManager.getUserInfo().uid}`);
  }

  getMemoList(): FirebaseListObservable&amp;lt;Memo&amp;gt; {
    return this.memoList;
  }

  createMemo(title: string, contents: string) {

    let memo: Memo = {
      uid: this.authManager.getUserInfo().uid,
      title: title,
      contents: contents,
      author: this.authManager.getUserInfo().email,
      publishedDate: new Date(),
      recentUpdatedDate: new Date(),
    }

    this.memoList.push(memo);
  }

  deleteMemo(deleteMemo: any) {
    this.memoList.remove(deleteMemo);
  }

  editMemo(memoToChange: Memo, title: string, contents: string) {
    memoToChange.title = title;
    memoToChange.contents = contents;
    memoToChange.recentUpdatedDate = new Date();
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;변경 및 생성을 하면 자동으로 &lt;strong&gt;Observable&lt;/strong&gt;이 구독하여 변경사항이 반영됩니다.&lt;/p&gt;
&lt;h3&gt;메모리스트페이지에 반영하기&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;htmlsrc/pages/memo-list/memo-list.html&quot;&gt;&lt;pre class=&quot;language-htmlsrc/pages/memo-list/memo-list.html&quot;&gt;&lt;code class=&quot;language-htmlsrc/pages/memo-list/memo-list.html&quot;&gt;&amp;lt;ion-header&amp;gt;
  &amp;lt;ion-navbar color=&amp;quot;primary&amp;quot;&amp;gt;
    &amp;lt;ion-searchbar [(ngModel)]=&amp;quot;searchKeyword&amp;quot;&amp;gt;&amp;lt;/ion-searchbar&amp;gt;
    &amp;lt;ion-buttons end&amp;gt;
      &amp;lt;button ion-button icon-only (click)=&amp;quot;onClickMoreOption()&amp;quot;&amp;gt;
        &amp;lt;ion-icon name=&amp;quot;more&amp;quot;&amp;gt;
        &amp;lt;/ion-icon&amp;gt;
      &amp;lt;/button&amp;gt;
    &amp;lt;/ion-buttons&amp;gt;
  &amp;lt;/ion-navbar&amp;gt;
&amp;lt;/ion-header&amp;gt;
&amp;lt;ion-content&amp;gt;
  &amp;lt;ng-template ngFor let-memo [ngForOf]=&amp;quot;memoList | async&amp;quot; let-i=&amp;quot;index&amp;quot;&amp;gt;
    &amp;lt;ion-card (click)=&amp;quot;onClickViewMemoDetail(memo)&amp;quot; *ngIf=&amp;quot;filterMemo(memo)&amp;quot;&amp;gt;
      &amp;lt;ion-card-header&amp;gt;
        {{ memo.title }}
      &amp;lt;/ion-card-header&amp;gt;
      &amp;lt;ion-card-content&amp;gt;
        {{ memo.contents }}
      &amp;lt;/ion-card-content&amp;gt;
    &amp;lt;/ion-card&amp;gt;
  &amp;lt;/ng-template&amp;gt;
  &amp;lt;ion-fab right bottom&amp;gt;
    &amp;lt;button ion-fab icon-only (click)=&amp;quot;onClickCreateMemo()&amp;quot;&amp;gt;
      &amp;lt;ion-icon name=&amp;quot;add&amp;quot; big&amp;gt;&amp;lt;/ion-icon&amp;gt;
    &amp;lt;/button&amp;gt;
  &amp;lt;/ion-fab&amp;gt;
&amp;lt;/ion-content&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescriptsrc/pages/memo-list/memo-list.ts&quot;&gt;&lt;pre class=&quot;language-typescriptsrc/pages/memo-list/memo-list.ts&quot;&gt;&lt;code class=&quot;language-typescriptsrc/pages/memo-list/memo-list.ts&quot;&gt;import { AuthManagerProvider } from &amp;#39;./../../providers/auth-manager/auth-manager&amp;#39;;
import { FirebaseListObservable } from &amp;#39;angularfire2/database&amp;#39;;
import { Memo } from &amp;#39;./../../models/memo/memo.interface&amp;#39;;
import { Component, OnInit } from &amp;#39;@angular/core&amp;#39;;
import { IonicPage, NavController, NavParams, LoadingController, ActionSheetController } from &amp;#39;ionic-angular&amp;#39;;

import { MemoCreatePage } from &amp;#39;./../memo-create/memo-create&amp;#39;;
import { MemoDetailPage } from &amp;#39;./../memo-detail/memo-detail&amp;#39;;

import { MemoManagerProvider } from &amp;#39;./../../providers/memo-manager/memo-manager&amp;#39;;
@IonicPage()

@Component({
  selector: &amp;#39;page-memo-list&amp;#39;,
  templateUrl: &amp;#39;memo-list.html&amp;#39;,
})

export class MemoListPage {

  searchKeyword: string = &amp;#39;&amp;#39;;
  memoList: FirebaseListObservable&amp;lt;Memo&amp;gt;;

  constructor(
    public navCtrl: NavController,
    public navParams: NavParams,
    public loadingCtrl: LoadingController,
    public actionSheetCtrl: ActionSheetController,
    public authManager: AuthManagerProvider,
    public memoManager: MemoManagerProvider) {
  }
 
  ngOnInit() {
    this.memoList = this.memoManager.getMemoList();
  }

  filterMemo(memo: Memo): boolean {
    return memo.title.includes(this.searchKeyword) || memo.title.includes(this.searchKeyword);
  }

  onClickViewMemoDetail(memo: Memo) {
    this.navCtrl.push(MemoDetailPage, { memo: memo });
  }
  
  onClickCreateMemo() {
    this.navCtrl.push(MemoCreatePage);
  }

  onClickMoreOption() {
    const actionSheet = this.getMoreOptionActionSheet();
    actionSheet.present();
  }

  getMoreOptionActionSheet() {
    return this.actionSheetCtrl.create({
      buttons: [
        {
          text: &amp;#39;Logout&amp;#39;,
          role: &amp;#39;destructive&amp;#39;,
          handler: () =&amp;gt; {
            this.authManager.logoutUser();
          }
        }, {
          text: &amp;#39;Cancel&amp;#39;,
          role: &amp;#39;cancel&amp;#39;
        }
      ]
    });
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;그 외 html 변경사항들입니다.&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;htmlsrc/pages/memo-detail/memo-detail.html&quot;&gt;&lt;pre class=&quot;language-htmlsrc/pages/memo-detail/memo-detail.html&quot;&gt;&lt;code class=&quot;language-htmlsrc/pages/memo-detail/memo-detail.html&quot;&gt;&amp;lt;ion-header&amp;gt;
  &amp;lt;ion-navbar&amp;gt;
    &amp;lt;ion-buttons end&amp;gt;
      &amp;lt;button ion-button icon-only (click)=&amp;quot;onDeleteMemo(memo)&amp;quot;&amp;gt;
        &amp;lt;ion-icon name=&amp;quot;trash&amp;quot;&amp;gt;&amp;lt;/ion-icon&amp;gt;
      &amp;lt;/button&amp;gt;
      &amp;lt;button ion-button icon-only&amp;gt;
        &amp;lt;ion-icon name=&amp;quot;more&amp;quot;&amp;gt;&amp;lt;/ion-icon&amp;gt;
      &amp;lt;/button&amp;gt;
    &amp;lt;/ion-buttons&amp;gt;
  &amp;lt;/ion-navbar&amp;gt;
&amp;lt;/ion-header&amp;gt;
&amp;lt;ion-content&amp;gt;
  &amp;lt;ion-card (click)=&amp;quot;onOpenEditMemo(memo)&amp;quot;&amp;gt;
    &amp;lt;ion-card-header&amp;gt;
      &amp;lt;h1&amp;gt;{{ memo.title }}&amp;lt;/h1&amp;gt;
    &amp;lt;/ion-card-header&amp;gt;
    &amp;lt;ion-card-content&amp;gt;
      &amp;lt;p&amp;gt;
        {{ memo.contents }}
      &amp;lt;/p&amp;gt;
      &amp;lt;div class=&amp;quot;etc&amp;quot;&amp;gt;
        &amp;lt;p&amp;gt;
          &amp;lt;span&amp;gt;저자&amp;lt;/span&amp;gt; 
          {{ memo.author }}
        &amp;lt;/p&amp;gt;
        &amp;lt;p&amp;gt;
          &amp;lt;span&amp;gt;발행일&amp;lt;/span&amp;gt;
          {{ memo.publishedDate }}
        &amp;lt;/p&amp;gt;
        &amp;lt;p&amp;gt;
          &amp;lt;span&amp;gt;최근 수정일&amp;lt;/span&amp;gt;
           {{ memo.recentUpdatedDate }}
        &amp;lt;/p&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/ion-card-content&amp;gt;
  &amp;lt;/ion-card&amp;gt;
&amp;lt;/ion-content&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;htmlsrc/pages/memo-detail/memo-detail.html&quot;&gt;&lt;pre class=&quot;language-htmlsrc/pages/memo-detail/memo-detail.html&quot;&gt;&lt;code class=&quot;language-htmlsrc/pages/memo-detail/memo-detail.html&quot;&gt;&amp;lt;ion-header&amp;gt;
  &amp;lt;ion-navbar color=&amp;quot;secondary&amp;quot;&amp;gt;
  &amp;lt;/ion-navbar&amp;gt;
&amp;lt;/ion-header&amp;gt;
&amp;lt;ion-content&amp;gt;
  &amp;lt;ion-list&amp;gt;
    &amp;lt;ion-item&amp;gt;
      &amp;lt;ion-label floating&amp;gt;제목을 입력해주세요.&amp;lt;/ion-label&amp;gt;
      &amp;lt;ion-input type=&amp;quot;text&amp;quot; [(ngModel)]=&amp;quot;title&amp;quot;&amp;gt;&amp;lt;/ion-input&amp;gt;
    &amp;lt;/ion-item&amp;gt;
    &amp;lt;ion-item&amp;gt;
      &amp;lt;ion-label floating&amp;gt;내용을 입력해주세요.&amp;lt;/ion-label&amp;gt;
      &amp;lt;ion-textarea rows=&amp;quot;18&amp;quot; type=&amp;quot;text&amp;quot; [(ngModel)]=&amp;quot;contents&amp;quot;&amp;gt;&amp;lt;/ion-textarea&amp;gt;
    &amp;lt;/ion-item&amp;gt;
  &amp;lt;/ion-list&amp;gt;
  &amp;lt;ion-fab right bottom&amp;gt;
    &amp;lt;button ion-fab icon-only color=&amp;quot;secondary&amp;quot; (click)=&amp;quot;onSaveMemo()&amp;quot;&amp;gt;&amp;lt;ion-icon name=&amp;quot;checkmark&amp;quot;&amp;gt;&amp;lt;/ion-icon&amp;gt;&amp;lt;/button&amp;gt;
  &amp;lt;/ion-fab&amp;gt;
&amp;lt;/ion-content&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr&gt;
&lt;p&gt;참고 링크&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ddalpange/simple-memo&quot;&gt;해당 포스트에 작성된 모든 코드는 여기에 있습니다!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://memo-28314.firebaseapp.com&quot;&gt;해당 프로젝트는 여기서 볼 수 있습니다 !!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[간단한 메모장 만들기 4 - Auth]]></title><description><![CDATA[이번시간에는 파이어베이스를 이용한 로그인 연동, 회원가입, 로그아웃을 해보겠습니다. https://console.firebase.google.com…]]></description><link>https://ddalpange.github.io/2017-10-03-project-make-simple-memo-4/</link><guid isPermaLink="false">https://ddalpange.github.io/2017-10-03-project-make-simple-memo-4/</guid><pubDate>Tue, 03 Oct 2017 22:49:00 GMT</pubDate><content:encoded>&lt;p&gt;이번시간에는 파이어베이스를 이용한 로그인 연동, 회원가입, 로그아웃을 해보겠습니다.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;&lt;a href=&quot;https://console.firebase.google.com&quot;&gt;https://console.firebase.google.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/firebaseConsole.png&quot; alt=&quot;프로젝트 추가 버튼을 클릭하세요&quot;&gt;&lt;/p&gt;
&lt;p&gt;해당 프로젝트로 들어가시면 정 가운데 세번째 버튼에 &lt;strong&gt;웹 앱으로 배포하기&lt;/strong&gt;라는 버튼이 있을겁니다. 클릭해주세요.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;https://www.gstatic.com/firebasejs/4.1.3/firebase.js&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;span class=&quot;token language-javascript&quot;&gt;
  &lt;span class=&quot;token comment&quot;&gt;// Initialize Firebase&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; config &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    apiKey&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;YOUR_API_KEY&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    authDomain&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;YOUR_PROJECT_NAME-YOUR_PROJCET_NUMBER.firebaseapp.com&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    databaseURL&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;https://YOUR_PROJECT_NAME-YOUR_PROJCET_NUMBER.firebaseio.com&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    projectId&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;YOUR_PROJECT_NAME-YOUR_PROJCET_NUMBER&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    storageBucket&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;YOUR_PROJECT_NAME-YOUR_PROJCET_NUMBER.appspot.com&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    messagingSenderId&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;12345678&quot;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  firebase&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;initializeApp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;config&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;config 변수 부분을 복사해주세요 딴건 필요없답니다.&lt;/p&gt;
&lt;h3&gt;아이오닉 프로젝트에 추가하기&lt;/h3&gt;
&lt;p&gt;Ionic에서 지원하는 파이어베이스 패키지들을 인스톨하여주세요.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; --save angularfire2 firebase&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;그 다음에 루트 모듈 ( 보통은 app.module.ts )에 파이어베이스 모듈을 추가할게요.&lt;/p&gt;
&lt;p&gt;변경 후&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; AngularFireModule &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;angularfire2&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 파이어베이스 루트 모듈입니다.&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; AngularFireDatabaseModule &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;angularfire2/database&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 파이어베이스 데이터베이스 모듈입니다.&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; AngularFireAuthModule &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;angularfire2/auth&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 파이버베이스 인증 모듈입니다.&lt;/span&gt;

&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// 방금 복사했던 config를 가져오시면 됩니다.&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; firebaseConfig &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  apiKey&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;YOUR_API_KEY&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  authDomain&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;YOUR_PROJECT_NAME-YOUR_PROJCET_NUMBER.firebaseapp.com&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  databaseURL&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;https://YOUR_PROJECT_NAME-YOUR_PROJCET_NUMBER.firebaseio.com&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  projectId&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;YOUR_PROJECT_NAME-YOUR_PROJCET_NUMBER&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  storageBucket&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;YOUR_PROJECT_NAME-YOUR_PROJCET_NUMBER.appspot.com&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  messagingSenderId&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;12345678&quot;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;


&lt;span class=&quot;token decorator&quot;&gt;&lt;span class=&quot;token at operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;NgModule&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  declarations&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;AppComponent&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  imports&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
    BrowserModule&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    HttpModule&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    TranslateModule&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forRoot&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      loader&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        provide&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; TranslateLoader&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        useFactory&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; HttpLoaderFactory&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        deps&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Http&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    IonicModule&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forRoot&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;AppComponent&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      preloadModules&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    IonicStorageModule&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forRoot&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 설정파일을 인자로 넘겨주어 앱을 초기화합니다.&lt;/span&gt;
    AngularFireModule&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;initializeApp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;firebaseConfig&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    AngularFireDatabaseModule&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    AngularFireAuthModule&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  entryComponents&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;AppComponent&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  bootstrap&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;IonicApp&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  providers&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;AppModule&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;로그인 서비스 활성화시키기&lt;/h3&gt;
&lt;p&gt;파이어베이스에 들어가신 후&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Authentication&lt;/strong&gt; -&gt; &lt;strong&gt;로그인 방법&lt;/strong&gt;을 클릭하신 후&lt;/p&gt;
&lt;p&gt;이메일 로그인 방식과 페이스북 로그인 방식을 활성화해주세요&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/memo/auth-open.png&quot; alt=&quot;인증서비스&quot;&gt;&lt;/p&gt;
&lt;h3&gt;인증 서비스파일 만들기.&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ionic g provider auth-manager&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;src/pages/memo-manager/memo-manager.ts&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; Injectable &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;@angular/core&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; Http &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;@angular/http&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; AngularFireAuth &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;angularfire2/auth&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; Observable &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;rxjs/Observable&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; firebase &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;firebase/app&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;rxjs/add/operator/map&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token decorator&quot;&gt;&lt;span class=&quot;token at operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Injectable&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;AuthManagerProvider&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

  userInfo&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; firebase&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;User &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  authState&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Observable&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;firebase&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;User&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; http&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Http&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; afAuth&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; AngularFireAuth&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;initAuth&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;initAuth&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;authState &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;afAuth&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;authState&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;authState&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;user&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; firebase&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;User&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;user&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setUserInfo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;user&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setUserInfo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;getAuthState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Observable&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;firebase&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;User&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;authState&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;getUserInfo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;userInfo&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;setUserInfo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;userInfo&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; firebase&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;User&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;userInfo &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; userInfo&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;loginUser&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;email&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; password&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;afAuth&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;auth&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;signInWithEmailAndPassword&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;email&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; password&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;signUpUser&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;email&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; password&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;afAuth&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;auth&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createUserWithEmailAndPassword&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;email&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; password&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;resetPassword&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;email&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;afAuth&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;auth&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sendPasswordResetEmail&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;email&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;logoutUser&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;afAuth&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;auth&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;signOut&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;로그인상태 여부에따라 최초 로딩페이지 바꿔주기&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;src/app/app/component.ts&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; Component &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;@angular/core&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; Platform &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;ionic-angular&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; StatusBar &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;@ionic-native/status-bar&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; SplashScreen &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;@ionic-native/splash-screen&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; AuthManagerProvider &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./../providers/auth-manager/auth-manager&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; SignInPage &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./../pages/sign-in/sign-in&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; MemoListPage &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./../pages/memo-list/memo-list&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token decorator&quot;&gt;&lt;span class=&quot;token at operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Component&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  templateUrl&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;app.html&apos;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MyApp&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  rootPage&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    platform&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Platform&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 
    statusBar&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; StatusBar&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 
    splashScreen&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; SplashScreen&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    authManager&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; AuthManagerProvider&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    platform&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ready&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;// Okay, so the platform is ready and our plugins are available.&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;// Here you can do any higher level native things you might need.&lt;/span&gt;
      statusBar&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;styleDefault&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      splashScreen&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;hide&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    authManager&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getAuthState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;user &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;user&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;rootPage &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; MemoListPage&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; 
        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;rootPage &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; SignInPage&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;  
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이제 &lt;strong&gt;로그인&lt;/strong&gt;, &lt;strong&gt;회원가입&lt;/strong&gt;, &lt;strong&gt;로그아웃만 구현하면 됩니다.&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;회원가입 페이지&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;src/pages/sign-up/sign-up.module.ts&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; NgModule &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;@angular/core&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; IonicPageModule &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;ionic-angular&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; SignUpPage &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./sign-up&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; FormsModule &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;@angular/forms&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token decorator&quot;&gt;&lt;span class=&quot;token at operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;NgModule&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  declarations&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
    SignUpPage&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  imports&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
    IonicPageModule&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forChild&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;SignUpPage&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    FormsModule
  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  exports&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
    SignUpPage
  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SignUpPageModule&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;src/pages/sign-up/sign-up.ts&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; Component &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;@angular/core&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; IonicPage&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; NavController&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; NavParams &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;ionic-angular&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; AuthManagerProvider &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;../../providers/auth-manager/auth-manager&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; LoadingController&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; AlertController &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;ionic-angular&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token decorator&quot;&gt;&lt;span class=&quot;token at operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;IonicPage&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token decorator&quot;&gt;&lt;span class=&quot;token at operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Component&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  selector&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;page-sign-up&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  templateUrl&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;sign-up.html&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SignUpPage&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

  emailAddress&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  password&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; navCtrl&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; NavController&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; navParams&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; NavParams&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; authManager&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; AuthManagerProvider&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; loadingCtrl&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; LoadingController&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; alertCtrl&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; AlertController&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;token function&quot;&gt;onClickDDalpange&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;location&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;href &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;https://ddalpange.github.io&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;token function&quot;&gt;onClickSignUp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; loader &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;loadingCtrl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      content&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;회원가입 중입니다 ..&apos;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    loader&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;present&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;authManager&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;signUpUser&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;emailAddress&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;password&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;user &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token builtin&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;성공!&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; user&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      loader&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;dismiss&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; alert &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getSuccessAlert&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      alert&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;present&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; 
      loader&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;dismiss&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; alert &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getFailAlert&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      alert&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;present&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;getSuccessAlert&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;alertCtrl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;success!!&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      subTitle&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;회원가입에 성공하였습니다.&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      buttons&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        text&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;확인&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;getFailAlert&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;message&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;alertCtrl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;failed..&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      subTitle&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; message&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      buttons&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        text&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;확인&apos;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;token function&quot;&gt;onClickNavBack&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;navCtrl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;src/pages/sign-up/sign-up.html&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;ion-content&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
   &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;image-wrap&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;img&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;/images/gyul.png&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; 
      &lt;span class=&quot;token attr-name&quot;&gt;(click)&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;onClickDDalpange()&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;달팽이의 메모 앱&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;ion-list&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
      &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;ion-item&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;ion-input&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;email&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;placeholder&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;이메일&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;[(ngModel)]&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;emailAddress&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;(keyup.enter)&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;onClickSignUp()&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;ion-input&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
      &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;ion-item&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
      &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;ion-item&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;ion-input&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;password&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;placeholder&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;비밀번호&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;[(ngModel)]&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;password&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;(keyup.enter)&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;onClickSignUp()&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;ion-input&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
      &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;ion-item&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;ion-list&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;ion-button&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;block&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;light&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;(click)&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;onClickSignUp()&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;가입하기&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;ion-button&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;block&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;danger&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;(click)&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;onClickNavBack()&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;뒤로가기&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;ion-content&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;로그인 페이지&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;src/pages/sign-in/sign-in.module.ts&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; FormsModule &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;@angular/forms&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; NgModule &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;@angular/core&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; IonicPageModule &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;ionic-angular&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; SignInPage &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./sign-in&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token decorator&quot;&gt;&lt;span class=&quot;token at operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;NgModule&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  declarations&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
    SignInPage&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  imports&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
    IonicPageModule&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forChild&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;SignInPage&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    FormsModule
    
  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  exports&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
    SignInPage
  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SignInPageModule&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;src/pages/sign-in/sign-in.ts&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; Component &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;@angular/core&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; IonicPage&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; NavController&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; NavParams&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; AlertController&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; LoadingController &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;ionic-angular&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; SignUpPage &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./../sign-up/sign-up&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; MemoListPage &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./../memo-list/memo-list&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; AuthManagerProvider &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;../../providers/auth-manager/auth-manager&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token decorator&quot;&gt;&lt;span class=&quot;token at operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;IonicPage&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token decorator&quot;&gt;&lt;span class=&quot;token at operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Component&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  selector&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;page-sign-in&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  templateUrl&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;sign-in.html&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SignInPage&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  
  emailAddress&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  password&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; navCtrl&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; NavController&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; navParams&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; NavParams&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; alertCtrl&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; AlertController&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; loadingCtrl&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; LoadingController&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; authManager&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; AuthManagerProvider
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;onClickDDalpange&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;location&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;href &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;https://ddalpange.github.io&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;onClickEmailLogIn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; loader &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;loadingCtrl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      content&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;로그인 중입니다 ..&apos;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    loader&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;present&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;authManager&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;loginUser&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;emailAddress&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;password&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;user &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token builtin&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;성공!&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; user&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      loader&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;dismiss&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;navCtrl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setRoot&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;MemoListPage&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; 
      &lt;span class=&quot;token builtin&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;실패!&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      loader&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;dismiss&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; alert &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getFailAlert&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      alert&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;present&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;onClickFacebookLogin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; alert &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getFailAlert&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;미완성 기능입니다.&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    alert&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;present&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;getFailAlert&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;message&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;alertCtrl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;failed..&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      subTitle&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; message&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      buttons&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        text&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;확인&apos;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;onClickSignUp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;navCtrl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;SignUpPage&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;src/pages/sign-in/sign-in.html&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;ion-content&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;image-wrap&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;img&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;/images/gyul.png&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; 
      &lt;span class=&quot;token attr-name&quot;&gt;(click)&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;onClickDDalpange()&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;달팽이의 메모 앱&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;ion-list&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
      &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;ion-item&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;ion-input&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;email&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;placeholder&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;이메일&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;[(ngModel)]&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;emailAddress&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;(keyup.enter)&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;onClickEmailLogIn()&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;ion-input&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
      &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;ion-item&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
      &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;ion-item&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;ion-input&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;password&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;placeholder&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;비밀번호&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;[(ngModel)]&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;password&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;(keyup.enter)&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;onClickEmailLogIn()&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;ion-input&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
      &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;ion-item&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;ion-list&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;ion-button&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;block&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;light&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;(click)&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;onClickEmailLogIn()&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;이메일 로그인&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;ion-button&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;block&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;primary&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;(click)&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;onClickFacebookLogin()&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;페이스북 로그인&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;sign-up-text&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;(click)&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;onClickSignUp()&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;계정이 없으신가요?&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;ion-content&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;로그아웃 기능(리스트 페이지)&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;src/pages/memo-list/memo-list.module.ts&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; FormsModule &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;@angular/forms&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; NgModule &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;@angular/core&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; IonicPageModule &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;ionic-angular&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; MemoListPage &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./memo-list&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token decorator&quot;&gt;&lt;span class=&quot;token at operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;NgModule&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  declarations&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
    MemoListPage&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  imports&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
    IonicPageModule&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forChild&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;MemoListPage&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    FormsModule
  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  exports&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
    MemoListPage
  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MemoListPageModule&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;src/pages/memo-list/memo-list.ts&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; AuthManagerProvider &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./../../providers/auth-manager/auth-manager&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; FirebaseListObservable &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;angularfire2/database&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; Memo &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./../../models/memo/memo.interface&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; Component&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; OnInit &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;@angular/core&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; IonicPage&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; NavController&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; NavParams&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; LoadingController&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ActionSheetController &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;ionic-angular&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; MemoCreatePage &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./../memo-create/memo-create&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; MemoDetailPage &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./../memo-detail/memo-detail&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; MemoManagerProvider &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./../../providers/memo-manager/memo-manager&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token decorator&quot;&gt;&lt;span class=&quot;token at operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;IonicPage&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token decorator&quot;&gt;&lt;span class=&quot;token at operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Component&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  selector&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;page-memo-list&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  templateUrl&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;memo-list.html&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MemoListPage&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

  searchKeyword&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  memoList&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Memo &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; navCtrl&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; NavController&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; navParams&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; NavParams&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; loadingCtrl&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; LoadingController&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; actionSheetCtrl&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; ActionSheetController&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; authManager&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; AuthManagerProvider&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; memoManager&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; MemoManagerProvider&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
 
  &lt;span class=&quot;token function&quot;&gt;ngOnInit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;memoList &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;memoManager&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getMemoList&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;filterMemo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;memo&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Memo&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; memo&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;title&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;includes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;searchKeyword&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; memo&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;title&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;includes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;searchKeyword&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;onClickViewMemoDetail&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;memo&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Memo&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;navCtrl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;MemoDetailPage&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; memo&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; memo &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;token function&quot;&gt;onClickCreateMemo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;navCtrl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;MemoCreatePage&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;onClickMoreOption&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; actionSheet &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;actionSheetCtrl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      buttons&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          text&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Logout&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          role&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;destructive&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token function-variable function&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;authManager&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;logoutUser&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          text&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Cancel&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          role&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;cancel&apos;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    actionSheet&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;present&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;src/pages/memo-list/memo-list.html&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;ion-header&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;ion-navbar&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;primary&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;ion-searchbar&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;[(ngModel)]&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;searchKeyword&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;ion-searchbar&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;ion-buttons&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
      &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;ion-button&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;icon-only&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;(click)&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;onClickMoreOption()&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;ion-icon&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;more&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;ion-icon&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
      &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;ion-buttons&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;ion-navbar&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;ion-header&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- 콘텐츠 내용... --&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;로그인, 로그아웃, 회원가입 총 3가지 기능을 완성하였습니다.&lt;/p&gt;
&lt;p&gt;다음 포스트 에서는 파이어베이스의 리얼타임 데이터베이스를 이용해 데이터를 관리해볼게요!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;참고 링크&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ddalpange/simple-memo&quot;&gt;해당 포스트에 작성된 모든 코드는 여기에 있습니다!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://memo-28314.firebaseapp.com&quot;&gt;해당 프로젝트는 여기서 볼 수 있습니다 !!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[간단한 메모장 만들기 3 - 목데이터 사용]]></title><description><![CDATA[이번 시간에서는 목 객체와 Angular2의 서비스(보통 아이오닉에선 provider 라고 명칭합니다.)를 이용해서 메모가 어떻게 만들어지고, 수정되고, 삭제되는지 알아볼겁니다. 틀리거나 안되는것이 있다면 바로바로 댓글로 달아주세요! mock…]]></description><link>https://ddalpange.github.io/2017-10-03-project-make-simple-memo-3/</link><guid isPermaLink="false">https://ddalpange.github.io/2017-10-03-project-make-simple-memo-3/</guid><pubDate>Tue, 03 Oct 2017 22:48:57 GMT</pubDate><content:encoded>&lt;p&gt;이번 시간에서는 목 객체와 Angular2의 서비스(보통 아이오닉에선 provider 라고 명칭합니다.)를 이용해서 메모가 어떻게 만들어지고, 수정되고, 삭제되는지 알아볼겁니다. 틀리거나 안되는것이 있다면 바로바로 댓글로 달아주세요!&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;&lt;strong&gt;mock objects?&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;목 객체는 실제 객체의 동작을 흉내내는 시뮬레이션 객체입니다. 보통 프론트단에서 api와의 의존성을 없애고 테스트를 쉽게 하기 위해 하드코딩된 데이터들을 mock data라고 칭합니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;service?&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;서비스는 애플리케이션 전반에 걸쳐 코드를 구성하고 공유하는 데 사용되며, 일반적으로 데이터 액세스 방법을 생성하는 곳이기도 합니다. 즉 재사용성이 높은 코드들을 모아놓은 것이며, Angular2에서 기본으로 제공해주는 패턴중의 하나입니다. 서비스를 이해할려면 DI(Dependency Injection)을 이해해야하는데, 포스트가 너무 길어지니 다음에 하죠.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;메모 인터페이스 정의하기&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;src&lt;/strong&gt;폴더에서 &lt;strong&gt;models&lt;/strong&gt;, &lt;strong&gt;memo&lt;/strong&gt; 폴더를 차례대로 만들어 주신 후 그 안에 &lt;strong&gt;memo.interface.ts&lt;/strong&gt;파일을 만들어주세요&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript**src/modes/memo/memo.interface.ts**&quot;&gt;&lt;pre class=&quot;language-typescript**src/modes/memo/memo.interface.ts**&quot;&gt;&lt;code class=&quot;language-typescript**src/modes/memo/memo.interface.ts**&quot;&gt;export interface Memo {
    key: number;
    author: string;                 // 작성자
    title: string;                  // 제목
    contents: string;               // 본문
    publishedDate: Date;           // 작성일
    recentUpdatedDate: Date;      // 최근 수정일
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;목 메모리스트 정의하기&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;src&lt;/strong&gt;폴더에서 &lt;strong&gt;mocks&lt;/strong&gt;, &lt;strong&gt;memo&lt;/strong&gt; 폴더를 만들어 주신 후&lt;/p&gt;
&lt;p&gt;그 안에 &lt;strong&gt;memo-list.mock.ts&lt;/strong&gt;파일을 만들어주세요&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript**src/mocks/memo/memo-list.mock.ts**&quot;&gt;&lt;pre class=&quot;language-typescript**src/mocks/memo/memo-list.mock.ts**&quot;&gt;&lt;code class=&quot;language-typescript**src/mocks/memo/memo-list.mock.ts**&quot;&gt;import { Memo } from &amp;#39;./../../models/memo/memo.interface&amp;#39;;
export const MEMOLIST: Memo[] = [
    {
        key: 0,
        title: &amp;quot;제목 1&amp;quot;,
        contents: &amp;quot;본문본문본문본문본문본문본문본문본문본문본문본문본문본문본문본문본문본문본문본문&amp;quot;,
        author: &amp;quot;ddalpange@gmail.com&amp;quot;,
        recentUpdatedDate: new Date(),
        publishedDate: new Date(),
    },
    {
        key: 1,
        title: &amp;quot;제목 2&amp;quot;,
        contents: &amp;quot;본문본문본문본문본문본문본문본문본문본문본문본문본문본문본문본문본문본문본문본문&amp;quot;,
        author: &amp;quot;ddalpange@gmail.com&amp;quot;,
        recentUpdatedDate: new Date(),
        publishedDate: new Date(),
    }
]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;메모 관리 서비스 만들기 !&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ionic g provider memo-manager&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위 명령어를 실행하고 나면 &lt;strong&gt;providers&lt;/strong&gt;라는 폴더가 &lt;strong&gt;src&lt;/strong&gt; 폴더에 생길거에요!
Ionic Cli로 만든 provider는 앱 모듈에 자동으로 추가(registering)됩니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript**src/proividers/memo-manager/memo-manager.ts**&quot;&gt;&lt;pre class=&quot;language-typescript**src/proividers/memo-manager/memo-manager.ts**&quot;&gt;&lt;code class=&quot;language-typescript**src/proividers/memo-manager/memo-manager.ts**&quot;&gt;import { MEMOLIST } from &amp;#39;./../../mocks/memo/memo-list.mock&amp;#39;;
import { Memo } from &amp;#39;./../../models/memo/memo.interface&amp;#39;;
import { Injectable } from &amp;#39;@angular/core&amp;#39;;
import { Http } from &amp;#39;@angular/http&amp;#39;;

/*
  Generated class for the MemoManagerProvider provider.

  See https://angular.io/docs/ts/latest/guide/dependency-injection.html
  for more info on providers and Angular DI.
*/
@Injectable()
export class MemoManagerProvider {

  memoList: Memo[];

  constructor(public http: Http) {
    this.initMemoList();
  }

  initMemoList() {
    this.memoList = MEMOLIST;
  }

  getMemoList(): Memo[] {
    return this.memoList;
  }

  getMemo(key: number): Memo {
    let index = this.memoList.findIndex((memo: Memo, i: number) =&amp;gt; {
      return memo.key === key;
    });

    return this.memoList[index] || null;
  }

  createMemo(title: string, contents: string, author: string) {
    let lastMemo = this.memoList[this.memoList.length - 1];
    let lastMemoKey = lastMemo ? lastMemo.key : -1;
    let key = lastMemoKey + 1;

    let memo: Memo = {
      key: key,
      title: title,
      contents: contents,
      author: author,
      publishedDate: new Date(),
      recentUpdatedDate: new Date(),
    }

    this.memoList.push(memo);
  }

  deleteMemo(deleteMemo: Memo) {
    let index = this.memoList.findIndex((memo: Memo, i: number) =&amp;gt; {
      return memo.key === deleteMemo.key;
    });

    this.memoList.splice(index, 1);
  }

  editMemo(changeMemo: Memo, title: string, contents: string) {
    let index = this.memoList.findIndex((memo: Memo, i: number) =&amp;gt; {
      return memo.key === changeMemo.key;
    });

    this.memoList[index].title = title;
    this.memoList[index].contents = contents;
    this.memoList[index].recentUpdatedDate = new Date();
  }

}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;잘 되는지 메모 리스트 페이지에서 메모 매니저를 주입(DI) 받아보겠습니다.&lt;/p&gt;
&lt;p&gt;메모 리스트페이지의 constructor 부분을 아래와 같이 바꿔주세요.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript**src/pages/memo-list/memo-list.ts**&quot;&gt;&lt;pre class=&quot;language-typescript**src/pages/memo-list/memo-list.ts**&quot;&gt;&lt;code class=&quot;language-typescript**src/pages/memo-list/memo-list.ts**&quot;&gt;...
import { MemoManagerProvider } from &amp;#39;./../../providers/memo-manager/memo-manager&amp;#39;;

...

export class MemoListPage {

  constructor(
    public navCtrl: NavController,
    public navParams: NavParams,
    public memoManager: MemoManagerProvider) {
  }
  .....
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;여기까지 !&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;잠시 숨 고르시고 에러 안나는지 살펴보세요.&lt;/p&gt;
&lt;p&gt;이제 페이지들의 뷰에 각 데이터들을 연동하고, 메모 매니저를 주입(DI)받아서 메모를 쓰기, 수정 삭제, 보기 할 수 있는 기능을 만들거에요.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript**src/pages/memo-list/memo-list.ts**&quot;&gt;&lt;pre class=&quot;language-typescript**src/pages/memo-list/memo-list.ts**&quot;&gt;&lt;code class=&quot;language-typescript**src/pages/memo-list/memo-list.ts**&quot;&gt;import { Memo } from &amp;#39;./../../mod els/memo/memo.interface&amp;#39;;
import { Component, OnInit } from &amp;#39;@angular/core&amp;#39;;
import { IonicPage, NavController, NavParams } from &amp;#39;ionic-angular&amp;#39;;

import { MemoCreatePage } from &amp;#39;./../memo-create/memo-create&amp;#39;;
import { MemoDetailPage } from &amp;#39;./../memo-detail/memo-detail&amp;#39;;

import { MemoManagerProvider } from &amp;#39;./../../providers/memo-manager/memo-manager&amp;#39;;
@IonicPage()

@Component({
  selector: &amp;#39;page-memo-list&amp;#39;,
  templateUrl: &amp;#39;memo-list.html&amp;#39;,
})

export class MemoListPage {

  memoList: Memo[] = [];

  constructor(
    public navCtrl: NavController,
    public navParams: NavParams,
    public memoManager: MemoManagerProvider) {
  }
 
  ngOnInit() {
    this.memoList = this.memoManager.getMemoList();
    console.log(this.memoList);
  }

  onClickViewMemoDetail(memo: Memo) {
    this.navCtrl.push(MemoDetailPage, { memo: memo });
  }
  
  onClickCreateMemo() {
    this.navCtrl.push(MemoCreatePage);
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html**src/pages/memo-list/memo-list.html**&quot;&gt;&lt;pre class=&quot;language-html**src/pages/memo-list/memo-list.html**&quot;&gt;&lt;code class=&quot;language-html**src/pages/memo-list/memo-list.html**&quot;&gt;&amp;lt;ion-header&amp;gt;
  &amp;lt;ion-navbar color=&amp;quot;primary&amp;quot;&amp;gt;
    &amp;lt;ion-title&amp;gt;메모들&amp;lt;/ion-title&amp;gt;
  &amp;lt;/ion-navbar&amp;gt;
&amp;lt;/ion-header&amp;gt;
&amp;lt;ion-content&amp;gt;
  &amp;lt;ng-template ngFor let-memo [ngForOf]=&amp;quot;memoList&amp;quot; let-i=&amp;quot;index&amp;quot;&amp;gt;
    &amp;lt;ion-card (click)=&amp;quot;onClickViewMemoDetail(memo)&amp;quot;&amp;gt;
      &amp;lt;ion-card-header&amp;gt;
        {{ memo.title }}
      &amp;lt;/ion-card-header&amp;gt;
      &amp;lt;ion-card-content&amp;gt;
        {{ memo.contents }}
      &amp;lt;/ion-card-content&amp;gt;
    &amp;lt;/ion-card&amp;gt;
  &amp;lt;/ng-template&amp;gt;
  &amp;lt;ion-fab right bottom&amp;gt;
    &amp;lt;button ion-fab icon-only (click)=&amp;quot;onClickCreateMemo()&amp;quot;&amp;gt;
      &amp;lt;ion-icon name=&amp;quot;add&amp;quot; big&amp;gt;&amp;lt;/ion-icon&amp;gt;
    &amp;lt;/button&amp;gt;
  &amp;lt;/ion-fab&amp;gt;
&amp;lt;/ion-content&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript**src/pages/memo-detail/memo-detail.ts**&quot;&gt;&lt;pre class=&quot;language-typescript**src/pages/memo-detail/memo-detail.ts**&quot;&gt;&lt;code class=&quot;language-typescript**src/pages/memo-detail/memo-detail.ts**&quot;&gt;import { MemoManagerProvider } from &amp;#39;./../../providers/memo-manager/memo-manager&amp;#39;;
import { Memo } from &amp;#39;./../../models/memo/memo.interface&amp;#39;;
import { Component, OnInit } from &amp;#39;@angular/core&amp;#39;;
import { IonicPage, NavController, NavParams } from &amp;#39;ionic-angular&amp;#39;;

import { MemoCreatePage } from &amp;#39;./../memo-create/memo-create&amp;#39;;

@IonicPage()
@Component({
  selector: &amp;#39;page-memo-detail&amp;#39;,
  templateUrl: &amp;#39;memo-detail.html&amp;#39;,
})

export class MemoDetailPage {

  memo: Memo;
  title: string;
  contents: string;

  constructor(
    public navCtrl: NavController, 
    public navParams: NavParams,
    public memoManager: MemoManagerProvider) {
  }
  
  ngOnInit() {
    this.memo = this.navParams.get(&amp;#39;memo&amp;#39;);
  }

  onOpenEditMemo(memo: Memo) {
    this.navCtrl.push(MemoCreatePage, { memo: memo });
  }
  
  onDeleteMemo(memo: Memo) {
    this.memoManager.deleteMemo(memo);
    this.navCtrl.pop();
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html**src/pages/memo-detail/memo-detail.html**&quot;&gt;&lt;pre class=&quot;language-html**src/pages/memo-detail/memo-detail.html**&quot;&gt;&lt;code class=&quot;language-html**src/pages/memo-detail/memo-detail.html**&quot;&gt;&amp;lt;ion-header&amp;gt;
  &amp;lt;ion-navbar color=&amp;quot;danger&amp;quot;&amp;gt;
    &amp;lt;ion-title&amp;gt;메모 상세&amp;lt;/ion-title&amp;gt;
    &amp;lt;ion-buttons end&amp;gt;
      &amp;lt;button ion-button icon-only (click)=&amp;quot;onDeleteMemo(memo)&amp;quot;&amp;gt;
        &amp;lt;ion-icon name=&amp;quot;trash&amp;quot;&amp;gt;&amp;lt;/ion-icon&amp;gt;
      &amp;lt;/button&amp;gt;
      &amp;lt;button ion-button icon-only (click)=&amp;quot;onOpenEditMemo(memo)&amp;quot;&amp;gt;
        &amp;lt;ion-icon name=&amp;quot;hammer&amp;quot;&amp;gt;&amp;lt;/ion-icon&amp;gt;
      &amp;lt;/button&amp;gt;
    &amp;lt;/ion-buttons&amp;gt;
  &amp;lt;/ion-navbar&amp;gt;
&amp;lt;/ion-header&amp;gt;
&amp;lt;ion-content&amp;gt;
  &amp;lt;ion-card&amp;gt;
    &amp;lt;ion-card-header&amp;gt;
      &amp;lt;h1&amp;gt;{{ memo.title }}&amp;lt;/h1&amp;gt;
    &amp;lt;/ion-card-header&amp;gt;
    &amp;lt;ion-card-content&amp;gt;
      &amp;lt;p&amp;gt;{{ memo.contents }}&amp;lt;/p&amp;gt;
      &amp;lt;div class=&amp;quot;etc&amp;quot;&amp;gt;
        &amp;lt;p&amp;gt;
          &amp;lt;span&amp;gt;저자&amp;lt;/span&amp;gt; 
          {{ memo.author }}
        &amp;lt;/p&amp;gt;
        &amp;lt;p&amp;gt;
          &amp;lt;span&amp;gt;발행일&amp;lt;/span&amp;gt;
          {{ memo.publishedDate | date }}
        &amp;lt;/p&amp;gt;
        &amp;lt;p&amp;gt;
          &amp;lt;span&amp;gt;최근 수정일&amp;lt;/span&amp;gt;
           {{ memo.recentUpdatedDate | date }}
        &amp;lt;/p&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/ion-card-content&amp;gt;
  &amp;lt;/ion-card&amp;gt;
&amp;lt;/ion-content&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript**src/pages/memo-create/memo-create.ts**&quot;&gt;&lt;pre class=&quot;language-typescript**src/pages/memo-create/memo-create.ts**&quot;&gt;&lt;code class=&quot;language-typescript**src/pages/memo-create/memo-create.ts**&quot;&gt;import { MemoManagerProvider } from &amp;#39;./../../providers/memo-manager/memo-manager&amp;#39;;
import { Memo } from &amp;#39;./../../models/memo/memo.interface&amp;#39;;
import { Component, OnInit } from &amp;#39;@angular/core&amp;#39;;
import { IonicPage, NavController, NavParams } from &amp;#39;ionic-angular&amp;#39;;

@IonicPage()
@Component({
  selector: &amp;#39;page-memo-create&amp;#39;,
  templateUrl: &amp;#39;memo-create.html&amp;#39;,
})

export class MemoCreatePage {
  memo: Memo;
  title: string;
  contents: string;
  constructor(
    public navCtrl: NavController, 
    public navParams: NavParams,
    public memoManager: MemoManagerProvider) {
  }

  ngOnInit() {
    let memo = this.navParams.get(&amp;#39;memo&amp;#39;);
    if(memo) {
      this.memo = memo;
      this.title = memo.title;
      this.contents = memo.contents;
    }
  }

  onChangeTitle(event: KeyboardEvent) {
    this.title = event.target[&amp;#39;value&amp;#39;];
  }
  
  onChangeContents(event: KeyboardEvent) {
    this.contents = event.target[&amp;#39;value&amp;#39;];
  }

  onSaveMemo() {
    if(this.memo) {
      this.memoManager.editMemo(this.memo, this.title, this.contents);
    } else {
      this.memoManager.createMemo(this.title, this.contents, &amp;#39;ddalpange@gmail.com&amp;#39;);
    }
    this.navCtrl.pop();
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html**src/pages/memo-create/memo-create.html**&quot;&gt;&lt;pre class=&quot;language-html**src/pages/memo-create/memo-create.html**&quot;&gt;&lt;code class=&quot;language-html**src/pages/memo-create/memo-create.html**&quot;&gt;&amp;lt;ion-header&amp;gt;
  &amp;lt;ion-navbar color=&amp;quot;secondary&amp;quot;&amp;gt;
    &amp;lt;ion-title&amp;gt;메모 만들기&amp;lt;/ion-title&amp;gt;
  &amp;lt;/ion-navbar&amp;gt;
&amp;lt;/ion-header&amp;gt;
&amp;lt;ion-content padding&amp;gt;
  &amp;lt;ion-list&amp;gt;
    &amp;lt;ion-item&amp;gt;
      &amp;lt;ion-input placeholder=&amp;quot;제목을 입력해주세요.&amp;quot; [value]=&amp;quot;title&amp;quot; (change)=&amp;quot;onChangeTitle($event)&amp;quot;&amp;gt;&amp;lt;/ion-input&amp;gt;
    &amp;lt;/ion-item&amp;gt;
    &amp;lt;ion-item&amp;gt;
      &amp;lt;ion-textarea rows=&amp;quot;50&amp;quot; placeholder=&amp;quot;내용을 입력해 주시겠어요 ?&amp;quot; [value]=&amp;quot;contents&amp;quot; (change)=&amp;quot;onChangeContents($event)&amp;quot;&amp;gt;&amp;lt;/ion-textarea&amp;gt;
    &amp;lt;/ion-item&amp;gt;
  &amp;lt;/ion-list&amp;gt;
  &amp;lt;ion-fab right bottom&amp;gt;
    &amp;lt;button ion-fab icon-only color=&amp;quot;secondary&amp;quot; (click)=&amp;quot;onSaveMemo()&amp;quot;&amp;gt;&amp;lt;ion-icon name=&amp;quot;checkmark&amp;quot;&amp;gt;&amp;lt;/ion-icon&amp;gt;&amp;lt;/button&amp;gt;
  &amp;lt;/ion-fab&amp;gt;
&amp;lt;/ion-content&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;완성되었습니다!!&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;참고 링크&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ddalpange/simple-memo&quot;&gt;해당 포스트에 작성된 모든 코드는 여기에 있습니다!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://memo-28314.firebaseapp.com&quot;&gt;해당 프로젝트는 여기서 볼 수 있습니다 !!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!--stackedit_data:
eyJoaXN0b3J5IjpbLTM3MTEyODA0OCwxNDU2ODEwNTgyLDYxOT
g3NjM2OF19
--&gt;</content:encoded></item><item><title><![CDATA[간단한 메모장 만들기 2 - 프로토타이핑]]></title><description><![CDATA[포스트 2에서는 아이오닉 컴포넌트를 활용하여 프로토 타이핑을 진행하도록 하겠습니다. 시작하기 전에. 먼저 아이오닉 프로젝트가 없으신 분들은 이전 포스트를 참고하여 만들어주세요. 간단한 메모장 만들기…]]></description><link>https://ddalpange.github.io/2017-10-03-project-make-simple-memo-2/</link><guid isPermaLink="false">https://ddalpange.github.io/2017-10-03-project-make-simple-memo-2/</guid><pubDate>Tue, 03 Oct 2017 22:48:55 GMT</pubDate><content:encoded>&lt;p&gt;포스트 2에서는 아이오닉 컴포넌트를 활용하여 프로토 타이핑을 진행하도록 하겠습니다.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h3&gt;시작하기 전에.&lt;/h3&gt;
&lt;p&gt;먼저 아이오닉 프로젝트가 없으신 분들은 이전 포스트를 참고하여 만들어주세요.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://ddalpange.github.io/2017/07/09/%EA%B0%84%EB%8B%A8%ED%95%9C-%EB%A9%94%EB%AA%A8%EC%9E%A5-%EB%A7%8C%EB%93%A4%EA%B8%B0-1/&quot;&gt;간단한 메모장 만들기 1&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;페이지 생성을 시작하겠습니다.&lt;/h3&gt;
&lt;p&gt;루트프로젝트에서 쉘 또는 명령 프롬프트를 실행한 후 아래의 명령어를 입력하여주세요.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ionic generate page sign-up
$ ionic generate page sign-in
$ ionic generate page memo-list
$ ionic generate page memo-detail
$ ionic generate page memo-create&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 정도면 충분할것 같네요. 부족한 페이지가 있으면 작업중에 생성하도록 하겠습니다.&lt;/p&gt;
&lt;p&gt;루트 모듈(app.module.ts)에 위 5개의 페이지를 임포트하겠습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescriptsrc/app/app.module.ts&quot;&gt;&lt;pre class=&quot;language-typescriptsrc/app/app.module.ts&quot;&gt;&lt;code class=&quot;language-typescriptsrc/app/app.module.ts&quot;&gt;// 주의 !! Ionic 2버전입니다.
import { BrowserModule } from &amp;#39;@angular/platform-browser&amp;#39;;
import { HttpModule } from &amp;#39;@angular/http&amp;#39;;

import { ErrorHandler, NgModule } from &amp;#39;@angular/core&amp;#39;;
import { FormsModule } from &amp;#39;@angular/forms&amp;#39;;
import { IonicApp, IonicErrorHandler, IonicModule } from &amp;#39;ionic-angular&amp;#39;;
import { SplashScreen } from &amp;#39;@ionic-native/splash-screen&amp;#39;;
import { StatusBar } from &amp;#39;@ionic-native/status-bar&amp;#39;;

import { MyApp } from &amp;#39;./app.component&amp;#39;;
import { SignInPage } from &amp;#39;./../pages/sign-in/sign-in&amp;#39;;
import { MemoDetailPage } from &amp;#39;./../pages/memo-detail/memo-detail&amp;#39;;
import { MemoListPage } from &amp;#39;./../pages/memo-list/memo-list&amp;#39;;
import { SignUpPage } from &amp;#39;../pages/sign-up/sign-up&amp;#39;;
import { MemoCreatePage } from &amp;#39;../pages/memo-create/memo-create&amp;#39;;

function getPages() {
  return [
    MyApp,
    SignInPage,
    SignUpPage,
    MemoListPage,
    MemoDetailPage,
    MemoCreatePage
  ]
}

@NgModule({
  declarations: getPages(),
  imports: [
    BrowserModule,
    HttpModule,
    FormsModule,
    IonicModule.forRoot(MyApp),
  ],
  bootstrap: [IonicApp],
  entryComponents: getPages(),
  providers: [
    StatusBar,
    SplashScreen,
    {provide: ErrorHandler, useClass: IonicErrorHandler}
  ]
})
export class AppModule {}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;모든 페이지를 리턴해주는 &lt;em&gt;getPages()&lt;/em&gt; 라는 함수를 작성하고, declations, entryComponents 두 속성에 값을 넣어줍니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;잠깐! 왜 페이지 별로 모듈을 따로 빼지 않는것이죠 ?&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;AngularJS의 기본 단위는 &lt;strong&gt;모듈&lt;/strong&gt;입니다. 그럼으로 상위 모듈이 모든 페이지(컴포넌트)를 바로 임포트하여 선언하는건 옳은 방식이 아니죠. 일단은 편의성을 위해 루트 모듈에 모든 컴포넌트를 선언해놓았지만, 나중에 폴더구조를 바꾸면서 모든 페이지(컴포넌트)는 각각의 모듈을 가지도록 바꿀 것이니 걱정하지 마세요.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- more --&gt;
&lt;p&gt;&lt;strong&gt;정정합니다.&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Ionic3 업데이트로 각각의 페이지는 모듈을 가지도록 바뀌어서 기본적으로 게으른 로딩(lazy loading)을 지원하도록 바뀌었습니다. cli를 통해 페이지를 만들 때 모듈 파일이 같이 있다면 앱 모듈에서 바로 페이지를 declation 할 수 없습니다. 각각의 모듈을 임포트해야하죠.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescriptsrc/app/app.module.ts&quot;&gt;&lt;pre class=&quot;language-typescriptsrc/app/app.module.ts&quot;&gt;&lt;code class=&quot;language-typescriptsrc/app/app.module.ts&quot;&gt;import { SignUpPageModule } from &amp;#39;./../pages/sign-up/sign-up.module&amp;#39;;
import { SignInPageModule } from &amp;#39;./../pages/sign-in/sign-in.module&amp;#39;;
import { MemoListPageModule } from &amp;#39;./../pages/memo-list/memo-list.module&amp;#39;;
import { MemoDetailPageModule } from &amp;#39;./../pages/memo-detail/memo-detail.module&amp;#39;;
import { MemoCreatePageModule } from &amp;#39;./../pages/memo-create/memo-create.module&amp;#39;;
import { BrowserModule } from &amp;#39;@angular/platform-browser&amp;#39;;
import { HttpModule } from &amp;#39;@angular/http&amp;#39;;
import { ErrorHandler, NgModule } from &amp;#39;@angular/core&amp;#39;;
import { FormsModule } from &amp;#39;@angular/forms&amp;#39;;
import { IonicApp, IonicErrorHandler, IonicModule } from &amp;#39;ionic-angular&amp;#39;;
import { SplashScreen } from &amp;#39;@ionic-native/splash-screen&amp;#39;;
import { StatusBar } from &amp;#39;@ionic-native/status-bar&amp;#39;;
import { MyApp } from &amp;#39;./app.component&amp;#39;;

@NgModule({
  declarations: [MyApp],
  imports: [
    BrowserModule,
    HttpModule,
    FormsModule,
    IonicModule.forRoot(MyApp),
    MemoCreatePageModule,
    MemoDetailPageModule,
    MemoListPageModule,
    SignInPageModule,
    SignUpPageModule
  ],
  bootstrap: [IonicApp],
  entryComponents: [MyApp],
  providers: [
    StatusBar,
    SplashScreen,
    {provide: ErrorHandler, useClass: IonicErrorHandler},
  ]
})
export class AppModule {}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;잊지마세요!&lt;/strong&gt;
루트모듈만 바꾸면 되는게 아닙니다. 루트 컴포넌트(app.component.ts)에 가서 루트 페이지(시작 페이지)도 같이 바꿔줘야합니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescriptsrc/app/app.component.ts&quot;&gt;&lt;pre class=&quot;language-typescriptsrc/app/app.component.ts&quot;&gt;&lt;code class=&quot;language-typescriptsrc/app/app.component.ts&quot;&gt;import { SignInPage } from &amp;#39;./../pages/sign-in/sign-in&amp;#39;;
import { Component } from &amp;#39;@angular/core&amp;#39;;
import { Platform } from &amp;#39;ionic-angular&amp;#39;;
import { StatusBar } from &amp;#39;@ionic-native/status-bar&amp;#39;;
import { SplashScreen } from &amp;#39;@ionic-native/splash-screen&amp;#39;;

@Component({
  templateUrl: &amp;#39;app.html&amp;#39;
})
export class MyApp {
  rootPage:any = SiginInPage;
  constructor(platform: Platform, statusBar: StatusBar, splashScreen: SplashScreen) {
    platform.ready().then(() =&amp;gt; {
      // Okay, so the platform is ready and our plugins are available.
      // Here you can do any higher level native things you might need.
      statusBar.styleDefault();
      splashScreen.hide();
    });
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;여기까지 하셨으면 반은 성공한겁니다 !&lt;/p&gt;
&lt;h3&gt;퍼블리싱을 시작하겠습니다.&lt;/h3&gt;
&lt;h4&gt;로그인페이지 (sign-in)&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescriptsrc/pages/sign-in/sign-in.ts&quot;&gt;&lt;pre class=&quot;language-typescriptsrc/pages/sign-in/sign-in.ts&quot;&gt;&lt;code class=&quot;language-typescriptsrc/pages/sign-in/sign-in.ts&quot;&gt;import { Component, OnInit } from &amp;#39;@angular/core&amp;#39;;
import { IonicPage, NavController, NavParams } from &amp;#39;ionic-angular&amp;#39;;

import { SignUpPage } from &amp;#39;./../sign-up/sign-up&amp;#39;;
import { MemoListPage } from &amp;#39;./../memo-list/memo-list&amp;#39;;

@IonicPage()
@Component({
  selector: &amp;#39;page-sign-in&amp;#39;,
  templateUrl: &amp;#39;sign-in.html&amp;#39;,
})
export class SignInPage {

  emailAddress: string;
  password: string;

  constructor(
    public navCtrl: NavController, 
    public navParams: NavParams,
  ) {}

  ionViewDidLoad() {
    console.log(&amp;#39;ionViewDidLoad SignInPage&amp;#39;);
  }

  ngOnInit() {
  }

  onClickDDalpange() {
    window.location.href = &amp;quot;https://ddalpange.github.io&amp;quot;;
  }

  onChangeEmailAddress(event: any) {
    this.emailAddress = event.target.value;
  }

  onChangePassword(event: any) {
    this.password = event.target.value;
  }
  
  onClickEmailLogIn() {
    this.navCtrl.setRoot(MemoListPage);    
  }

  onClickFacebookLogin() {

  }

  onClickSignUp() {
    this.navCtrl.push(SignUpPage);
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;htmlsrc/pages/sign-in/sign-in.html&quot;&gt;&lt;pre class=&quot;language-htmlsrc/pages/sign-in/sign-in.html&quot;&gt;&lt;code class=&quot;language-htmlsrc/pages/sign-in/sign-in.html&quot;&gt;&amp;lt;ion-content padding&amp;gt;
  &amp;lt;div class=&amp;quot;image-wrap&amp;quot;&amp;gt;
    &amp;lt;img src=&amp;quot;/images/gyul.png&amp;quot; 
      (click)=&amp;quot;onClickDDalpange()&amp;quot;/&amp;gt;
    &amp;lt;p&amp;gt;달팽이의 메모 앱&amp;lt;/p&amp;gt;
    &amp;lt;ion-list&amp;gt;
      &amp;lt;ion-item&amp;gt;
        &amp;lt;ion-input type=&amp;quot;email&amp;quot; placeholder=&amp;quot;이메일&amp;quot;&amp;gt;&amp;lt;/ion-input&amp;gt;
      &amp;lt;/ion-item&amp;gt;
      &amp;lt;ion-item&amp;gt;
        &amp;lt;ion-input type=&amp;quot;password&amp;quot; placeholder=&amp;quot;비밀번호&amp;quot;&amp;gt;&amp;lt;/ion-input&amp;gt;
      &amp;lt;/ion-item&amp;gt;
    &amp;lt;/ion-list&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;button ion-button block color=&amp;quot;light&amp;quot; (click)=&amp;quot;onClickEmailLogIn()&amp;quot;&amp;gt;이메일 로그인&amp;lt;/button&amp;gt;
  &amp;lt;button ion-button block color=&amp;quot;primary&amp;quot; (click)=&amp;quot;onClickFacebookLogin()&amp;quot;&amp;gt;페이스북 로그인&amp;lt;/button&amp;gt;
  &amp;lt;p class=&amp;quot;sign-up-text&amp;quot; (click)=&amp;quot;onClickSignUp()&amp;quot;&amp;gt;계정이 없으신가요?&amp;lt;/p&amp;gt;
&amp;lt;/ion-content&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;scsssrc/pages/sign-in/sign-in.scss&quot;&gt;&lt;pre class=&quot;language-scsssrc/pages/sign-in/sign-in.scss&quot;&gt;&lt;code class=&quot;language-scsssrc/pages/sign-in/sign-in.scss&quot;&gt;page-sign-in {
  .image-wrap {
    width:100%;
    text-align: center;
    &amp;gt;img {
      width: 80%;
      margin: 0 auto;
    }
  }
  .sign-up-text {
    text-decoration: underline;
    text-align: center;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;회원가입 페이지 (sign-up)&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescriptsrc/pages/sign-up/sign-up.ts&quot;&gt;&lt;pre class=&quot;language-typescriptsrc/pages/sign-up/sign-up.ts&quot;&gt;&lt;code class=&quot;language-typescriptsrc/pages/sign-up/sign-up.ts&quot;&gt;import { Component } from &amp;#39;@angular/core&amp;#39;;
import { IonicPage, NavController, NavParams } from &amp;#39;ionic-angular&amp;#39;;

/**
 * Generated class for the SignUpPage page.
 *
 * See http://ionicframework.com/docs/components/#navigation for more info
 * on Ionic pages and navigation.
 */
@IonicPage()
@Component({
  selector: &amp;#39;page-sign-up&amp;#39;,
  templateUrl: &amp;#39;sign-up.html&amp;#39;,
})
export class SignUpPage {

  constructor(public navCtrl: NavController, public navParams: NavParams) {
  }

  onClickDDalpange() {
    window.location.href = &amp;quot;https://ddalpange.github.io&amp;quot;;
  }

  onClickSignUp() {
    this.navCtrl.pop();    
  }

  onClickNavBack() {
    this.navCtrl.pop();
  }

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;htmlsrc/pages/sign-up/sign-up.html&quot;&gt;&lt;pre class=&quot;language-htmlsrc/pages/sign-up/sign-up.html&quot;&gt;&lt;code class=&quot;language-htmlsrc/pages/sign-up/sign-up.html&quot;&gt;&amp;lt;ion-content padding&amp;gt;
   &amp;lt;div class=&amp;quot;image-wrap&amp;quot;&amp;gt;
    &amp;lt;img src=&amp;quot;/images/gyul.png&amp;quot; 
      (click)=&amp;quot;onClickDDalpange()&amp;quot;/&amp;gt;
    &amp;lt;p&amp;gt;달팽이의 메모 앱&amp;lt;/p&amp;gt;
    &amp;lt;ion-list&amp;gt;
      &amp;lt;ion-item&amp;gt;
        &amp;lt;ion-input type=&amp;quot;email&amp;quot; placeholder=&amp;quot;이메일&amp;quot;&amp;gt;&amp;lt;/ion-input&amp;gt;
      &amp;lt;/ion-item&amp;gt;
      &amp;lt;ion-item&amp;gt;
        &amp;lt;ion-input type=&amp;quot;password&amp;quot; placeholder=&amp;quot;비밀번호&amp;quot;&amp;gt;&amp;lt;/ion-input&amp;gt;
      &amp;lt;/ion-item&amp;gt;
    &amp;lt;/ion-list&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;button ion-button block color=&amp;quot;light&amp;quot; (click)=&amp;quot;onClickSignUp()&amp;quot;&amp;gt;가입하기&amp;lt;/button&amp;gt;
  &amp;lt;button ion-button block color=&amp;quot;danger&amp;quot; (click)=&amp;quot;onClickNavBack()&amp;quot;&amp;gt;뒤로가기&amp;lt;/button&amp;gt;
&amp;lt;/ion-content&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;scsssrc/pages/sign-up/sign-up.scss&quot;&gt;&lt;pre class=&quot;language-scsssrc/pages/sign-up/sign-up.scss&quot;&gt;&lt;code class=&quot;language-scsssrc/pages/sign-up/sign-up.scss&quot;&gt;page-sign-up {
  .image-wrap {
    width:100%;
    text-align: center;
    &amp;gt;img {
      width: 80%;
      margin: 0 auto;
    }
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;메모리스트 페이지 (memo-list)&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescriptsrc/pages/memo-list/memo-list.ts&quot;&gt;&lt;pre class=&quot;language-typescriptsrc/pages/memo-list/memo-list.ts&quot;&gt;&lt;code class=&quot;language-typescriptsrc/pages/memo-list/memo-list.ts&quot;&gt;import { Component } from &amp;#39;@angular/core&amp;#39;;
import { IonicPage, NavController, NavParams } from &amp;#39;ionic-angular&amp;#39;;

import { MemoCreatePage } from &amp;#39;./../memo-create/memo-create&amp;#39;;
import { MemoDetailPage } from &amp;#39;./../memo-detail/memo-detail&amp;#39;;

@IonicPage()
@Component({
  selector: &amp;#39;page-memo-list&amp;#39;,
  templateUrl: &amp;#39;memo-list.html&amp;#39;,
})
export class MemoListPage {

  constructor(public navCtrl: NavController, public navParams: NavParams) {
  }

  ionViewDidLoad() {
    console.log(&amp;#39;ionViewDidLoad MemoListPage&amp;#39;);
  }

   onClickViewMemoDetail() {
    this.navCtrl.push(MemoDetailPage);
  }

  onClickCreateMemo() {
    this.navCtrl.push(MemoCreatePage);
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;htmlsrc/pages/memo-list/memo-list.html&quot;&gt;&lt;pre class=&quot;language-htmlsrc/pages/memo-list/memo-list.html&quot;&gt;&lt;code class=&quot;language-htmlsrc/pages/memo-list/memo-list.html&quot;&gt;&amp;lt;ion-header&amp;gt;
  &amp;lt;ion-navbar color=&amp;quot;primary&amp;quot;&amp;gt;
    &amp;lt;ion-title&amp;gt;메모들&amp;lt;/ion-title&amp;gt;
  &amp;lt;/ion-navbar&amp;gt;
&amp;lt;/ion-header&amp;gt;

&amp;lt;ion-content&amp;gt;
  &amp;lt;ion-card (click)=&amp;quot;onClickViewMemoDetail()&amp;quot;&amp;gt;
    &amp;lt;ion-card-header&amp;gt;
      제목1
    &amp;lt;/ion-card-header&amp;gt;
    &amp;lt;ion-card-content&amp;gt;
      내용내용내용내용내용내용내용내용내용내용내용내용
    &amp;lt;/ion-card-content&amp;gt;
  &amp;lt;/ion-card&amp;gt;
  &amp;lt;ion-card (click)=&amp;quot;onClickViewMemoDetail()&amp;quot;&amp;gt;
    &amp;lt;ion-card-header&amp;gt;
      제목2
    &amp;lt;/ion-card-header&amp;gt;
    &amp;lt;ion-card-content&amp;gt;
      내용내용내용내용내용내용내용내용내용내용내용내용
    &amp;lt;/ion-card-content&amp;gt;
  &amp;lt;/ion-card&amp;gt;
  &amp;lt;ion-card (click)=&amp;quot;onClickViewMemoDetail()&amp;quot;&amp;gt;
    &amp;lt;ion-card-header&amp;gt;
      제목3
    &amp;lt;/ion-card-header&amp;gt;
    &amp;lt;ion-card-content&amp;gt;
      내용내용내용내용내용내용내용내용내용내용내용내용
    &amp;lt;/ion-card-content&amp;gt;
  &amp;lt;/ion-card&amp;gt;
  &amp;lt;ion-fab right bottom&amp;gt;
    &amp;lt;button ion-fab icon-only&amp;gt;&amp;lt;ion-icon name=&amp;quot;add&amp;quot; big&amp;gt;&amp;lt;/ion-icon&amp;gt;&amp;lt;/button&amp;gt;
  &amp;lt;/ion-fab&amp;gt;
&amp;lt;/ion-content&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;scsssrc/pages/memo-list/memo-list.scss&quot;&gt;&lt;pre class=&quot;language-scsssrc/pages/memo-list/memo-list.scss&quot;&gt;&lt;code class=&quot;language-scsssrc/pages/memo-list/memo-list.scss&quot;&gt;page-memo-list {
  .content {
    background: #f4f4f4;
  }
  .card-header {
    font-weight: 600;
  }
  .card-content {
    overflow-y: hidden;
    text-overflow: ellipsis;
    white-space:nowrap;
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;메모 상세 페이지 (memo-detail)&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescriptsrc/pages/memo-detail/memo-detail.ts&quot;&gt;&lt;pre class=&quot;language-typescriptsrc/pages/memo-detail/memo-detail.ts&quot;&gt;&lt;code class=&quot;language-typescriptsrc/pages/memo-detail/memo-detail.ts&quot;&gt;import { Component, OnInit } from &amp;#39;@angular/core&amp;#39;;
import { IonicPage, NavController, NavParams } from &amp;#39;ionic-angular&amp;#39;;
import { MemoCreatePage } from &amp;#39;./../memo-create/memo-create&amp;#39;;

@IonicPage()
@Component({
  selector: &amp;#39;page-memo-detail&amp;#39;,
  templateUrl: &amp;#39;memo-detail.html&amp;#39;,
})
export class MemoDetailPage {

  constructor(public navCtrl: NavController, public navParams: NavParams) {
  }

  ngOnInit() {
  }

  onOpenEditMemo() {
    this.navCtrl.push(MemoCreatePage);
  }

  onDeleteMemo() {
    this.navCtrl.pop();
  }
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;htmlsrc/pages/memo-detail/memo-detail.html&quot;&gt;&lt;pre class=&quot;language-htmlsrc/pages/memo-detail/memo-detail.html&quot;&gt;&lt;code class=&quot;language-htmlsrc/pages/memo-detail/memo-detail.html&quot;&gt;&amp;lt;ion-header&amp;gt;
  &amp;lt;ion-navbar color=&amp;quot;danger&amp;quot;&amp;gt;
    &amp;lt;ion-title&amp;gt;메모 상세&amp;lt;/ion-title&amp;gt;
    &amp;lt;ion-buttons end&amp;gt;
      &amp;lt;button ion-button icon-only (click)=&amp;quot;onDeleteMemo()&amp;quot;&amp;gt;
        &amp;lt;ion-icon name=&amp;quot;trash&amp;quot;&amp;gt;&amp;lt;/ion-icon&amp;gt;
      &amp;lt;/button&amp;gt;
      &amp;lt;button ion-button icon-only (click)=&amp;quot;onOpenEditMemo()&amp;quot;&amp;gt;
        &amp;lt;ion-icon name=&amp;quot;hammer&amp;quot;&amp;gt;&amp;lt;/ion-icon&amp;gt;
      &amp;lt;/button&amp;gt;
    &amp;lt;/ion-buttons&amp;gt;
  &amp;lt;/ion-navbar&amp;gt;
&amp;lt;/ion-header&amp;gt;

&amp;lt;ion-content&amp;gt;
  &amp;lt;ion-card&amp;gt;
    &amp;lt;ion-card-header&amp;gt;
      &amp;lt;h1&amp;gt;메모 제목&amp;lt;/h1&amp;gt;
    &amp;lt;/ion-card-header&amp;gt;
    &amp;lt;ion-card-content&amp;gt;
      &amp;lt;p&amp;gt;메모 내용&amp;lt;/p&amp;gt;
      &amp;lt;div class=&amp;quot;etc&amp;quot;&amp;gt;
        &amp;lt;p&amp;gt;
          &amp;lt;span&amp;gt;저자&amp;lt;/span&amp;gt;
          메모 저자
        &amp;lt;/p&amp;gt;
        &amp;lt;p&amp;gt;
          &amp;lt;span&amp;gt;발행일&amp;lt;/span&amp;gt;
          메모 발행일
        &amp;lt;/p&amp;gt;
        &amp;lt;p&amp;gt;
          &amp;lt;span&amp;gt;최근 수정일&amp;lt;/span&amp;gt;
          메모 최근 수정일
        &amp;lt;/p&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/ion-card-content&amp;gt;
  &amp;lt;/ion-card&amp;gt;
&amp;lt;/ion-content&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;scsssrc/pages/memo-detail/memo-detail.scss&quot;&gt;&lt;pre class=&quot;language-scsssrc/pages/memo-detail/memo-detail.scss&quot;&gt;&lt;code class=&quot;language-scsssrc/pages/memo-detail/memo-detail.scss&quot;&gt;page-memo-detail {
  .content {
    background: #f4f4f4;
  }
  .card-header {
    font-weight: 600;
  }
  .etc {
    text-align: right;
    font-size: 0.8em;
    padding-top: 50px;
    color: #dedede;
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;메모 만들기 페이지 (memo-create)&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescriptsrc/pages/memo-create/memo-create.ts&quot;&gt;&lt;pre class=&quot;language-typescriptsrc/pages/memo-create/memo-create.ts&quot;&gt;&lt;code class=&quot;language-typescriptsrc/pages/memo-create/memo-create.ts&quot;&gt;import { Component, OnInit } from &amp;#39;@angular/core&amp;#39;;
import { IonicPage, NavController, NavParams } from &amp;#39;ionic-angular&amp;#39;;

@IonicPage()
@Component({
  selector: &amp;#39;page-memo-create&amp;#39;,
  templateUrl: &amp;#39;memo-create.html&amp;#39;,
})
export class MemoCreatePage {

  title: string;
  contents: string;

  constructor(public navCtrl: NavController, public navParams: NavParams) {
  }

  ngOnInit() {
  }

  onChangeTitle(event: KeyboardEvent) {
    this.title = event.target[&amp;#39;value&amp;#39;];
  }

  onChangeContents(event: KeyboardEvent) {
    this.contents = event.target[&amp;#39;value&amp;#39;];
  }
  
  onSaveMemo() {
    this.navCtrl.pop();
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;htmlsrc/pages/memo-create/memo-create.html&quot;&gt;&lt;pre class=&quot;language-htmlsrc/pages/memo-create/memo-create.html&quot;&gt;&lt;code class=&quot;language-htmlsrc/pages/memo-create/memo-create.html&quot;&gt;&amp;lt;ion-header&amp;gt;
  &amp;lt;ion-navbar color=&amp;quot;secondary&amp;quot;&amp;gt;
    &amp;lt;ion-title&amp;gt;메모 만들기&amp;lt;/ion-title&amp;gt;
  &amp;lt;/ion-navbar&amp;gt;
&amp;lt;/ion-header&amp;gt;
&amp;lt;ion-content padding&amp;gt;
  &amp;lt;ion-list&amp;gt;
    &amp;lt;ion-item&amp;gt;
      &amp;lt;ion-input placeholder=&amp;quot;제목을 입력해주세요.&amp;quot; [value]=&amp;quot;title&amp;quot; (change)=&amp;quot;onChangeTitle($event)&amp;quot;&amp;gt;&amp;lt;/ion-input&amp;gt;
    &amp;lt;/ion-item&amp;gt;
    &amp;lt;ion-item&amp;gt;
      &amp;lt;ion-textarea rows=&amp;quot;50&amp;quot; placeholder=&amp;quot;내용을 입력해 주시겠어요 ?&amp;quot; [value]=&amp;quot;contents&amp;quot; (change)=&amp;quot;onChangeContents($event)&amp;quot;&amp;gt;&amp;lt;/ion-textarea&amp;gt;
    &amp;lt;/ion-item&amp;gt;
  &amp;lt;/ion-list&amp;gt;
  &amp;lt;ion-fab right bottom&amp;gt;
    &amp;lt;button ion-fab icon-only color=&amp;quot;secondary&amp;quot; (click)=&amp;quot;onSaveMemo()&amp;quot;&amp;gt;&amp;lt;ion-icon name=&amp;quot;checkmark&amp;quot;&amp;gt;&amp;lt;/ion-icon&amp;gt;&amp;lt;/button&amp;gt;
  &amp;lt;/ion-fab&amp;gt;
&amp;lt;/ion-content&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;scsssrc/pages/memo-create/memo-create.scss&quot;&gt;&lt;pre class=&quot;language-scsssrc/pages/memo-create/memo-create.scss&quot;&gt;&lt;code class=&quot;language-scsssrc/pages/memo-create/memo-create.scss&quot;&gt;page-memo-create {
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/images/memo/sign-in-page.png&quot; alt=&quot;로그인 페이지&quot;&gt;
&lt;img src=&quot;/images/memo/sign-up-page.png&quot; alt=&quot;회원가입 페이지&quot;&gt;
&lt;img src=&quot;/images/memo/memo-list-page.png&quot; alt=&quot;메모 리스트 페이지&quot;&gt;
&lt;img src=&quot;/images/memo/memo-detail-page.png&quot; alt=&quot;메모 상세 페이지&quot;&gt;
&lt;img src=&quot;/images/memo/memo-create-page.png&quot; alt=&quot;메모 만들기 페이지&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;참고 링크&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ddalpange/simple-memo&quot;&gt;해당 포스트에 작성된 모든 코드는 여기에 있습니다!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://memo-28314.firebaseapp.com&quot;&gt;해당 프로젝트는 여기서 볼 수 있습니다 !!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!--stackedit_data:
eyJoaXN0b3J5IjpbMjAwMzg1OTM4Nyw2MzYyODk5XX0=
--&gt;</content:encoded></item><item><title><![CDATA[간단한 메모장 만들기 1]]></title><description><![CDATA[파이어베이스, 아이오닉을 이용하여 간단한 하이브리드 어플리케이션을 만들어봅시다. 간단한 메모장을 만듭시다. 파이어베이스, 아이오닉을 이용하여 간단한 하이브리드 어플리케이션을 만들어봅시다. 파이어베이스의 database, hosting(deploy…]]></description><link>https://ddalpange.github.io/2017-10-03-project-make-simple-memo-1/</link><guid isPermaLink="false">https://ddalpange.github.io/2017-10-03-project-make-simple-memo-1/</guid><pubDate>Tue, 03 Oct 2017 22:48:48 GMT</pubDate><content:encoded>&lt;p&gt;파이어베이스, 아이오닉을 이용하여 간단한 하이브리드 어플리케이션을 만들어봅시다.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2&gt;간단한 메모장을 만듭시다.&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;파이어베이스, 아이오닉을 이용하여 간단한 하이브리드 어플리케이션을 만들어봅시다. 파이어베이스의 database, hosting(deploy), auth 등의 서비스와 ionic에서 지원하는 컴포넌트를 적극적으로 사용하여 만들겁니다. Angular의 기본 이론보다, Ionic과 Firebase의 기능에 대해서 중점을 두시면 될 듯합니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;사용기술&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;파이어베이스&lt;/li&gt;
&lt;li&gt;&lt;del&gt;위지윅 에디터&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;Angular2&lt;/li&gt;
&lt;li&gt;Ionic Framework&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;포스트 1에서는 간단한 설치와, 로컬서버로 앱을 시작해보는 정도로 끝내겠습니다.&lt;/p&gt;
&lt;h2&gt;개발환경 세팅&lt;/h2&gt;
&lt;h3&gt;Node.js&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://nodejs.org/en/&quot;&gt;NodeJS&lt;/a&gt; 공식 사이트에서 LTS(Long-term support) 버전을 받아주세요.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Node.js®는 Chrome V8 JavaScript 엔진으로 빌드된 JavaScript 런타임입니다. Node.js는 이벤트 기반, 논 블로킹 I/O 모델을 사용해 가볍고 효율적입니다. Node.js의 패키지 생태계인 npm은 세계에서 가장 큰 오픈 소스 라이브러리 생태계이기도 합니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Editor&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;VSCode&lt;/a&gt;를 깔아주세요. 따로 쓰는 IDE가 있으신 분들은 건너 뛰셔도 됩니다. 툴을 까신 다음 아래 두개의 익스텐션을 다운받아주세요.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Auto Close Tag
&lt;code class=&quot;language-text&quot;&gt;html&lt;/code&gt;에서 태그를 자동으로 닫아주는 패키지입니다&lt;/li&gt;
&lt;li&gt;Auto Import
&lt;code class=&quot;language-text&quot;&gt;typescript&lt;/code&gt;를 사용할 때 자동으로 임포트를 해주는 패키지입니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Install Global Node Packages&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; -g ionic cordova&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;ionic&lt;/code&gt;과 &lt;code class=&quot;language-text&quot;&gt;cordova&lt;/code&gt;를 global 환경에 인스톨하여주세요. 좀 오래 걸립니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;npm은 node package manager의 준말입니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;프로젝트를 만드세요&lt;/h2&gt;
&lt;p&gt;프로젝트를 생성할 폴더에서 shell 또는 cmd를 키신 후 다음의 명령어를 입력합니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;ionic start memo blank&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;memo는 프로젝트의 이름입니다. 빈 프로젝트를 만들거라서 blank 옵션을 줍니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ionic &amp;#x3C;명령어&gt; &amp;#x3C;이름&gt; &amp;#x3C;옵션&gt; 순서가 되겠네요.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;memo
├─hooks
├─resources
│  ├─android
│  │  ├─icon
│  │  └─splash
│  └─ios
│      ├─icon
│      └─splash
├─src
│  ├─app
│  ├─assets
│  │  └─icon
│  ├─pages
│  │  └─home
│  └─theme
└─www&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;지금까지 잘 따라오셨다면 위와 같은 폴더구조의 프로젝트가 나올겁니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;cd&lt;/span&gt; memo
ionic serve&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;명령어를 입력하여주세요.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/memo1.png&quot; alt=&quot;최초 실행 모습&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;참고 링크&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ddalpange/simple-memo&quot;&gt;해당 포스트에 작성된 모든 코드는 여기에 있습니다!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://memo-28314.firebaseapp.com&quot;&gt;해당 프로젝트는 여기서 볼 수 있습니다 !!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[자바스크립트 불변과 가변]]></title><description><![CDATA[…]]></description><link>https://ddalpange.github.io/2017-10-03-js-immutable-mutable/</link><guid isPermaLink="false">https://ddalpange.github.io/2017-10-03-js-immutable-mutable/</guid><pubDate>Tue, 03 Oct 2017 22:48:30 GMT</pubDate><content:encoded>&lt;p&gt;참조타입, 원시타입, 불변형, 가변형 등 자료형의 차이에 대해 알아봅시다.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h4&gt;참조타입, 원시타입? 불변형, 가변형?&lt;/h4&gt;
&lt;h5&gt;서론&lt;/h5&gt;
&lt;p&gt;포인트 관련 항목 페이지를 수정하면서 이상한 일이 일어났습니다.&lt;/p&gt;
&lt;p&gt;사용자가 원하는 날짜만을 이용하여 필터링을 하던 도중, 필터링한 데이터를 보여주고&lt;/p&gt;
&lt;p&gt;전체데이터를 다시 보여주지 않고 있었습니다.&lt;/p&gt;
&lt;p&gt;그 문제는 필터링한 변수와 원본 데이터 변수의 포인터가 서로 같은곳을 바라보고 있어&lt;/p&gt;
&lt;p&gt;원본데이터 자체를 수정하고 있었던 것이었습니다.&lt;/p&gt;
&lt;p&gt;이 문제를 해결하기 위하여 더 자세히 알아봅시다.&lt;/p&gt;
&lt;h5&gt;알아봅시다.&lt;/h5&gt;
&lt;p&gt;자바스크립트의 변수 타입을 불변형과 가변형으로 나눠 보겠습니다.&lt;/p&gt;
&lt;p&gt;원시타입, 참조타입으로 나누기도 하지만, 개념을 따져보면 전부 비슷비슷한 말들입니다.&lt;/p&gt;
&lt;h5&gt;불변형(Primary Type).&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;값을 변경할 수 없다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;String, Number, Boolean&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;값을 변경하기 위하여 다음의 과정을 거친다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;새로운 인스턴스를 생성한다.&lt;/li&gt;
&lt;li&gt;기존의 인스턴스의 포인터를 지운다.&lt;/li&gt;
&lt;li&gt;포인터에 새로운 인스턴스의 주소를 할당한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;null과 undefined는 숫자도 문자도 불리언 값도 아닌 독립적인 값에 속한다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5&gt;테스트 해봅시다.&lt;/h5&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; StringExample &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;맛있는 초꼬렛&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

stringExample&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;맛있는&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;맛없는&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;stringExample&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;다음의 결과값은 무엇이 나올까요?&lt;/p&gt;
&lt;p&gt;여러분께서는 &lt;strong&gt;맛없는&lt;/strong&gt; 초꼬렛을 예상하셨겠지만,&lt;/p&gt;
&lt;p&gt;답은 &lt;strong&gt;맛있는&lt;/strong&gt; 초꼬렛입니다. 풀이를 한번 보죠.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ddalpange.github.io/images/immutable1.png&quot; alt=&quot;immutable1&quot;&gt;&lt;/p&gt;
&lt;p&gt;불변객체(String, Number, Boolean) 등은 그 자체가 값이기 때문에 값을 바꿀 수 없습니다.&lt;/p&gt;
&lt;p&gt;즉 사용자가 볼때 값이 변하는 것은 새로운 인스턴스(값)을 생성하고 포인터를 재할당하는 것 뿐입니다.&lt;/p&gt;
&lt;p&gt;위의 예제에서는 포인터를 재할당하지 않았음으로 stringExample의 값이 바뀌지 않았습니다.&lt;/p&gt;
&lt;p&gt;따라서 &lt;em&gt;&lt;strong&gt;let stringExample2 = stringExample&lt;/strong&gt;&lt;/em&gt; 이라는 명령어를 실행할 때.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;객체와 인스턴스의 관계가 1:1로 형성됩니다.&lt;/strong&gt;&lt;/p&gt;
&lt;h5&gt;가변형(Object Type).&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;값을 변경할 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Array, List, Map&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;값을 변경할 때 인스턴스 자체가 변한다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5&gt;테스트 해봅시다.&lt;/h5&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; arrayExample &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;IU&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;YouAndMe&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; arrayExample2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; arrayExample&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

arrayExample&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;ABCDEFG&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;1 -&gt;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; arrayExample&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;2 -&gt;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; arrayExample2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;다음의 결과값은 무엇이 나올까요?&lt;/p&gt;
&lt;p&gt;1 -&gt; IU ABCDEFG&lt;/p&gt;
&lt;p&gt;2 -&gt; IU ABCDEFG&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ddalpange.github.io/images/immutable2.png&quot; alt=&quot;immutable2&quot;&gt;&lt;/p&gt;
&lt;p&gt;가변객체(Array, List, Map) 등은 값을 변경할 때 기존 변수가 바라보던 인스턴스 자체의 값을 변경합니다.&lt;/p&gt;
&lt;p&gt;따라서 &lt;em&gt;&lt;strong&gt;arrayExample = arrayExample2&lt;/strong&gt;&lt;/em&gt; 명령을 실행한다면&lt;/p&gt;
&lt;p&gt;두 변수가 같은 인스턴스를 바라보는 2 : 1 의 관계를 형성하게 됩니다.&lt;/p&gt;
&lt;p&gt;따라서 하나의 변수에 값을 변경하고자 했을 때 다른 변수의 값도 함께 변화합니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;객체와 인스턴스의 관계가 n:1로 형성됩니다.&lt;/strong&gt;&lt;/p&gt;
&lt;h4&gt;immutable.js&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;페이스북에서 배포한 자바스크립트 라이브러리입니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;기존의 가변형 객체였던 Map, List 등을 불변형으로 쓸 수 있게 해줍니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; immutableMap &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Immutable&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;a&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; c&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; immutableMap2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; immutableMap&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

immutableMap&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;b&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;immutableMap&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;immutableMap2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;다음의 결과값은 무엇이 나올까요 ?&lt;/p&gt;
&lt;p&gt;1 -&gt; “10”, “20”, “30”&lt;/p&gt;
&lt;p&gt;2 -&gt; “10”, “20”, “30”&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ddalpange.github.io/images/immutable3.png&quot; alt=&quot;immutable3&quot;&gt;&lt;/p&gt;
&lt;p&gt;객체의 값이 변경될 때마다 새로운 인스턴스를 생성합니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;객체와 인스턴스의 관계가 1:1로 형성됩니다.&lt;/strong&gt;&lt;/p&gt;
&lt;h4&gt;정리.&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Front에서는 사용자에게 보여줄 값과, 실제 데이터값을 분리할 필요가 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;shouldComponentUpdate같은 중요한 메소드를 사용할 때, 기준이 되는 변수가 함수 A,B를 거쳐왔는지 A,C를 거쳐왔는지 장담할 수 없다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;객체 배열을 Shallow copy 해버린다면 각각의 데이터에 독립성을 보장할 수 없다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Immutable.js, cloneObject 등 Deep copy를 하게된다면 데이터의 독립성을 보장하며, 명시적이며, 유지보수를 쉽게 할 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;!--stackedit_data:
eyJoaXN0b3J5IjpbLTIwODQ0MDU5NTMsMTM0NTc4NTYxMF19
--&gt;</content:encoded></item><item><title><![CDATA[회문 만들기]]></title><description><![CDATA[회문(Palindrome)은 앞/뒤 어느쪽으로 읽어도 같은 말이 되는 어구를 의미한다. 첫번째 문제 Palindrome(이하 회문)은 앞/뒤 어느쪽으로 읽어도 같은 말이 되는 어구를 의미한다. 예) 191, 4325234, 123321, eye…]]></description><link>https://ddalpange.github.io/2017-10-03-algorithm-make-palindrome/</link><guid isPermaLink="false">https://ddalpange.github.io/2017-10-03-algorithm-make-palindrome/</guid><pubDate>Tue, 03 Oct 2017 22:48:09 GMT</pubDate><content:encoded>&lt;p&gt;회문(Palindrome)은 앞/뒤 어느쪽으로 읽어도 같은 말이 되는 어구를 의미한다.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h4&gt;첫번째 문제&lt;/h4&gt;
&lt;p&gt;Palindrome(이하 회문)은 앞/뒤 어느쪽으로 읽어도 같은 말이 되는 어구를 의미한다.&lt;/p&gt;
&lt;p&gt;예) 191, 4325234, 123321, eye&lt;/p&gt;
&lt;p&gt;어떤 수를 받아서 그 수를 뒤집은(reverse) 다음 원래의 수에 더하여 나온 값이 회문이 될 때까지, 뒤집은 수 더하기를 반복하여 회문을 찾는 프로그램을 작성하라.&lt;/p&gt;
&lt;p&gt;예) 입력값 195인 경우&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;195 + 591 = 786
786 + 687 = 1473
1473 + 3741 = 5214
5214 + 4125 = 9339
출력 : 195 4 9339&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5&gt;참고&lt;/h5&gt;
&lt;p&gt;회문을 찾을 수 없는 수도 있다.&lt;/p&gt;
&lt;p&gt;예) 아직 증명되지는 않았지만 196은 회문을 찾을 수 없는 수이다.&lt;/p&gt;
&lt;p&gt;뒤집어 더하는 것을 100번 해도 회문을 찾을 수 없는 경우는 회문이 없다고 가정한다.&lt;/p&gt;
&lt;p&gt;예)&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;195 4 9339
196 is not palindrome&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5&gt;코드&lt;/h5&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token doctype&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;!&lt;/span&gt;&lt;span class=&quot;token doctype-tag&quot;&gt;DOCTYPE&lt;/span&gt; &lt;span class=&quot;token name&quot;&gt;HTML&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;head&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;회문 만들기&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;charset&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;utf-8&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;head&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;input&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;doInputNumber&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&quot;token special-attr&quot;&gt;&lt;span class=&quot;token attr-name&quot;&gt;onclick&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token value javascript language-javascript&quot;&gt;&lt;span class=&quot;token function&quot;&gt;makePalindrome&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Click me&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;result&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;span class=&quot;token language-javascript&quot;&gt;
      window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;makeReverseNumber&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;number&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

      window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;makePalindrome&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; defaultNumber &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;doInputNumber&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; number &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; defaultNumber&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; count &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;count &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; reverseNumber &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;makeReverseNumber&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;number&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; isPalindrome &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; reverseNumber &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; number&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

          &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;isPalindrome&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            result &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;결과 : &quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; defaultNumber &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot; &quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; count &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot; &quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; number
            &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

          &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; sum &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; number &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; reverseNumber&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
          result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; number &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot; + &quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; reverseNumber &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot; = &quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; sum &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&amp;lt;br/&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

          count &lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
          number &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; sum&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;count &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; defaultNumber &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot; is not palindrome&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

        document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;result&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;innerHTML &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; result&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;두번째 문제&lt;/h4&gt;
&lt;p&gt;조소연씨는 다재다능한 사람입니다. 그래서 그녀에게는 친구가 많습니다.
하지만 불행하게도 그녀의 친구들은 다재다능하지 않습니다.
각각의 친구는 2가지 주제에만 관심이 있고 다른 주제로 이야기하는 것을 싫어합니다.
그래서 파티를 개최할 때마다 모두가 즐겁게 파티를 보내려면 어떤 친구를 초대할지가 큰 문제입니다.
조소연씨는 그 동안의 경험으로 초대된 친구 모두가 공통의 흥미 있는 화제가 있을 때 파티를 즐긴다는 것을 알았습니다.&lt;/p&gt;
&lt;p&gt;문자열 배열 first, second가 주어집니다.
조소연씨의 index 번째 친구가 흥미 있는 화제는 first[index] 와 second[index] 입니다.
즐거운 파티가 되려면 초대할 수 있는 친구는 최대 몇 명인지 리턴하세요.&lt;/p&gt;
&lt;p&gt;정의 : 클래스와 함수 정의
Python : InterestingParty
Method : bestInvitation(first, second)&lt;/p&gt;
&lt;p&gt;제약조건
first : 1 부터 50개의 요소를 갖는 배열입니다.
second : first 와 같은 크기의 배열입니다.
first, second 공통 : 각 요소는 1~5개의 문자이며, 각 문자는 영어 소문자입니다.
index 번째 요소 first[index] 와 second[index] 의 내용은 다릅니다.&lt;/p&gt;
&lt;p&gt;입력 / 출력 데이터&lt;/p&gt;
&lt;p&gt;[1]&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;first = [&apos;fishing&apos;, &apos;gardening&apos;, &apos;swimming&apos;, &apos;fishing&apos;]
second = [&apos;hunting&apos;, &apos;fishing&apos;, &apos;fishing&apos;, &apos;biting&apos;]
return : 4&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;[2]&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;first = [&apos;variety&apos;, &apos;diversity&apos;, &apos;loquacity&apos;, &apos;courtesy&apos;]
second = [&apos;talking&apos;, &apos;speaking&apos;, &apos;discussion&apos;, &apos;meeting&apos;]
return : 1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;[3]&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;first = [&apos;snakes&apos;, &apos;programming&apos;, &apos;cobra&apos;, &apos;monty&apos;]
second = [&apos;python&apos;, &apos;python&apos;, &apos;anaconda&apos;, &apos;python&apos;]
return : 3&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;[4]&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;first = [&apos;t&apos;, &apos;o&apos;, &apos;p&apos;, &apos;c&apos;, &apos;o&apos;, &apos;d&apos;, &apos;e&apos;, &apos;r&apos;, &apos;s&apos;, &apos;i&apos;, &apos;n&apos;, &apos;g&apos;, &apos;l&apos;, &apos;e&apos;, &apos;r&apos;, &apos;o&apos;, &apos;u&apos;, &apos;n&apos;, &apos;d&apos;, &apos;m&apos;, &apos;a&apos;, &apos;t&apos;, &apos;c&apos;, &apos;h&apos;, &apos;f&apos;, &apos;o&apos;, &apos;u&apos;, &apos;r&apos;, &apos;n&apos;, &apos;i&apos;]
second = [&apos;n&apos;, &apos;e&apos;, &apos;f&apos;, &apos;o&apos;, &apos;u&apos;, &apos;r&apos;, &apos;j&apos;, &apos;a&apos;, &apos;n&apos;, &apos;u&apos;, &apos;a&apos;, &apos;r&apos;, &apos;y&apos;, &apos;t&apos;, &apos;w&apos;, &apos;e&apos;, &apos;n&apos;, &apos;t&apos;, &apos;y&apos;, &apos;t&apos;, &apos;w&apos;, &apos;o&apos;, &apos;s&apos;, &apos;a&apos;, &apos;t&apos;, &apos;u&apos;, &apos;r&apos;, &apos;d&apos;, &apos;a&apos;, &apos;y&apos;]
return : 6&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5&gt;코드&lt;/h5&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token doctype&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;!&lt;/span&gt;&lt;span class=&quot;token doctype-tag&quot;&gt;DOCTYPE&lt;/span&gt; &lt;span class=&quot;token name&quot;&gt;HTML&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;head&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;즐거운 파티&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;charset&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;utf-8&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;head&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&quot;token special-attr&quot;&gt;&lt;span class=&quot;token attr-name&quot;&gt;onclick&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token value javascript language-javascript&quot;&gt;&lt;span class=&quot;token function&quot;&gt;calculateBestInvitation&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;결과값은 콘솔로보세요.&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;span class=&quot;token language-javascript&quot;&gt;
    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; first &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;fishing&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;gardening&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;swimming&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;fishing&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; second &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;hunting&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;fishing&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;fishing&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;biting&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// var first = [&apos;variety&apos;, &apos;diversity&apos;, &apos;loquacity&apos;, &apos;courtesy&apos;];&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// var second = [&apos;talking&apos;, &apos;speaking&apos;, &apos;discussion&apos;, &apos;meeting&apos;];&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;calculateBestInvitation&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;/* topic마다 count를 세서 최대한이면 출려억 */&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; topicCounts &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; mergedArray &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; first&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;second&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

      mergedArray&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;topic&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; topic_index&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;topicCounts&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;hasOwnProperty&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;topic&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          topicCounts&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;topic&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          topicCounts&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;topic&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

      &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; maximum &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; topicNames &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;topicCounts&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

      topicNames&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;topicName&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; topicName_index&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;topicCounts&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;topicName&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; maximum&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          maximum &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; topicCounts&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;topicName&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;return : &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; maximum&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;


  &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[가장 얇은 지갑 만들기]]></title><description><![CDATA[1만원, 7만원, 11만원, 17만원권의 지폐가 있다. 원하는 액수를 입력하면, 가장 얇은 지갑을 만들 수 있도록, 지폐의 갯수를 최소화 한 구성을 보여주는 프로그램을 작성하시오. 예시 입력값 150000 인 경우 가장 좋은 구성은 7만원 2장…]]></description><link>https://ddalpange.github.io/2017-10-03-algorithm-make-thin-wallet/</link><guid isPermaLink="false">https://ddalpange.github.io/2017-10-03-algorithm-make-thin-wallet/</guid><pubDate>Tue, 03 Oct 2017 22:47:24 GMT</pubDate><content:encoded>&lt;p&gt;1만원, 7만원, 11만원, 17만원권의 지폐가 있다. 원하는 액수를 입력하면, 가장 얇은 지갑을 만들 수 있도록, 지폐의 갯수를 최소화 한 구성을 보여주는 프로그램을 작성하시오.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2&gt;예시&lt;/h2&gt;
&lt;p&gt;입력값 150000 인 경우 가장 좋은 구성은 7만원 2장 1만원 1장으로 총 3장이다.&lt;/p&gt;
&lt;h2&gt;입력 / 출력&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;입력 : 프로그램의 첫번쨰 인자로 숫자를 받는다.&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;입력값에 오류는 없다고 가정한다. 즉, “135000원” 같이 구성 불가능한 입력값은 없다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;별도로 오류처리 해 줄 필요 없음.
2. 출력 : 예) 1만원 X장, 7만원 X장, 11만원 X장, 17만원 X장&lt;/p&gt;
&lt;h2&gt;코드&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token doctype&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;!&lt;/span&gt;&lt;span class=&quot;token doctype-tag&quot;&gt;DOCTYPE&lt;/span&gt; &lt;span class=&quot;token name&quot;&gt;HTML&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;head&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;가장 얇은 지갑 만들기&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;charset&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;utf-8&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;head&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;input&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;money&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;submit&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token special-attr&quot;&gt;&lt;span class=&quot;token attr-name&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token value javascript language-javascript&quot;&gt;&lt;span class=&quot;token function&quot;&gt;createMinimumWallet&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Click me!!&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;result&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;span class=&quot;token language-javascript&quot;&gt;
    &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;createMinimumWallet&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;/* 지폐를 최대한 쓸 수 있는 갯수를 구하여 0부터 순회를 돌아 값을 구하는 로직. */&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;/* 50억 넣을 경우 삑난다 다른 로직 필요함. */&lt;/span&gt;

      &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; min &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;99999&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; defaultMoney &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;money&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

      &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; seventeenMax &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; defaultMoney &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;170000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; seventeenCount &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; seventeenCount &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; seventeenMax &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; seventeenCount&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; money &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; defaultMoney &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; seventeenCount &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;170000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; elevenMax &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; money &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;110000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; elevenCount &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; elevenCount &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; elevenMax&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; elevenCount&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          money &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; defaultMoney &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;seventeenCount &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;170000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;elevenCount &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;110000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; sevenMax &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; money &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;70000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

          &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; sevenCount &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; sevenCount &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; sevenMax&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; sevenCount&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            money &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; defaultMoney &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;seventeenCount &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;170000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;elevenCount &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;110000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;sevenCount &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;70000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; oneCount &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; money &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; sum &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;  seventeenCount &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; elevenCount &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; sevenCount &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; oneCount&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;min &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; sum&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
              min &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; sum&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
              result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;결과: &apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;17만원권, &quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; seventeenCount&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;장 11만원권, &quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; elevenCount&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;장 7만원권, &quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; sevenCount&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;장 1만원권, &quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; oneCount&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;장 총 &quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; sum &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;장&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

          &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;입력하신 값&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; defaultMoney&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;result&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;result&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;innerHTML &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; result&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[순수 함수 (Pure Function)]]></title><description><![CDATA[요즘 힙한 프로그래밍 기법중 하나인 순수함수에 대해 알아보자. 순수함수의 정의 순수 함수(pure function)는 순수 입력과 순수 출력으로 구성되어 있다. 즉 순수 함수는 부수 효과(Side-Effect…]]></description><link>https://ddalpange.github.io/2017-10-03-js-pureFunc/</link><guid isPermaLink="false">https://ddalpange.github.io/2017-10-03-js-pureFunc/</guid><pubDate>Tue, 03 Oct 2017 22:46:56 GMT</pubDate><content:encoded>&lt;p&gt;요즘 힙한 프로그래밍 기법중 하나인 순수함수에 대해 알아보자.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h3&gt;순수함수의 정의&lt;/h3&gt;
&lt;p&gt;순수 함수(pure function)는 순수 입력과 순수 출력으로 구성되어 있다. 즉 순수 함수는 부수 효과(Side-Effect)가 없는 함수이다. 사이드 이펙트가 없다면 함수는 언제, 어디서나, 몇번이든 동일한 출력을 갖는다. 즉 똑같은 입력값에 대하여 똑같은 출력값을 돌려주는 것 의외에 다른 기능은 하지 않아야 한다. 이런 개념을 참조 투명성이라고 한다.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;부수효과 (Side Effect)&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;함수의 입력 -&gt; 실행 -&gt; 출력 과정에서 외부에 있는 어떠한 것에 의해 함수의 출력값이 바뀌는 것을 의미한다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;참조 투명성 (referential transparency, RT)&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;모든 프로그램에 대해 어떤 표현식(expression) e를 모두 그 표현식의 결과로 치환해도 프로그램에 아무 영향이 없다면 그 표현식 e는 참조에 투명하다(referentially transparent).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; outside &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;F&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; inside &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; outside &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; inside&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token constant&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위의 함수는 순수 함수가 아니다. 함수의 외부스코프에있는 &lt;code class=&quot;language-text&quot;&gt;outside&lt;/code&gt;의 값이 변하면 &lt;code class=&quot;language-text&quot;&gt;F(5)&lt;/code&gt;의 값도 같이 변하기 때문이다.&lt;/p&gt;
&lt;p&gt;만약 &lt;code class=&quot;language-text&quot;&gt;outside&lt;/code&gt;가 &lt;code class=&quot;language-text&quot;&gt;var&lt;/code&gt;가 아닌 &lt;code class=&quot;language-text&quot;&gt;const&lt;/code&gt;로 선언되었다면 함수 F는 순수 함수라 할 수 있다. 외부 변수인 &lt;code class=&quot;language-text&quot;&gt;outside&lt;/code&gt;는 읽기 전용이며, 값이 바뀔 염려가 없기 때문이다.&lt;/p&gt;
&lt;h3&gt;순수함수의 장점은 무엇인가?&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;모듈성
로직 처리에 쓰이는 모든 변수를 파라미터로 받는다면, 함수의 모듈성은 크게 증가한다. 한 클래스의 메소드를 다른 클래스에서 다른 쪽에서 쓸 일이 생긴다면, 공통유틸에 이동하기만 하면 되기 때문이다.&lt;/li&gt;
&lt;li&gt;테스트
함수에서 로직을 처리할 때 모든 것을 &lt;code class=&quot;language-text&quot;&gt;this&lt;/code&gt; 에서 참조한다고 가정할 때 클래스가 커지면 전역 프로퍼티의 흐름을 알 수 없기 때문에, 디버깅이 매우 어렵다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;의문을 가져보자.&lt;/h3&gt;
&lt;p&gt;** 입력값에 영향을 준다면 그것은 순수함수라고 할 수 있는가? **&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; test &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;world&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; string &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;hello&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;string&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// &apos;hello world&apos;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;string&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// &apos;hello&apos;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;test2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; array&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;world&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; array &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;hello&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;array&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos; &apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// &apos;hello world&apos;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;array&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos; &apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// &apos;hello world&apos;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위의 함수는 함수에 파라미터로 전달한 &lt;code class=&quot;language-text&quot;&gt;string&lt;/code&gt; 변수의 값이 함수 &lt;code class=&quot;language-text&quot;&gt;test&lt;/code&gt;를 실행한 후에도 영향을 받지 않았지만, 아래 예제의 &lt;code class=&quot;language-text&quot;&gt;array&lt;/code&gt;는 입력 변수의 값이 바뀌어 버렸다.
기본적으로 자바스크립트에서 &lt;code class=&quot;language-text&quot;&gt;string&lt;/code&gt;은 불변 객체이고, &lt;code class=&quot;language-text&quot;&gt;array&lt;/code&gt;는 가변 객체이기 때문이다. 생각해보자. &lt;code class=&quot;language-text&quot;&gt;test2&lt;/code&gt; 함수는 &lt;strong&gt;순수 함수라고 할 수 있는가?&lt;/strong&gt; (사내 스터디중 경력자 분께 직접 물어본 질문이다.)&lt;/p&gt;
&lt;p&gt;경력자분은 “순수함수라 할 수 있다.” 라고 대답하셨다. 순수 함수에서 입력값의 변화에 관한건 정의가 되어있지 않기 때문에, 입력값의 변경 여부는 순수함수와는 거리가 멀다는 의견이었다.
하지만 내 생각은 좀 다르다. 인풋으로 들어간 값이 불변이 아니라 가변이여서 함수를 호출할 때마다 바뀐다면, 함수를 매번 호출할때마다 값이 다르게 나올 것이다. 특히 멀티 스레드나 멀티 프로세싱과 같이 한 데이터를 동시에 병렬처리를 진행한다면, 원하지 않는 값이 매번 도출될 것이다.&lt;/p&gt;
&lt;p&gt;그래서 파라미터로 넘겨준 값은 함수가 실행된 후에도 변하지 않아야 한다는게 내 생각이다.&lt;/p&gt;
&lt;p&gt;최종적으로 순수함수에 대해 정의를 내려보자면 &lt;em&gt;&lt;strong&gt;순수함수는 부수효과가 없으며 입력값이 같으면 동일한 출력값을 내뱉고 입력값에 영향을 주지 않는 함수이다.&lt;/strong&gt;&lt;/em&gt; 라고 할 수 있겠다.&lt;/p&gt;
&lt;!--stackedit_data:
eyJoaXN0b3J5IjpbMTE4MTA2MTIzMCw4MzcwODcyMjddfQ==
--&gt;</content:encoded></item><item><title><![CDATA[임포트와 익스포트]]></title><description><![CDATA[자바스크립트 프로젝에서 상수를 관리하기 위한 방법을 설명하는 글. Import, Export 기존 프로젝트 유지보수를 진행하다 보면 “AS2034…]]></description><link>https://ddalpange.github.io/2017-10-03-js-import-export/</link><guid isPermaLink="false">https://ddalpange.github.io/2017-10-03-js-import-export/</guid><pubDate>Tue, 03 Oct 2017 22:46:44 GMT</pubDate><content:encoded>&lt;p&gt;자바스크립트 프로젝에서 상수를 관리하기 위한 방법을 설명하는 글.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h3&gt;Import, Export&lt;/h3&gt;
&lt;p&gt;기존 프로젝트 유지보수를 진행하다 보면 “AS20342”과 같은 특정한 코드값들이 있다. 그러한 코드값들은 전부 공통으로 모아 상수로 빼는게 상책인데, import, export를 어떻게 해야할지 감이 오질 않았다. 아래 내용은 공통함수를 뺄때까지의 과정이다.&lt;/p&gt;
&lt;h4&gt;1. Obejct형태로 Export한다.&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; obj &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;ddalpange&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  password&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;123456&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; obj&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;-&gt; 나쁘지 않은 방법이다. 하지만 오브젝트를 const로 선언한다면 오브젝트의 프로퍼티 값은 const가 아니기 때문에 obj.name  = “puppy”와 같이 값 자체를 바꿀 수 있다. 엄밀히 따지자면 상수가 아닌 셈이다. (Object.freeze()라는 것을 사용하면 될 수도 ??)&lt;/p&gt;
&lt;h4&gt;2. Class 형태로 Export한다.&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;obj &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;name&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;ddalpange&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;keyName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;obj&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;hasOwnProperty&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;keyName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;obj&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;keyName&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;-&gt; 이상하다. 그저 변수 하나를 뺴기 위하여 클래스를 선언한다는 것은 값어치가 없는 일이다.&lt;/p&gt;
&lt;h4&gt;3. const 선언을 할 떄 마다 export를 붙여준다.&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; c &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;3&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;-&gt; 이 방법이 제일 좋은 방법인 것 같다. 하지만 위의 방법으로 Export하여 사용할려면 Import의 방식이 다르다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;Import &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; test from &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;SRC&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위와 같이 Import하면 test.a, test.b 와 같이 접근할 수 있다.&lt;/p&gt;
&lt;p&gt;test라는 오브젝트의 프로퍼티에 접근한다고 생각하면 쉬울 듯 하다 :)&lt;/p&gt;
&lt;p&gt;별것 아닌것 같아 보이지만 찾느라 고생을 많이 한 것 같다.&lt;/p&gt;
&lt;p&gt;프로젝트 폴더구조가 알아보기 쉽지않고, import, export 경로 찾기도 매우 어려운데&lt;/p&gt;
&lt;p&gt;나중에 폴더마다 index.js를 만들어 import하기 쉽게 만들어야겠다.&lt;/p&gt;
&lt;!--stackedit_data:
eyJoaXN0b3J5IjpbLTI0MTU5NTUyNF19
--&gt;</content:encoded></item><item><title><![CDATA[아이오닉 postCss 에러]]></title><description><![CDATA[메모만들기 2 포스트가 잘 되는지 확인할려고 처음부터 다시 하던 도중, ionic의 기본 css…]]></description><link>https://ddalpange.github.io/2017-10-03-ionic-postcss-error/</link><guid isPermaLink="false">https://ddalpange.github.io/2017-10-03-ionic-postcss-error/</guid><pubDate>Tue, 03 Oct 2017 22:46:29 GMT</pubDate><content:encoded>&lt;p&gt;&lt;a href=&quot;https://ddalpange.github.io/2017/07/11/%EA%B0%84%EB%8B%A8%ED%95%9C-%EB%A9%94%EB%AA%A8%EC%9E%A5-%EB%A7%8C%EB%93%A4%EA%B8%B0-2/&quot;&gt;메모만들기 2&lt;/a&gt; 포스트가 잘 되는지 확인할려고 처음부터 다시 하던 도중, ionic의 기본 css가 적용되지 않는 문제가 발생하였다.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;&lt;img src=&quot;/images/ionic/postCssError.png&quot; alt=&quot;문제 화면&quot;&gt;&lt;/p&gt;
&lt;p&gt;흐음 .. 처음 실행하는 것이니 웹팩의 설정에 잘못된게 있을리 없다. 그래서 콘솔창을 유심히 살펴보았다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/ionic/postCssConsole.png&quot; alt=&quot;문제 콘솔&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Your current PostCSS version is 5.2.17, but autoprefixer uses 6.0.8. Perhaps this is the source of the error below.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;당신의 postcss 버전은 5.2.17이다. 하지만 autoprefixer는 6.0.8을 요구하는데, 이건 아마 당신의 소스에 문제를 발생시킬 것이다. 가만히 있던 postcss가 문제일리는 없고, ionic팀에서 버전업데이트를 할 때 예상치 못한 에러가 발생한듯 하다. 그래서 검색을 해서 해결법을 찾았다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/ionic-team/ionic/issues/12441&quot;&gt;https://github.com/ionic-team/ionic/issues/12441&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;프로젝트의 @ionic/app-scripts를 1.3.7 버전으로 다운그레이드 하면 된다.&lt;/p&gt;
&lt;p&gt;변경 전&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;ddalpange-memo&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;0.0.1&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&quot;author&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Ionic Framework&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&quot;homepage&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;http://ionicframework.com/&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&quot;private&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&quot;dependencies&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&quot;devDependencies&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;@ionic/app-scripts&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;2.0.2&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;@ionic/cli-plugin-ionic-angular&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;1.3.2&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;typescript&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;2.4.2&quot;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;An Ionic project&quot;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;변경 후&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;ddalpange-memo&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;0.0.1&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&quot;author&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Ionic Framework&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&quot;homepage&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;http://ionicframework.com/&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&quot;private&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&quot;dependencies&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&quot;devDependencies&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;@ionic/app-scripts&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;1.3.7&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;@ionic/cli-plugin-ionic-angular&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;1.3.2&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;typescript&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;2.4.2&quot;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;An Ionic project&quot;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;package.json (루트폴더에 위치)에  “@ionic/app-scripts”: “1.3.7” 버전으로 수정한 후 패키지를 지우고, 다시 깐다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; uninstall @ionic/app-scripts
$ &lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; @ionic/app-scripts&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;실행한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ionic serve&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/images/ionic/postCssComplete.png&quot; alt=&quot;해결 완료&quot;&gt;&lt;/p&gt;
&lt;p&gt;해결 완료. 나중에 ionic팀에서 이 문제를 해결해 준다면 다시 업그레이드 하도록 한다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Firebase 배포]]></title><description><![CDATA[Firebase 호스팅은 개발자를 위한 프로덕션 등급 웹 콘텐츠 호스팅 서비스입니다. Firebase 호스팅을 사용하면 한 번의 명령으로 웹 앱과 정적 콘텐츠를 글로벌 콘텐츠 전송 네트워크(CDN…]]></description><link>https://ddalpange.github.io/2017-10-03-firebase-deploy/</link><guid isPermaLink="false">https://ddalpange.github.io/2017-10-03-firebase-deploy/</guid><pubDate>Tue, 03 Oct 2017 22:45:54 GMT</pubDate><content:encoded>&lt;p&gt;Firebase 호스팅은 개발자를 위한 프로덕션 등급 웹 콘텐츠 호스팅 서비스입니다. Firebase 호스팅을 사용하면 한 번의 명령으로 웹 앱과 정적 콘텐츠를 글로벌 콘텐츠 전송 네트워크(CDN)에 빠르고 손쉽게 배포할 수 있습니다.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h3&gt;주요기능&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;제목&lt;/th&gt;
&lt;th&gt;설명&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;보안 연결을 통해 제공&lt;/td&gt;
&lt;td&gt;오늘날의 웹에서 가장 중요한 과제는 바로 보안입니다. Firebase 호스팅은 별도의 구성 없이 SSL을 기본적으로 제공하여 콘텐츠를 항상 안전하게 전송합니다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;빠른 콘텐츠 전송&lt;/td&gt;
&lt;td&gt;업로드하는 각 파일이 전 세계 CDN 에지의 SSD에 캐싱되므로 사용자가 어디에 있든 빠르게 콘텐츠를 전달합니다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;신속한 배포&lt;/td&gt;
&lt;td&gt;Firebase CLI가 불과 몇 초만에 앱을 궤도에 올려 드립니다. 명령줄 도구로 빌드 프로세스에 배포 타겟을 손쉽게 추가할 수 있습니다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;클릭 한 번으로 롤백&lt;/td&gt;
&lt;td&gt;빠른 배포도 좋지만 실수를 빠르게 되돌릴 수 있다면 더 좋을 것입니다. Firebase 호스팅은 완벽한 버전 관리 및 릴리스 관리를 제공하며 클릭 한 번으로 롤백이 가능합니다.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;작동원리&lt;/h3&gt;
&lt;p&gt;Firebase 호스팅은 최신형 웹 개발자를 위해 개발되었습니다. Angular 등의 프런트 엔드 JavaScript 프레임워크 및 Jekyll 등의 정적 생성기 도구가 부상하면서 정적 사이트의 기능이 점점 커지고 있습니다. 간단한 앱 방문 페이지를 배포하든 복잡한 미래형 웹 앱을 배포하든, Firebase 호스팅은 정적 웹사이트를 배포하고 관리하는 데 특화된 인프라, 기능, 도구를 제공합니다.&lt;/p&gt;
&lt;p&gt;Firebase 호스팅은 프로젝트에 firebaseapp.com 도메인의 하위 도메인을 제공합니다. Firebase CLI를 사용하여 컴퓨터의 로컬 디렉토리에 있는 파일을 호스팅 서버에 배포할 수 있습니다. 이러한 파일은 글로벌 CDN 중 사용자와 가장 가까운 에지 서버로부터 SSL 연결을 통해 제공됩니다.&lt;/p&gt;
&lt;p&gt;Firebase 호스팅은 정적 콘텐츠 호스팅뿐 아니라 정교한 미래형 웹 앱을 개발하는 데 필요한 간단한 구성 옵션을 제공합니다. 개발자는 손쉽게 클라이언트측 라우팅 URL을 수정하거나 맞춤 헤더를 설정할 수 있습니다.&lt;/p&gt;
&lt;p&gt;사이트를 프로덕션 단계로 운영할 준비가 끝났으면 자체 도메인 이름을 Firebase 호스팅에 연결할 수 있습니다. 도메인의 SSL 인증서가 자동으로 발급되므로 모든 콘텐츠가 안전하게 제공됩니다.&lt;/p&gt;
&lt;h3&gt;시작&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; -g firebase-tools&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Firebase CLI를 글로벌환경에 인스톨해주세요.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ firebase login
? Allow Firebase to collect anonymous CLI usage information? Yes

Visit this URL on any device to log in:
https://accounts.google.com/o/oauth2/auth?client_id&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;563584335869&lt;/span&gt;-fgrhgmd47bqnekij5i8b5pr03ho849e6.apps.googleusercontent
.com&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token assign-left variable&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;email%20openid%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fcloudplatformprojects.readonly%20https%3A%2F%2Fwww
.googleapis.com%2Fauth%2Ffirebase%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fcloud-platform&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token assign-left variable&quot;&gt;response_type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;code&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token assign-left variable&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;27&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;2873884&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token assign-left variable&quot;&gt;redirect_uri&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;http%3A%2F%2Flocalhost%3A9005

Waiting &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; authentication&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.

+  Success&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt; Logged &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; as ddalpange@gmail.com&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Allow Firebase to collect anonymous CLI usage information?
파이어베이스가 당신의 CLI 사용정보를 익명으로 수집하는데 동의하시겠습니까? 라는 의미입니다.
Y를 입력하고 나면 웹페이지 창으로 구글 로그인이 뜰겁니다. 로그인해주세요.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/firebaseLoginSuccessful.png&quot; alt=&quot;로그인 성공 화면&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ firbase init&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;파이어베이스 프로젝트를 초기화합니다. 이 명령어를 실행하고 나면 firebase.json이라는 파일이 생길거에요.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&quot;hosting&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;public&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;www&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 업로드될 폴더의 경로입니다.&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;ignore&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;token string&quot;&gt;&quot;firebase.json&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token string&quot;&gt;&quot;**/.*&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token string&quot;&gt;&quot;**/node_modules/**&quot;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;저같은 경우는 아이오닉 프로젝트를 호스팅할것이기 때문에 “www” 폴더를 썼습니다 보통이면 “public”폴더를 써야겠죠 ?.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ionic build&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;서비스를 빌드한 후&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ firebase deploy&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://ddalpange.github.io/images/deploy-error.png&quot; alt=&quot;de1&quot;&gt;&lt;/p&gt;
&lt;p&gt;어떤 파이어베이스 프로젝트를 배포할 것인지 정해주지 않아서 나는 에러입니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ firebase use --add&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;파이어베이스 프로젝트를 추가해주신 후 다시 실행해주세요.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ firebase deploy&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://ddalpange.github.io/images/deploy-complete.png&quot; alt=&quot;de2&quot;&gt;&lt;/p&gt;
&lt;p&gt;완료되었습니다!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://cacaotalk-d32be.firebaseapp.com/#/friend/list&quot;&gt;https://cacaotalk-d32be.firebaseapp.com/#/friend/list&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://YOUR_PROJECT_ID.firebase.app.com&quot;&gt;https://YOUR_PROJECT_ID.firebase.app.com&lt;/a&gt; 으로 들어가보세요 ~&lt;/p&gt;
&lt;h3&gt;정리&lt;/h3&gt;
&lt;p&gt;별도의 웹서버를 올리기 귀찮을 때 파이어베이스 호스팅 서비스는 그 대안이 될 수 있습니다. 별도의 웹서버, 호스팅 관리 서비스를 이용하지 않고 단순한 설정만으로 무료로 쓸 수 있는 웹서버가 생긴다는 것은 굉장한 장점이죠.&lt;/p&gt;
&lt;p&gt;그러나 파이어베이스 호스팅서비스를 실제 서비스로 운용하기에는 아직 미숙한점이 많습니다. 그 대표적인 예로 버전관리의 부재이죠. (배포기록과, 해당 배포버전으로 돌아갈 수 있는 롤백기능을 제공하긴 합니다. 하지만 그 두 기능만으론 부족합니다.)&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Angular + Firebase 퀵 스타트]]></title><description><![CDATA[에서 를 사용하기 위한 방법을 설명합니다. 앵귤러. 사전 환경 세팅 명령을 실행하기 전에, node -v, npm -v 명령어로 노드는 6.9.x 버전인지, npm은 3.x.x…]]></description><link>https://ddalpange.github.io/2017-10-03-firebase-angular-start/</link><guid isPermaLink="false">https://ddalpange.github.io/2017-10-03-firebase-angular-start/</guid><pubDate>Tue, 03 Oct 2017 22:45:44 GMT</pubDate><content:encoded>&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Angular&lt;/code&gt;에서 &lt;code class=&quot;language-text&quot;&gt;Firebase&lt;/code&gt;를 사용하기 위한 방법을 설명합니다.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h4&gt;앵귤러.&lt;/h4&gt;
&lt;h5&gt;사전 환경 세팅&lt;/h5&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;makefile&quot;&gt;&lt;pre class=&quot;language-makefile&quot;&gt;&lt;code class=&quot;language-makefile&quot;&gt;npm install -g &lt;span class=&quot;token operator&quot;&gt;@&lt;/span&gt;angular/cli&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;명령을 실행하기 전에, &lt;em&gt;&lt;strong&gt;node -v&lt;/strong&gt;&lt;/em&gt;, &lt;em&gt;&lt;strong&gt;npm -v&lt;/strong&gt;&lt;/em&gt; 명령어로 노드는 6.9.x 버전인지, npm은 3.x.x 버전인지 확인하세요. 구버전은 에러를 일으킬 수 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5&gt;프로젝트를 만드세요.&lt;/h5&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;makefile&quot;&gt;&lt;pre class=&quot;language-makefile&quot;&gt;&lt;code class=&quot;language-makefile&quot;&gt;ng new angular-firebase&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;참을성을 가지세요. 대부분의 시간은 npm package들을 인스톨 하는데에 쓰입니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5&gt;프로젝트를 실행하세요.&lt;/h5&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;makefile&quot;&gt;&lt;pre class=&quot;language-makefile&quot;&gt;&lt;code class=&quot;language-makefile&quot;&gt;cd angular-firebase
ng serve --open&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;ng serve&lt;/strong&gt;&lt;/em&gt;는 서버를 올리기 위한 명령어입니다. 당신들의 파일을 주시하며, 변경이 있을때마다 앱을 다시 빌드합니다. &lt;em&gt;&lt;strong&gt;—open (또는 -o)&lt;/strong&gt;&lt;/em&gt; 옵션은 자동으로 당신의 브라우저로 켜주는 명령어입니다. (&lt;a href=&quot;http://localhost:4200/&quot;&gt;http://localhost:4200/&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5&gt;파일구조를 살펴봅시다.&lt;/h5&gt;
&lt;h6&gt;Src Folder&lt;/h6&gt;
&lt;p&gt;&lt;em&gt;src&lt;/em&gt; 폴더 안에 모든 Angular의 컴포넌트, 탬플릿, Css, 이미지 그리고 당신의 앱을 만들기 위해 필요한 것이 들어갑니다. 그 외 다른 바깥쪽 폴더들은 당신의 앱을 빌드하기 위해 필요한 것들이 들어있습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;src
    app
        app.component.css
        app.component.html
        app.component.spec.ts
        app.component.ts
        app.module.ts
    assets
        .gitkeep
    environments
        environment.prod.ts
        environment.ts
favicon.ico
index.html
main.ts
polyfills.ts
styles.css
test.ts
tsconfig.app.json
tsconfig.spec.json&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;File&lt;/th&gt;
&lt;th&gt;Purpose&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;app/app.component.{ts,html,css,spec.ts}&lt;/td&gt;
&lt;td&gt;Defines the AppComponent along with an HTML template, CSS stylesheet, and a unit test. It is the root component of what will become a tree of nested components as the application evolves.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;app/app.module.ts&lt;/td&gt;
&lt;td&gt;Defines AppModule, the root module that tells Angular how to assemble the application. Right now it declares only the AppComponent. Soon there will be more components to declare.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;assets/*&lt;/td&gt;
&lt;td&gt;A folder where you can put images and anything else to be copied wholesale when you build your application.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;environments/*&lt;/td&gt;
&lt;td&gt;This folder contains one file for each of your destination environments, each exporting simple configuration variables to use in your application. The files are replaced on-the-fly when you build your app. You might use a different API endpoint for development than you do for production or maybe different analytics tokens. You might even use some mock services. Either way, the CLI has you covered.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;favicon.ico&lt;/td&gt;
&lt;td&gt;Every site wants to look good on the bookmark bar. Get started with your very own Angular icon.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;index.html&lt;/td&gt;
&lt;td&gt;The main HTML page that is served when someone visits your site. Most of the time you’ll never need to edit it. The CLI automatically adds all js and css files when building your app so you never need to add any &amp;#x3C;script&gt; or &amp;#x3C;link&gt; tags here manually.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;main.ts&lt;/td&gt;
&lt;td&gt;The main entry point for your app. Compiles the application with the JIT compiler and bootstraps the application’s root module (AppModule) to run in the browser. You can also use the AOT compiler without changing any code by passing in —aot to ng build or ng serve.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;polyfills.ts&lt;/td&gt;
&lt;td&gt;Different browsers have different levels of support of the web standards. Polyfills help normalize those differences. You should be pretty safe with core-js and zone.js, but be sure to check out the Browser Support guide for more information.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;styles.css&lt;/td&gt;
&lt;td&gt;Your global styles go here. Most of the time you’ll want to have local styles in your components for easier maintenance, but styles that affect all of your app need to be in a central place.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;test.ts&lt;/td&gt;
&lt;td&gt;This is the main entry point for your unit tests. It has some custom configuration that might be unfamiliar, but it’s not something you’ll need to edit&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tsconfig.app.json, tsconfig.spec.json&lt;/td&gt;
&lt;td&gt;TypeScript compiler configuration for the Angular app (tsconfig.app.json) and for the unit tests (tsconfig.spec.json).&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h6&gt;The Root Folder&lt;/h6&gt;
&lt;p&gt;The src/ folder is just one of the items inside the project’s root folder. Other files help you build, test, maintain, document, and deploy the app. These files go in the root folder next to src/.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;my-app
    e2e
        app.e2e-spec.ts
        app.po.ts
        tsconfig.e2e.json
node_modules/...
src/...
.angular-cli.json
.editorconfig
.gitignore
karma.conf.js
package.json
protractor.conf.js
README.md
tsconfig.json
tslint.json&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;File&lt;/th&gt;
&lt;th&gt;Purpose&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;e2e/&lt;/td&gt;
&lt;td&gt;Inside e2e/ live the End-to-End tests. They shouldn’t be inside src/ because e2e tests are really a separate app that just so happens to test your main app. That’s also why they have their own tsconfig.e2e.json.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;node_modules/&lt;/td&gt;
&lt;td&gt;Node.js creates this folder and puts all third party modules listed in package.json inside of it.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;.angular-cli.json&lt;/td&gt;
&lt;td&gt;Configuration for Angular CLI. In this file you can set several defaults and also configure what files are included when your project is build. Check out the official documentation if you want to know more.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;.edtorconfig&lt;/td&gt;
&lt;td&gt;Simple configuration for your editor to make sure everyone that uses your project has the same basic configuration. Most editors support an .editorconfig file. See &lt;a href=&quot;http://editorconfig.org&quot;&gt;http://editorconfig.org&lt;/a&gt; for more information.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;.gitignore&lt;/td&gt;
&lt;td&gt;Git configuration to make sure autogenerated files are not commited to source control.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;karma.conf.js&lt;/td&gt;
&lt;td&gt;Unit test configuration for the Karma test runner, used when running ng test.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;package.json&lt;/td&gt;
&lt;td&gt;npm configuration listing the third party packages your project uses. You can also add your own custom scripts here.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;protractor.config.js&lt;/td&gt;
&lt;td&gt;End-to-end test configuration for Protractor, used when running ng e2e.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;README.md&lt;/td&gt;
&lt;td&gt;Basic documentation for your project, pre-filled with CLI command information. Make sure to enhance it with project documentation so that anyone checking out the repo can build your app!&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tsconfig.json&lt;/td&gt;
&lt;td&gt;TypeScript compiler configuration for your IDE to pick up and give you helpful tooling.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tslint.json&lt;/td&gt;
&lt;td&gt;Linting configuration for TSLint together with Codelyzer, used when running ng lint. Linting helps keep your code style consistent.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;파이어베이스&lt;/h4&gt;
&lt;h5&gt;파이어베이스 깔아주세요&lt;/h5&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;npm install angularfire2 firebase --save&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/angular/angularfire2&quot;&gt;https://github.com/angular/angularfire2&lt;/a&gt;&lt;/p&gt;
&lt;h5&gt;파이어베이스 프로젝트를 만들어주세요.&lt;/h5&gt;
&lt;p&gt;&lt;a href=&quot;https://console.firebase.google.com/project/angular-test-146ca/database/data/items?hl=ko&quot;&gt;https://console.firebase.google.com/project/angular-test-146ca/database/data/items?hl=ko&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;웹앱으로 시작하기 버튼 누르면 나오는 설정코드 복사해주세요.&lt;/p&gt;
&lt;h5&gt;파이어베이스 세팅해주세요.&lt;/h5&gt;
&lt;p&gt;enviroment.prod.ts&lt;/p&gt;
&lt;p&gt;enviroment.ts&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;/* before */&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; environment &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  production&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;/* after */&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; environment &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  production&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  firebase&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    apiKey&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;blbabasdfsdf&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    authDomain&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;sdfsdfsdf.firebaseapp.com&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    databaseURL&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;https://bababa.firebaseio.com&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    projectId&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;sdfsdf&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    storageBucket&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;sdfsdf&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    messagingSenderId&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;123324345345&apos;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5&gt;모듈 추가해주시구요&lt;/h5&gt;
&lt;p&gt;app.module.ts&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; environment &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./../environments/environment&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; BrowserModule &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;@angular/platform-browser&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; NgModule &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;@angular/core&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; AppComponent &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./app.component&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; FirebaseTestComponent &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./firebase-test/firebase-test.component&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; AngularFireModule &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;angularfire2&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; AngularFireDatabaseModule &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;angularfire2/database&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; AngularFireAuthModule &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;angularfire2/auth&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;


&lt;span class=&quot;token decorator&quot;&gt;&lt;span class=&quot;token at operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;NgModule&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  declarations&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
    AppComponent&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    FirebaseTestComponent
  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  imports&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
    BrowserModule&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    AngularFireModule&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;initializeApp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;environment&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;firebase&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    AngularFireDatabaseModule&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    AngularFireAuthModule
  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  providers&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  bootstrap&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;AppComponent&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;AppModule&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5&gt;테스트하기전에 먼저&lt;/h5&gt;
&lt;p&gt;파이어베이스 프로젝트 -&gt; 리얼타임데이터베이스 -&gt; 규칙 가서&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&quot;rules&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;.read&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;.write&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;true&quot;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이렇게 바꿔야합니다. 따로 인증을 받았지 않았기 때문에 에러납니다.&lt;/p&gt;
&lt;h5&gt;테스트 해봅시다.&lt;/h5&gt;
&lt;p&gt;template&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;ul&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;text&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;*ngFor&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;let item of items | async&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    {{item.$value}}
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;ul&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; Component&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; OnInit &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;@angular/core&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; AngularFireDatabase&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; FirebaseListObservable &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;angularfire2/database&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token decorator&quot;&gt;&lt;span class=&quot;token at operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Component&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  selector&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;app-firebase-test&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  templateUrl&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./firebase-test.component.html&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  styleUrls&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;./firebase-test.component.css&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;FirebaseTestComponent&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;OnInit&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  items&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; FirebaseListObservable&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; _db&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; AngularFireDatabase&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
를
  &lt;span class=&quot;token function&quot;&gt;ngOnInit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;items &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_db&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;/items&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;items&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;안녕하세요 ?&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;새로고침할때마다 안녕하세요 ? 가 추가되는 것을 볼 수 있습니다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Firebase??]]></title><description><![CDATA[모바일 앱 개발 백엔드 서비스를 제공하는 Baas(Backend as a Service) 플랫폼으로 사용자 관리, 푸쉬 알림, 데이터베이스 등 미리 개발된 백엔드 기능을 API…]]></description><link>https://ddalpange.github.io/2017-10-03-firebase/</link><guid isPermaLink="false">https://ddalpange.github.io/2017-10-03-firebase/</guid><pubDate>Tue, 03 Oct 2017 22:45:34 GMT</pubDate><content:encoded>&lt;p&gt;모바일 앱 개발 백엔드 서비스를 제공하는 Baas(Backend as a Service) 플랫폼으로 사용자 관리, 푸쉬 알림, 데이터베이스 등 미리 개발된 백엔드 기능을 API 형태로 제공하여 백엔드 단의 개발에 드는 비용 및 시간을 최소화하고 앱 개발자가 프론트엔드 개발에 더 집중할 수 있도록 도와줍니다.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;&lt;img src=&quot;/images/firebaseConsole.png&quot; alt=&quot;파이어베이스 콘솔&quot;&gt;&lt;/p&gt;
&lt;h3&gt;기능들&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;title&lt;/th&gt;
&lt;th&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Cloud Messaging&lt;/td&gt;
&lt;td&gt;클라우드나 앱 서버에서 기기로 메시지를 무료로 전달하는 메세징 솔루션으로 업스트림 및 다운스트림 형식을 모두 지원합니다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Authentication&lt;/td&gt;
&lt;td&gt;Firebase 콘솔에서 선호하는 로그인 방법을 선택한 후 앱에 Google Firebase SDK를 추가하여 앱 사용자 인증 시스템 전체를 간편하게 빠르게 구축합니다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Realtime Database&lt;/td&gt;
&lt;td&gt;Firebase의 NoSQL 클라우드 데이터베이스에 데이터를 실시간으로 보관 및 동기화 합니다. 네트워크 연결이 끊어질 경우 SDK가 기기의 로컬 캐쉬에 데이터를 저장하며 다시 연결되면 자동으로 동기화 합니다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Storage&lt;/td&gt;
&lt;td&gt;사용자가 생산해낸 콘텐츠(사진, 동영상 등)를 Storage API를 통해서 Google Firebase 클라우드에 저장하며 다른 사용자와 공유할 수 있도록 합니다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Hosting&lt;/td&gt;
&lt;td&gt;글로벌 콘텐츠 전송 네트워크(CDN)에 SSD로 파일을 캐시하여 웹 앱을 위한 빠르고 안전한 정적 웹 호스팅을 제공합니다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Remote Config&lt;/td&gt;
&lt;td&gt;앱을 재배포하지 않고도 앱 내의 주요 변수들을 변경하여 업데이트하고, 원하는 사용자 그룹에 A/B 테스트를 합니다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Test Lab&lt;/td&gt;
&lt;td&gt;테스트랩은 구글 데이터 센터에 있는 실제 모바일 기기를 통해서 앱을 테스트합니다 (Andorid만 가능)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Crash Reporting&lt;/td&gt;
&lt;td&gt;앱 사용 중 발생된 충돌 정보를 Google Firebase 대쉬보드에 전송합니다. 대쉬보드에서는 충돌에 대한 스택트레이스, 기기 종류, OS, 앱 버전 및 최근 로그 메시지를 확인할 수 있습니다.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;부가기능들&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;title&lt;/th&gt;
&lt;th&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Notifications&lt;/td&gt;
&lt;td&gt;Firebase Cloud Messaging 기능으로 구현되며 Google Firebase 알림 콘솔 GUI를 통해서 Firebase Analytics에서 정의된 사용자 그룹의 Android 및 iOS 기기에 알림을 보낼 수 있습니다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;App Indexing&lt;/td&gt;
&lt;td&gt;사용자가 기기에서 검색한 검색어가 앱과 연관성이 높다면, 구글 검색 결과에 앱을 노출시켜 검색 결과에서 바로 앱을 시작하도록 합니다. 만약 앱이 설치되지 않은 경우 앱 설치 카드가 나타납니다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Dynamic Links&lt;/td&gt;
&lt;td&gt;단 한 개의 링크로 사용자를 해당 iOS 앱이나 Android 앱으로 보낼 수 있으며, 앱을 설치하지 않은 경우 앱스토어나 Google Play로 연결시켜 줍니다. 사용자가 처음 앱을 설치한다고 하더라도 Dynamic Link는 트래킹을 유실하지 않습니다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Invites&lt;/td&gt;
&lt;td&gt;앱 사용자가 다른 사용자에게 개인화된 이메일이나 SMS 앱 초대를 보낼 수 있는 교차 플랫폼 솔루션으로 Dynamic Link를 사용하기 때문에 트래킹 유실이 발생되지 않습니다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Adwords&lt;/td&gt;
&lt;td&gt;앱 광고주가 중요하게 생각하는 앱 내 이벤트를 Firebase Analytics에서 확인하고 구글 애드워즈에 이를 지정하면 이 이벤트를 완료할 것 같은 잠재고객에게 구글 검색 결과나 유튜브, Google Play에 광고가 노출됩니다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AdMob&lt;/td&gt;
&lt;td&gt;앱에서 수익을 창출하는 모바일 광고 플랫폼 으로 타겟팅된 인앱 광고를 통해서 수익을 창출합니다.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content:encoded></item><item><title><![CDATA[자바스크립트 클로져]]></title><description><![CDATA[…]]></description><link>https://ddalpange.github.io/2017-10-03-js-closure/</link><guid isPermaLink="false">https://ddalpange.github.io/2017-10-03-js-closure/</guid><pubDate>Tue, 03 Oct 2017 22:44:53 GMT</pubDate><content:encoded>&lt;p&gt;자바스크립트의 주요 개념중 하나인 클로져에 대해 자세히 알아보자.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;&lt;strong&gt;클로져&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;클로져는 독립적인 (자유) 변수 (지역적으로 사용되지만, 둘러싼 범위 안에서 정의된 변수)를 참조하는 함수들이다.
다른 말로 해석하면,
이 함수들은 그들이 생성된 환경을 &lt;strong&gt;기억&lt;/strong&gt;한다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;한가지 의문&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;클로져는 지역적으로 선언되었지만, 해당 함수가 선언된 블럭 안에 있는 독립된 변수들을 참조할 수 있는 함수라고 하였다.
위 문장에서만 보면 자바스크립트의 모든 함수는 해당 블럭의 변수를 참조할 수 있음으로 자바스크립트의 모든 함수는 클로져라 할 수 있다.
하지만 과연 자바스크립트의 모든 함수는 클로져일까 ??&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Mozilla&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;displayName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// displayName()은 내부 함수인, 클로져다&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 부모 함수에서 선언된 변수를 사용한다&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;displayName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;displayName&lt;/code&gt;은 자신이 선언된 환경을 기억하였다. 그렇다면 &lt;code class=&quot;language-text&quot;&gt;displayName&lt;/code&gt;은 클로져라고 부를 수 있는가 ?&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;makeFunc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Mozilla&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;displayName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; displayName&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; myFunc &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;makeFunc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;myFunc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;myFunc&lt;/code&gt; 를 실행했을 때 &lt;code class=&quot;language-text&quot;&gt;makeFunc&lt;/code&gt;에 대한 참조가 없음에도 불구하고 &lt;code class=&quot;language-text&quot;&gt;makeFunc&lt;/code&gt;의 지역변수인 &lt;code class=&quot;language-text&quot;&gt;name&lt;/code&gt; 변수에 정상적으로 접근할 수 있다. 이상하지 않은가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;displayName&lt;/code&gt;은 자신이 선언된 스코프에서 벗어나 global 환경에서 초기화되었다.
스코프 탐색은 실행스택과는 관련이 없는 &lt;code class=&quot;language-text&quot;&gt;makeFunc&lt;/code&gt;를 거쳐갔으며 &lt;code class=&quot;language-text&quot;&gt;displayName&lt;/code&gt;의 외부 스코프는 global이 아닌 &lt;code class=&quot;language-text&quot;&gt;makeFunc&lt;/code&gt;의 스코프이다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;myFunc&lt;/code&gt;가 글로벌 환경에서 초기화 되더라도 리턴된 &lt;code class=&quot;language-text&quot;&gt;dispalyName&lt;/code&gt;의 스코프체인은 &lt;code class=&quot;language-text&quot;&gt;displayName&lt;/code&gt; -&gt; &lt;code class=&quot;language-text&quot;&gt;makeFunc&lt;/code&gt; -&gt; &lt;code class=&quot;language-text&quot;&gt;global&lt;/code&gt; 순으로 형성된다.&lt;/p&gt;
&lt;p&gt;즉 초기화되는 위치와 관계없이 해당 함수가 &lt;strong&gt;선언&lt;/strong&gt;된 곳에서 스코프를 형성한다는 뜻이다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;myFunc&lt;/code&gt;에 null을 할당하지 않으면 가비지콜렉터가 &lt;code class=&quot;language-text&quot;&gt;makeFunc&lt;/code&gt;의 메모리를 해제하지 않기 때문에 클로져를 사용한다면 별도로 꼭 null을 할당해줘야한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;timer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;1 ~ 10까지 1씩 증가하여 출력하는 코드를 원했지만 결과는 기대와 달리 10이 9번 출력된다.
0.1초동안 i는 10이 되었기 때문이며 클로져함수 timer에서 외부 스코프인 &lt;code class=&quot;language-text&quot;&gt;count&lt;/code&gt;의 변수인 &lt;code class=&quot;language-text&quot;&gt;i&lt;/code&gt;에 직접 접근하여 출력하였기 때문이다.
해당 코드를 원하는 결과값으로 바꾸기 위해 어떻게 해야할까 ?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;내부 스코프를 하나 더 추가하는 방식.&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;countingNumber&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token function&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;timer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;countingNumber&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;블록 스코프를 이용하는 방식&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&apos;use strict&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;timer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;느낀 점&lt;/strong&gt;
클로져는 재미있는 개념이다. 클로져란 개념을 이해하기 위해서 11개 정도의 글을 정독하였는데, 사람마다 이해하는 클로져의 개념이 다 똑같은것 같지는 않다.
최대한 다양한 관점에서 클로져를 바라보고 글을 쓸려고 노력하였는데 결국 나랑 비슷한 사람의 글을 거의 베끼다시피 한것 같다.
언제나 느끼지만 글쓰기는 참 어렵다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;참고&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.javarouka.me/2012/01/javascripts-closure.html&quot;&gt;http://blog.javarouka.me/2012/01/javascripts-closure.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://meetup.toast.com/posts/86&quot;&gt;http://meetup.toast.com/posts/86&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://unikys.tistory.com/309&quot;&gt;http://unikys.tistory.com/309&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;!--stackedit_data:
eyJoaXN0b3J5IjpbMTg1Njg2ODQ5Nl19
--&gt;</content:encoded></item><item><title><![CDATA[자바스크립트 객체]]></title><description><![CDATA[…]]></description><link>https://ddalpange.github.io/2017-10-03-js-study-5/</link><guid isPermaLink="false">https://ddalpange.github.io/2017-10-03-js-study-5/</guid><pubDate>Tue, 03 Oct 2017 22:44:49 GMT</pubDate><content:encoded>&lt;p&gt;자바스크립트의 기본 데이터 타입은 객체다. 객체는 일종의 복합체로 원시 타입의 값 또는 다른 객체들을 묶어 이름으로 저장하고, 값을 가져올 수 있다. 다시 말해 객체는 &lt;em&gt;이름과 값으로 구성된 프로퍼티들의 정렬되지 않은 집합&lt;/em&gt; 이다.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;객체는 고유 프로퍼티를 유지하는 것 외에 &lt;strong&gt;프로토타입&lt;/strong&gt;이라고 하는 다른 객체의 프로퍼티를 상속받는다. 객체의 메서드들은 일반적으로 상속받은 프로퍼티이고, 이를 &lt;strong&gt;프토로타입 상속&lt;/strong&gt;이라고 한다.&lt;/p&gt;
&lt;h4&gt;객체 속성&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;prototype은 상속받은 프로퍼티들을 가진 객체들을 참조한다.&lt;/li&gt;
&lt;li&gt;class는 객체의 자료형(타입)을 특정짓는 문자열이다.&lt;/li&gt;
&lt;li&gt;extensible 속성(ECMAScript 5)은 객체에 새 프로퍼티를 추가할 수 있는지를 결정한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;프로퍼티 속성&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;쓰기(Writable) 속성은 프로퍼티 값의 수정 가능 여부를 결정한다&lt;/li&gt;
&lt;li&gt;열거(enmerable) 속성은 프로퍼티의 이름을 for/in루프에서 읽을수 있는지를 결정한다.&lt;/li&gt;
&lt;li&gt;설정(cofigurable) 속성은 프로퍼티의 삭제 가능 여부와 프로퍼티의 속성 변경 가능 여부를 설정한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;선언&lt;/h4&gt;
&lt;!-- more --&gt;
&lt;h5&gt;리터럴 문법&lt;/h5&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; empty &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; hotelsInfo &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  cityName&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;오사카&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  hotelName&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;오사카안에있는호텔&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  data&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toISOString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;substr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5&gt;new&lt;/h5&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; o &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; d &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; r &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;RegExp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;js&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;new 연산자는 객체를 만들고 반드시 초기화한다.&lt;/li&gt;
&lt;li&gt;new 키워드 다음에는 반드시 함수 호출문이 와야한다.&lt;/li&gt;
&lt;li&gt;이때 호출되는 함수를 생성자(constructor)라고 한다.&lt;/li&gt;
&lt;li&gt;코어자바스크립트는 기본 타입에 대한 생성자를 내장하고 있다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h5&gt;프로토타입&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;자바스크립트의 모든 객체인 또 다른 자바스크립트의 객체인 prototype과 연관되어있다.&lt;/li&gt;
&lt;li&gt;객체는 프로토타입으로부터 프로퍼티들을 상속받는다.&lt;/li&gt;
&lt;li&gt;객체 리터럴로 생성된 모든 객체는 프로토타입 객체가 같으며, Object.prototype으로 참조할 수 있다.&lt;/li&gt;
&lt;li&gt;new 키워드를 사용해 생성자를 호출하면 생성자 함수의 프로토타입이 생성된 객체의 프로토타입이 된다.&lt;/li&gt;
&lt;li&gt;Object.prototype은 아무 프로토타입도 상속받지 않는다.&lt;/li&gt;
&lt;li&gt;다른 프로토타입 객체들은 모두 Object.prototype을 상속받는다.&lt;/li&gt;
&lt;li&gt;이렇게 프로토타입 객체들이 연결된 것을 프로토타입 체인이라고 한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;__proto__&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Date 객체 프로토타입&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;__proto__&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;__proto__&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Object 프로토타입&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;__proto__&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Obeject 프로토 타입&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5&gt;Object.creat()&lt;/h5&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;inherit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;p &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;TypeError&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;create&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;p&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; type &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt; p&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;type &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; object &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; t &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;function&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;TypeError&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  f&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; p&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;접근 &amp;#x26;&amp;#x26; 삭제&lt;/h4&gt;
&lt;h5&gt;일반적인 접근 방법&lt;/h5&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; hotelsInfo &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  cityName&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;오사카&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  hotelName&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;오사카안에있는호텔&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  data&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toISOString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;substr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;


console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;hotelsInfo&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;cityName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// &apos;오사카&apos;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;hotelsInfo&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;hotelName&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// &apos;오사카안에있는호텔&apos;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;delete&lt;/span&gt; hotelsInfo&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;cityName&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;hotelsInfo&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;cityName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// undefined&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; key &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; hotelsInfo&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;hotelsInfo&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getOwnPropertyNames&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;hotelsInfo&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;for…in 루프 -&gt; 이 방법은 객체와 객체의 프로토타입 체인 상의 열거 가능한 모든 프로퍼티를 순회한다.&lt;/li&gt;
&lt;li&gt;Object.keys(o) -&gt; 이 메소드는 객체 자체에 속한(즉 프로토타입 체인 상에 있는 것은 제외)  열거 가능한 프로퍼티 이름들(“keys”)의 배열을 반환한다.&lt;/li&gt;
&lt;li&gt;Object.getOwnPropertyNames(o) -&gt; 이 메소드는 객체 자체의 모든  프로퍼티(열거 가능 여부에 무관) 이름들의  배열을 반환한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;참고&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/21545687/javascript-vs-new-object-performance&quot;&gt;리터럴 문법 속도 비교&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://unikys.tistory.com/320&quot;&gt;자바스크립트 상속의 역사&lt;/a&gt;&lt;/p&gt;
&lt;!--stackedit_data:
eyJoaXN0b3J5IjpbLTU1NDgyNzU1NCwtMTUwNjA5OTIwNSwtNT
Y4MTgwMzE3XX0=
--&gt;</content:encoded></item><item><title><![CDATA[자바스크립트 연산자]]></title><description><![CDATA[자바스크립트의 연산자에 대하여 알아보자. 산술연산자 a. 연산자 ㄱ. 덧셈 피연산자의 숫자 값을 더하거나 피연산자의 문자열을 이어 붙임 피연산자의 타입이 서로 다를 경우 toString…]]></description><link>https://ddalpange.github.io/2017-10-03-js-study-4/</link><guid isPermaLink="false">https://ddalpange.github.io/2017-10-03-js-study-4/</guid><pubDate>Tue, 03 Oct 2017 22:44:47 GMT</pubDate><content:encoded>&lt;p&gt;자바스크립트의 연산자에 대하여 알아보자.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h3&gt;산술연산자&lt;/h3&gt;
&lt;h4&gt;a. 연산자&lt;/h4&gt;
&lt;h5&gt;ㄱ. 덧셈&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;피연산자의 숫자 값을 더하거나 피연산자의 문자열을 이어 붙임&lt;/li&gt;
&lt;li&gt;피연산자의 타입이 서로 다를 경우 &lt;em&gt;&lt;strong&gt;toString()&lt;/strong&gt;&lt;/em&gt; 메소드를 호출하여 더함&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- more --&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;2&apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;1&apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;1&apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5&gt;ㄴ. 나눗셈&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;자바스크립트의 모든 숫자는 부동소숫점 숫자로 취급됌&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!-- more --&gt;
&lt;h4&gt;b. 단항 연산자&lt;/h4&gt;
&lt;h5&gt;ㄱ. 단항 덧셈(+)&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;피연산자를 숫자(or NaN)으로 바꾼 후 값을 반환한다. 만일 피연산자가 숫자일 경우 아무 일도 하지 않는다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h5&gt;ㄴ. 단항 뺄셈(-)&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;피연산자를 숫자로 변환하려 시도하고 부호를 바꾼다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h5&gt;ㄷ. 증가(++), 감소(—)&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;피연산자의 값 앞에 있을 경우 증가(감소)한 후의 값을 반환한다.&lt;/li&gt;
&lt;li&gt;피연산자의 값 뒤에 있을 경우 현재 값을 반환한 후 증가(감소)한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;ㄹ. 비트 연산자&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;2진수를 저수준에서 조작하는 데 사용한다. 사칙연산 과 같은 산술 연산을 수행하지는 않지만, 피연산자로 숫자 값을 사용하고 최종적으로 숫자값을 반환하기 때문에 자바스크립트에서는 산수 연산자로 분류되어있다. 많이 쓰지 않으니 종류만 알고 넘어가자.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;AND(&amp;#x26;) : 불리언 AND연산을 수행한다.&lt;/li&gt;
&lt;li&gt;OR(|) : 불리언 OR연산을 수행한다.&lt;/li&gt;
&lt;li&gt;XOR(^) : 불리언 XOR 연산을 수행한다.&lt;/li&gt;
&lt;li&gt;NOT(~) : 모든 비트를 반전시킨다.&lt;/li&gt;
&lt;li&gt;&amp;#x3C;&amp;#x3C; : 왼쪽으로 이동&lt;/li&gt;
&lt;li&gt;&gt;&gt; : 부호를 보존하면서 오른쪽으로 이동&lt;/li&gt;
&lt;li&gt;&gt;&gt;&gt; : 0으로 채우면서 오른쪽으로 이동&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;c. 동치 연산자&lt;/h4&gt;
&lt;h5&gt;ㄱ. ==&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;두 값 중 하나가 null이고 다른 하나가 undefined라면 일치한다.&lt;/li&gt;
&lt;li&gt;두 값의 타입이 다를 경우 형변환을 한 후 비교한다.&lt;/li&gt;
&lt;li&gt;하나의 객체가 있고 숫자,문자가 있다면 toString(), valueOf()를 호출한 후 비교한다&lt;/li&gt;
&lt;/ol&gt;
&lt;h5&gt;ㄴ. ===&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;두 값이 모두 null이거나 undefined면 일치한다.&lt;/li&gt;
&lt;li&gt;적어도 하나의 값이 NaN이면 일치하지않는다. NaN은 isNaN()을 써야한다.&lt;/li&gt;
&lt;li&gt;두 값이 문자열이며 정확히 같은위치에 16비트 값을 가지고 있다면 두 값은 일치한다. 육안상으로 같더라도 16비트 값의 순서가 다르게 인코딩되어 있다면 일치하지 않는다. (String.localCompare())&lt;/li&gt;
&lt;li&gt;객체의 프로퍼티가 같더라도 주소값이 다르면 일치하지 않는다.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!--stackedit_data:
eyJoaXN0b3J5IjpbLTY0OTI5NjEzMiwtMTcxMzczNTc0MiwtMT
g3NDI5MDA2Nl19
--&gt;</content:encoded></item><item><title><![CDATA[자바스크립트 객체 종류]]></title><description><![CDATA[자바스크립트의 객체 종류에 대하여 알아보자. 1. 전역 객체 전역 객체(global object…]]></description><link>https://ddalpange.github.io/2017-10-03-js-study-3/</link><guid isPermaLink="false">https://ddalpange.github.io/2017-10-03-js-study-3/</guid><pubDate>Tue, 03 Oct 2017 22:44:44 GMT</pubDate><content:encoded>&lt;p&gt;자바스크립트의 객체 종류에 대하여 알아보자.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2&gt;1. 전역 객체&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;전역 객체(global object)는 매우 중요한 용도로 사용되는 일반적인 자바스크립트 객체이다.&lt;/li&gt;
&lt;li&gt;전역객체의 프로퍼티는 자바스크립트 프로그램 전역에서 사용될수 있게 정의된 심벌이다.&lt;/li&gt;
&lt;li&gt;자바스크립트 인터프리터가 시작할 때 새로운 전역객체를 만들고 또 그 프로퍼티들을 초기화한다.&lt;/li&gt;
&lt;li&gt;undefined, NaN, Date(), RegExp() 등.&lt;/li&gt;
&lt;li&gt;윈도우 프로퍼티는 F12를 누른 후 브라우저 콘솔창에서 다음의 명령어로 확인 가능하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;window&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;전역 객체가 생성 될 떄 초기화되는 프로퍼티들은 예약어는 아니지만 예약어처럼 취급된다.&lt;/li&gt;
&lt;li&gt;최상위 코드(함수의 일부가 아닌 코드)에서는 this 키워드를 통해 전역 객체를 참조할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; global &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;윈도우 객체 종류&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/images/windowObj.png&quot; alt=&quot;객체&quot;&gt;&lt;/p&gt;
&lt;h3&gt;윈도우 프로퍼티&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/images/windowProp.png&quot; alt=&quot;프롭&quot;&gt;&lt;/p&gt;
&lt;h3&gt;윈도우 메소드&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/images/windowMethod.png&quot; alt=&quot;메솥&quot;&gt;&lt;/p&gt;
&lt;h3&gt;윈도우 이벤트&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/images/windowEvent.png&quot; alt=&quot;이벤&quot;&gt;&lt;/p&gt;
&lt;h2&gt;2. 래퍼(Wrapper) 객체&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;1&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;&quot;string&quot;&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;true&lt;/code&gt; 같은 원시 값은 객체가 아니다. 그러므로 프로퍼티(메소드)를 가지고 있지 않다. 그런데 &lt;code class=&quot;language-text&quot;&gt;name.length&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;name.substr(&quot;2&quot;.&quot;3&quot;)&lt;/code&gt;과 같이 어떻게 프로퍼티(메소드)에 접근하는 것일까??&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;kim yohan&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// -&gt; new String(name).length&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;만약 스트링 &lt;code class=&quot;language-text&quot;&gt;name&lt;/code&gt;의 프로퍼티를 참조할 때 자바스크립트는 문자열 값을 임시 객체로 래핑한다. 프로퍼티 참조가 해제되면 임시 객체는 메모리에서 사라진다. 객체 자체로 선언할 수 있지만, 원시 값(리터럴)으로 선언하는 것과는 엄연히 다르다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;kim yohan&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; name2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;kim yohan&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; name2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// false&lt;/span&gt;

name&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;job &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;programmer&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
name2&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;job &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;programmer&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;nikname&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;// undefined&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name2&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;nikname&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;// ddalpange&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;name&lt;/code&gt;의 임시 객체의 &lt;code class=&quot;language-text&quot;&gt;job&lt;/code&gt;에 &lt;strong&gt;ddalpange&lt;/strong&gt;를 할당하였지만 메모리 할당이 해제됨으로써 프로퍼티가 사라졌다 즉, 문자열, 넘버, 불리언 값의 프로퍼티들은 읽기 전용이며, &lt;code class=&quot;language-text&quot;&gt;새로운 프로퍼티를 할당할 수 없다&lt;/code&gt;는 것을 알 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;3. 변경 불가능한 원시 타입 값과 변경 가능 객체 참조.&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;원시타입은 자체가 값이라 바꿀수가 없다.&lt;/li&gt;
&lt;li&gt;값이 바뀔 필요가 있다면 새로운 값을 생성하여 대체한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; str &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
str&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toUpperCase&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;str&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// return &quot;hello&quot;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; obj &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
obj&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;obj&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;// return 2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;자세한 내용은 &lt;a href=&quot;https://ddalpange.github.io/2017/10/10/js-clone-object/&quot;&gt;여기&lt;/a&gt;를 참조하세요.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;오류가 있거나 궁금하신 사항이 있다면 댓글을 달아주세요.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[자바스크립트 자료형]]></title><description><![CDATA[자바스크립트의 자료형에 대하여 알아보자. Number 자바스크립트는 다른 언어와 다르게 실수와 정수값을 구분하지 않습니다. 자바스크립트는 모든 숫자를 실수로 표현합니다. 자바스크립트는 숫자를 IEEE 754 표준에서 정의한 6…]]></description><link>https://ddalpange.github.io/2017-10-03-js-study-2/</link><guid isPermaLink="false">https://ddalpange.github.io/2017-10-03-js-study-2/</guid><pubDate>Tue, 03 Oct 2017 22:44:42 GMT</pubDate><content:encoded>&lt;p&gt;자바스크립트의 자료형에 대하여 알아보자.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2&gt;Number&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;자바스크립트는 다른 언어와 다르게 실수와 정수값을 구분하지 않습니다.&lt;/li&gt;
&lt;li&gt;자바스크립트는 모든 숫자를 실수로 표현합니다.&lt;/li&gt;
&lt;li&gt;자바스크립트는 숫자를 IEEE 754 표준에서 정의한 64비트 실수 형태로 표현합니다. 따라서 가장 큰 숫자로 1.7976931348623157e+308 까지, 작게는 5e-324 만큼 표현할 수 있습니다.&lt;/li&gt;
&lt;li&gt;자바스크립트는 1.7976931348623157e+308 와 5e-324 사이의 정수 값을 정활하게 표현할 수 있습니다. 이보다 더 큰 정수 값을 사용한다면 낮은 자리에 대한 정밀도를 잃을수도 있습니다. 또 자바스크립트는 배열 인덱싱이나 비트연산과 같은 특정한 연산은 32비트 정수로 수행합니다.&lt;/li&gt;
&lt;li&gt;프로그램 안에서 그대로 등장하는 숫자를 숫자 리터럴(numeric literal)이라고 합니다.&lt;/li&gt;
&lt;li&gt;숫자 리터럴은 왼쪽에 -를 표기하는 것으로 음수를 표현할 수 있습니다. 하지만 기술적으로 -는 단항 연산자이지 숫자 리터럴의 일부는 아닙니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;정수 리터럴&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;100000&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;자바스크립트는 10진수 외에도 16진수를 인식합니다.&lt;/li&gt;
&lt;li&gt;16진수 리터럴은 “0x” 또는 “0X” 뒤에 16진수 숫자들이 뒤따르는 형태입니다.&lt;/li&gt;
&lt;li&gt;16진수 숫자는 0에서 9까지의 문자와 10부터 15까지의 숫자를 표현하는 a부터 f까지의 문자중 하나입니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token number&quot;&gt;0xff&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 15*16 + 15 = 255&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;0xaaa&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 10*16 + 10*16 + 10 = 2730&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;일부 자바스크립트 구현체에서는 정수 리터럴을 8진수로도 표현할 수 있습니다.&lt;/li&gt;
&lt;li&gt;하지만 ECMAScript 표준에서 8진수 표현을 지원하지 않습니다.&lt;/li&gt;
&lt;li&gt;8진수 리터럴은 숫자 0뒤에 0부터 7사이의 숫자 시퀸스가 뒤따르는 형태입니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token number&quot;&gt;0377&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 3*64 + 7*8 + 7 + 255&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;자바스크립트 구현체에 따라 8진수를 지원하지 않을 수 있기 때문에 0으로 시작하는 정수 리터럴은 절대 사용하지 말아야합니다.&lt;/li&gt;
&lt;li&gt;ECMAScript5의 Strict 모드에서는 8진수 리터럴을 명시적으로 금지하고 있습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;부동소수점 리터럴&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;부동소수점(floating-point) 리터럴은 소수점을 가질 수 있다. 부동 소수점 리터럴은 실수를 표현하는 전통적인 문법을 따른다. 실수는 정수 부분과 소수점, 소수점 이하 부분으로 표현한다.&lt;/li&gt;
&lt;li&gt;부동소수점 리터럴은 지수 표기법으로도 표현할 수 있다. 실수에 이어 문자 e(혹은 E)가 따라나오고, 그 뒤에 선택적으로 덧셈 혹은 뺄셈 기호가 나타나고 마지막으로 정수 지수 값이 따라온다.&lt;/li&gt;
&lt;li&gt;지수 표기법으로 표현한 값은 실수에 10을 지수 횟수만큼 곱한 값을 나타낸다.&lt;/li&gt;
&lt;li&gt;부동소수점 표기법을 간단히 표현하면 다음과 같다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;[&quot;digits&quot;][.&quot;digits&quot;][(E|e)&quot;digits&quot;]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token number&quot;&gt;3.14&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;2345.789&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;.333333333333333333&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 0.333333333333333333&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;6.02e23&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 6.02e+23  6.02 x 10^23 (10의 23승)&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;1.4738223E-32&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 1.4738223e-32  1.4738223 x 10^-32 (10의 -32승)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;산술 연산자&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;자바스크립트에서는 언어에서 제공하는 산술 연산자를 사용하여 숫자를 다룬다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;덧셈 +&lt;/li&gt;
&lt;li&gt;뺄셈 -&lt;/li&gt;
&lt;li&gt;곱셈 *&lt;/li&gt;
&lt;li&gt;나눗셈 /&lt;/li&gt;
&lt;li&gt;나눗셈 연산을 한 후 나머지 %&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;자바스크립트는 기본적인 산술 연산뿐 아니라, 더 복잡한 수치 연산을 Math 객체를 통해 지원한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Math객체에는 수치 연산에 쓰이는 다양한 함수와 상수들이 프로퍼티 형태로 정의되어 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;example.&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;53&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 9007199254740992 (2의 53승)&lt;/span&gt;
Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;round&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;.6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 1 (반올림)&lt;/span&gt;
Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ceil&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;.6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 1 (올림)&lt;/span&gt;
Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;.6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 0 (내림)&lt;/span&gt;
Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 5 (절대값)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; y &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;55&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; z &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;y&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;z&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 100 (가장 큰 인자를 반환한다.)&lt;/span&gt;
Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;y&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;z&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 55 (가장 작은 인자를 반환한다.)&lt;/span&gt;
Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 0과 1.0 사이에 임의의 수 x를 반환한다.&lt;/span&gt;
Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;PI&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 3.141592653589793 (원주율, 파이)&lt;/span&gt;
Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 2.718281828459045 (자연 로그 상수 e)&lt;/span&gt;
Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 1.7320508075688772 (3의 제곱근)&lt;/span&gt;
Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 27 (3의 세제곱)&lt;/span&gt;
Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 0 삼각함수(Math.cos, Math.atan 등)&lt;/span&gt;
Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 2.302585092994046 (자연 로그 10)&lt;/span&gt;
Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;LN10&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 2 (밑이 10인 로그 100)&lt;/span&gt;
Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;512&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;LN2&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 9 (밑이 2인 로그 512)&lt;/span&gt;
Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 20.085536923187668 (Math.E의 3 거듭제곱)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;자바스크립트가 지원하는 모든 수리 함수에 대한 자세한 설명은 &lt;a href=&quot;http://www.w3schools.com/jsref/jsref_obj_math.asp&quot;&gt;레퍼런스&lt;/a&gt;의 Math부분을 살펴보기!* 자바스크립트의 산술 연산은 오버플로와 언더플로, 0으로 나누는 에러를 발생시키지 않는다.&lt;/li&gt;
&lt;li&gt;산술 연산의 결과가 표현할 수 있는 가장 큰 수보다 더 크다면(오버플로), 자바스크립트는 Infinity라고 표현하는 무한대의 값을 출력한다.&lt;/li&gt;
&lt;li&gt;표현 가능한 가장 작은 음수 값보다 더 작은 값은 음의 무한대가 되고 이 값을 -Infinity로 출력한다.&lt;/li&gt;
&lt;li&gt;언더플로(underflow)는 산술 연산의 결과가 표현할 수 있는 가장 작은 값보다 0에 가까울 때 발생한다. 이런 경우에 자바스크립트는 0을 돌려준다.&lt;/li&gt;
&lt;li&gt;만약 언더플로가 음수에서 발생했다면 자바스크립트는 특수 값인 ‘음의 0’을 반환한다.&lt;/li&gt;
&lt;li&gt;자바스크립트에서 0으로 나누는 연산은 에러가 아니다. 이런 경우에 무한대 또는 음의 무한대가 반환된다. 그런데 여기에는 한 가지 예외가 있다. 0을 0으로 나누는 것은 정의되지 않은 값을 갖고, 그 결과로 숫자가 아닌 특수한 값을 가진다.&lt;/li&gt;
&lt;li&gt;자바스크립트에서는 이러한 값을 NaN으로 출력한다.&lt;/li&gt;
&lt;li&gt;또한 NaN은 무한대를 무한대로 나누는 경우와 음수 값에 루트를 씌우는 경우, 숫자가 아닌 피연산자로 산술 연산을 시도하는 경우에도 발생한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// NaN&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;s&apos;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// NaN&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;자바스크립트는 양의 무한대와 숫자가 아닌 값을 표현하기 위해 전역 변수 Infinity, NaN을 미리 정의한다.&lt;/li&gt;
&lt;li&gt;ECMAScript3에서 Infinity와 NaN을 읽기 전용 값으로 정의한다. Number 객체에는 Infinity와 NaN이 따로 상수로 정의되어 있으며,&lt;/li&gt;
&lt;li&gt;이들 상수는 ECMAScript3에서도 읽기 전용이다&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token number&quot;&gt;Infinity&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Infinity (읽고 쓰기 가능한 변수로 Infinity로 초기화 된다.)&lt;/span&gt;
Number&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;POSITIVE_INFINITY&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Infinity(Infinity와 같은 값이지만 읽기 전용이다.)&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Infinity&lt;/span&gt;
Number&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;MAX_VALUE&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 1.7976931348623157e+308&lt;/span&gt;
Number&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;MAX_VALUE&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 1.7976931348623157e+308&lt;/span&gt;
Number&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;NEGATIVE_INFINITY&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// -Infinity&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// -Infinity&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Number&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;MAX_VALUE&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// -1.7976931348623157e+308&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;NaN&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// NaN&lt;/span&gt;
Nuber&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;NaN&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// NaN&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// NaN&lt;/span&gt;
Number&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;MIN_VALUE&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 0 (언더플로)&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;Infinity&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// -0(음의 0)&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// -0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;자바스크립트에서 NaN은 한 가지 독특한 기능을 가지고 있다.&lt;/li&gt;
&lt;li&gt;NaN은 그 자신 뿐만아니라 다른 값과 같은지 비교할 수 없다.&lt;/li&gt;
&lt;li&gt;isNaN( ) 함수를 사용하여 비교할 수 있다. 이 함수는 인자가 NaN이거나, 문자열이나 객체처럼 숫자가 아니라면 참을 반환한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
x &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;NaN&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
x &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;o 이렇게 비교 해야 한다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;isNaN&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// false&lt;/span&gt;
x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
x &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;NaN&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// false&lt;/span&gt;
x &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; x &lt;span class=&quot;token comment&quot;&gt;// true&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;isNaN&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;비슷한 의미로 isFinite()함수는 인자가 Nan, infinitiy -infinitiy 외의 숫자라면 참을 반환한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token function&quot;&gt;isFinite&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// true&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;isFinite&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;NaN&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// false&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;isFinite&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;Infinity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// false&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;isFinite&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;Infinity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// false&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;음의 0은 양의 0과 같은지(자바스크립트의 엄격한 동치 테스트를 사용하여) 비교할 수 있는데, 나눗셈을 할 때를 제외하고는 거의 같다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; zero &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 일반적인 0&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; negz &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 음의 0&lt;/span&gt;
zero &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; negz &lt;span class=&quot;token comment&quot;&gt;// true&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; zero &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; negz &lt;span class=&quot;token comment&quot;&gt;// false&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;이진 부동소수점과 반올림 오류&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;무한히 많은 실수가 있지만 자바스크립트에서는 한정된 숫자만 부동소수점 형태로 표현할 수 있다(정확히는 184377368744548106271까지 허용).&lt;/li&gt;
&lt;li&gt;자바스크립트 연산을 할때는 근사 값으로 표현한다.&lt;/li&gt;
&lt;li&gt;자바스크립트에서 사용하는 IEEE-754 부동소수점 표현방식은 1/2, 1/8, 1/1024 같은 분수를 정확하게 표현할 수 있는 이진 표현법(binary representation)이다.&lt;/li&gt;
&lt;li&gt;하지만 가장 많이 사용하는 분수는 10진수 분수로 1/10, 1/100 등 인데, 이진 표현법으로는 0.1과 같은 간단한 값도 정확하게 표현할 수 없다.&lt;/li&gt;
&lt;li&gt;자바스크립트에서 숫자는 높은 정밀도를 가지고 있어서 0.1에 근접한 근사치를 낼 수 있지만, 정확하게 표현할 수 없다는 점은 문제를 야기할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;.3&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;.2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 0.3 - 0.2&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; y &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;.2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;.1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 0.2 - 0.1&lt;/span&gt;
x &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; y &lt;span class=&quot;token comment&quot;&gt;// false&lt;/span&gt;
x &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;.1&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// false&lt;/span&gt;
y &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;.1&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// false&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;반올림 오류 때문에 .3 근사치와 .2근사치의 차는 .2와 .1의 근사치 사이의 차이와 같지 않다&lt;/li&gt;
&lt;li&gt;이는 자바스크립트가 가진 결함이 아니라 이진 부동소수점 숫자를 사용하기 때문에 벌어지는 현상이며,&lt;/li&gt;
&lt;li&gt;이진 부동소수점 숫자를 사용하는 프로그래밍 언어에서 볼 수 있는 공통적인 현상이다.&lt;/li&gt;
&lt;li&gt;또한 코드 x 와 y값은 서로 매우 근접하고 정답(0.1)에 가까운 값이다. 계산된 값은 대부분 적절하지만,&lt;/li&gt;
&lt;li&gt;값들을 동등 비교할 경우에는 문제가 발생한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;날짜와 시간&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;코어 자바스크립트는 날짜와 시간을 표현하는 객체를 생성하는 Date( ) 생성자를 제공한다.&lt;/li&gt;
&lt;li&gt;Date( ) 객체는 간단한 날짜 계산을 하는 메서드를 가지고 있다.&lt;/li&gt;
&lt;li&gt;Date( ) 객체는 숫자 같은 원시 타입이 아니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; then &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//Fri Jan 01 2016 00:00:00 GMT+0900 (대한민국 표준시) 2016년 1월 1일&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; later &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Fri Jan 01 2016 01:32:50 GMT+0900 (대한민국 표준시)&lt;/span&gt;
 &lt;span class=&quot;token comment&quot;&gt;//2016년 1월 1일, 오전 1시 32분 50초&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; now &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Tue Dec 13 2016 01:34:48 GMT+0900 (대한민국 표준시) 현재 날짜와 시간&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; elapsed &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; now &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; then&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 29986488159 밀리초로 날짜 계산&lt;/span&gt;

later&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getFullYear&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 2016&lt;/span&gt;
later&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getMonth&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 0 월은 0부터 시작한다.&lt;/span&gt;
later&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getDate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 13&lt;/span&gt;
later&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getDay&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 5 0은 일요일, 5는 금요일&lt;/span&gt;
later&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getHours&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 1 오전 1시&lt;/span&gt;
later&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getUTCHours&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 16 시간대에 의존 한 UTC 시간&lt;/span&gt;
later&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// &quot;Fri Jan 01 2016 01:32:50 GMT+0900 (대한민국 표준시)&quot;&lt;/span&gt;
later&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toUTCString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// &quot;Thu, 31 Dec 2015 16:32:50 GMT&quot;&lt;/span&gt;
later&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toLocaleTimeString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// &quot;오전 1:32:50&quot;&lt;/span&gt;
later&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toLocaleDateString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// &quot;2016. 1. 1.&quot;&lt;/span&gt;
later&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toISOString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// &quot;2015-12-31T16:32:50.000Z&quot; ( ECMAScript5에서만 지원)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;출처 : &lt;a href=&quot;http://gahee0416.tistory.com/4&quot;&gt;http://gahee0416.tistory.com/4&lt;/a&gt;&lt;/p&gt;
&lt;!--stackedit_data:
eyJoaXN0b3J5IjpbLTExNDEyNDM5NDksLTEwMjY1NDEwNDMsMT
k2Mjg0NTgyN119
--&gt;</content:encoded></item><item><title><![CDATA[자바스크립트]]></title><description><![CDATA[자바스크립트에 대해 간단히 소개한다. 자바스크립트란? 프로그래밍 언어중의 하나로 컴파일이 필요하지 않은 스크립트형 언어이며 타입이 정의되어 있지 않은 동적 언어이다. 본래 PHP, JSP 등 SSR…]]></description><link>https://ddalpange.github.io/2017-10-03-js-study-1/</link><guid isPermaLink="false">https://ddalpange.github.io/2017-10-03-js-study-1/</guid><pubDate>Tue, 03 Oct 2017 22:44:40 GMT</pubDate><content:encoded>&lt;p&gt;자바스크립트에 대해 간단히 소개한다.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2&gt;자바스크립트란?&lt;/h2&gt;
&lt;p&gt;프로그래밍 언어중의 하나로 컴파일이 필요하지 않은 스크립트형 언어이며 타입이 정의되어 있지 않은 동적 언어이다. 본래 PHP, JSP 등 SSR에서 할 수 없는 오토컴플리트 등 간단한 비동기 통신을 위해 개발되었다. 구글이 V8 엔진과 Node라는 런타임 패키지를 공개하면서 자바스크립트의 속도가 비약적으로 빨라졌고 서버에서 사용할 수 있게 되었다. JS의 영역이 늘어나면서 단순 돔을 변경할 수 있는 Jquery를 벗어나서 Backbone, Angular 등 SPA 프레임워크가 공개되었고 그에 따라 수요가 증가하면서 클라이언트쪽을 전문으로 SPA를 개발하는 프론트엔드라는 영역도 생겼다.&lt;/p&gt;
&lt;h2&gt;자바스크립트의 미래&lt;/h2&gt;
&lt;p&gt;Node가 공개되고 자바스크립트를 브라우저가 아닌 서버에서 사용할 수 있게 되었으며 React Native가 공개되며 자바스크립트를 이용하여 IOS, Android 네이티브 앱을 만들 수 있다. 데스크톱 앱도 Electron을 이용하여 웹뷰 형식으로 만들 수 있다. 즉 자바스크립트 하나로 모든 플랫폼에 애플리케이션을 배포할 수 있다는 뜻이다. 본래 프론트엔드 개발자라 소개하면 함은 CSS, 마크업을 주로 하는 잡부 취급을 받았으나 요즘에는 구하기도 힘들어서 잘 대우받는다.&lt;/p&gt;
&lt;h2&gt;자바스크립트의 역사&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;자바스크립트는 웹 초창기에 넷스케이프사에서 만들었다.&lt;/li&gt;
&lt;li&gt;‘자바스크립트’는 썬마이크로시스템즈(현 오라클)에서 상표권 라이선스를 가지고있고, 언어 자체 구현은 넷스케이프(현 모질라)에서 담당했다.&lt;/li&gt;
&lt;li&gt;넷스케이프는 이 언어를 표준화 하기 위해서 ECMA(European Computer Manufacture’s Association)에 제출했는데, 상표권 문제로 이 언어의 이름을 ECMAScript로 정의하였다.&lt;/li&gt;
&lt;li&gt;같은 이유로, 마이크로소프트가 제작한 언어의 이름은 JScript가 되었다.&lt;/li&gt;
&lt;li&gt;하지만 사람들은 그냥 모두 자바스크립트라고 부른다.&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item></channel></rss>
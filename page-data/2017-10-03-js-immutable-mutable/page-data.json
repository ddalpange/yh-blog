{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/2017-10-03-js-immutable-mutable/",
    "result": {"data":{"site":{"siteMetadata":{"title":"YH.K Logs"}},"markdownRemark":{"id":"cd75c0ef-1eaf-5c74-bbd7-8f14ccb792db","excerpt":"…","html":"<p>참조타입, 원시타입, 불변형, 가변형 등 자료형의 차이에 대해 알아봅시다.</p>\n<!-- more -->\n<h4>참조타입, 원시타입? 불변형, 가변형?</h4>\n<h5>서론</h5>\n<p>포인트 관련 항목 페이지를 수정하면서 이상한 일이 일어났습니다.</p>\n<p>사용자가 원하는 날짜만을 이용하여 필터링을 하던 도중, 필터링한 데이터를 보여주고</p>\n<p>전체데이터를 다시 보여주지 않고 있었습니다.</p>\n<p>그 문제는 필터링한 변수와 원본 데이터 변수의 포인터가 서로 같은곳을 바라보고 있어</p>\n<p>원본데이터 자체를 수정하고 있었던 것이었습니다.</p>\n<p>이 문제를 해결하기 위하여 더 자세히 알아봅시다.</p>\n<h5>알아봅시다.</h5>\n<p>자바스크립트의 변수 타입을 불변형과 가변형으로 나눠 보겠습니다.</p>\n<p>원시타입, 참조타입으로 나누기도 하지만, 개념을 따져보면 전부 비슷비슷한 말들입니다.</p>\n<h5>불변형(Primary Type).</h5>\n<ol>\n<li>\n<p>값을 변경할 수 없다.</p>\n</li>\n<li>\n<p>String, Number, Boolean</p>\n</li>\n<li>\n<p>값을 변경하기 위하여 다음의 과정을 거친다.</p>\n<ul>\n<li>새로운 인스턴스를 생성한다.</li>\n<li>기존의 인스턴스의 포인터를 지운다.</li>\n<li>포인터에 새로운 인스턴스의 주소를 할당한다.</li>\n</ul>\n</li>\n<li>\n<p>null과 undefined는 숫자도 문자도 불리언 값도 아닌 독립적인 값에 속한다.</p>\n</li>\n</ol>\n<h5>테스트 해봅시다.</h5>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> StringExample <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">'맛있는 초꼬렛'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nstringExample<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'맛있는'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'맛없는'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>stringExample<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>다음의 결과값은 무엇이 나올까요?</p>\n<p>여러분께서는 <strong>맛없는</strong> 초꼬렛을 예상하셨겠지만,</p>\n<p>답은 <strong>맛있는</strong> 초꼬렛입니다. 풀이를 한번 보죠.</p>\n<p><img src=\"http://ddalpange.github.io/images/immutable1.png\" alt=\"immutable1\"></p>\n<p>불변객체(String, Number, Boolean) 등은 그 자체가 값이기 때문에 값을 바꿀 수 없습니다.</p>\n<p>즉 사용자가 볼때 값이 변하는 것은 새로운 인스턴스(값)을 생성하고 포인터를 재할당하는 것 뿐입니다.</p>\n<p>위의 예제에서는 포인터를 재할당하지 않았음으로 stringExample의 값이 바뀌지 않았습니다.</p>\n<p>따라서 <em><strong>let stringExample2 = stringExample</strong></em> 이라는 명령어를 실행할 때.</p>\n<p><strong>객체와 인스턴스의 관계가 1:1로 형성됩니다.</strong></p>\n<h5>가변형(Object Type).</h5>\n<ol>\n<li>\n<p>값을 변경할 수 있다.</p>\n</li>\n<li>\n<p>Array, List, Map</p>\n</li>\n<li>\n<p>값을 변경할 때 인스턴스 자체가 변한다.</p>\n</li>\n</ol>\n<h5>테스트 해봅시다.</h5>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> arrayExample <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"IU\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"YouAndMe\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> arrayExample2 <span class=\"token operator\">=</span> arrayExample<span class=\"token punctuation\">;</span>\n\narrayExample<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"ABCDEFG\"</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1 ->'</span><span class=\"token punctuation\">,</span> arrayExample<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2 ->'</span><span class=\"token punctuation\">,</span> arrayExample2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>다음의 결과값은 무엇이 나올까요?</p>\n<p>1 -> IU ABCDEFG</p>\n<p>2 -> IU ABCDEFG</p>\n<p><img src=\"http://ddalpange.github.io/images/immutable2.png\" alt=\"immutable2\"></p>\n<p>가변객체(Array, List, Map) 등은 값을 변경할 때 기존 변수가 바라보던 인스턴스 자체의 값을 변경합니다.</p>\n<p>따라서 <em><strong>arrayExample = arrayExample2</strong></em> 명령을 실행한다면</p>\n<p>두 변수가 같은 인스턴스를 바라보는 2 : 1 의 관계를 형성하게 됩니다.</p>\n<p>따라서 하나의 변수에 값을 변경하고자 했을 때 다른 변수의 값도 함께 변화합니다.</p>\n<p><strong>객체와 인스턴스의 관계가 n:1로 형성됩니다.</strong></p>\n<h4>immutable.js</h4>\n<ul>\n<li>\n<ol>\n<li>페이스북에서 배포한 자바스크립트 라이브러리입니다.</li>\n</ol>\n</li>\n<li></li>\n</ul>\n<ol start=\"2\">\n<li>기존의 가변형 객체였던 Map, List 등을 불변형으로 쓸 수 있게 해줍니다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> immutableMap <span class=\"token operator\">=</span> Immutable<span class=\"token punctuation\">.</span><span class=\"token function\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>a<span class=\"token operator\">:</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">:</span><span class=\"token number\">30</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> immutableMap2 <span class=\"token operator\">=</span> immutableMap<span class=\"token punctuation\">;</span>\n\nimmutableMap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>immutableMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>immutableMap2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>다음의 결과값은 무엇이 나올까요 ?</p>\n<p>1 -> “10”, “20”, “30”</p>\n<p>2 -> “10”, “20”, “30”</p>\n<p><img src=\"http://ddalpange.github.io/images/immutable3.png\" alt=\"immutable3\"></p>\n<p>객체의 값이 변경될 때마다 새로운 인스턴스를 생성합니다.</p>\n<p><strong>객체와 인스턴스의 관계가 1:1로 형성됩니다.</strong></p>\n<h4>정리.</h4>\n<ol>\n<li>\n<p>Front에서는 사용자에게 보여줄 값과, 실제 데이터값을 분리할 필요가 있다.</p>\n</li>\n<li>\n<p>shouldComponentUpdate같은 중요한 메소드를 사용할 때, 기준이 되는 변수가 함수 A,B를 거쳐왔는지 A,C를 거쳐왔는지 장담할 수 없다.</p>\n</li>\n<li>\n<p>객체 배열을 Shallow copy 해버린다면 각각의 데이터에 독립성을 보장할 수 없다.</p>\n</li>\n<li>\n<p>Immutable.js, cloneObject 등 Deep copy를 하게된다면 데이터의 독립성을 보장하며, 명시적이며, 유지보수를 쉽게 할 수 있다.</p>\n</li>\n</ol>\n<!--stackedit_data:\neyJoaXN0b3J5IjpbLTIwODQ0MDU5NTMsMTM0NTc4NTYxMF19\n-->","frontmatter":{"title":"자바스크립트 불변과 가변","date":"October 03, 2017","description":null}},"previous":{"fields":{"slug":"/2017-10-03-algorithm-make-palindrome/"},"frontmatter":{"title":"회문 만들기"}},"next":{"fields":{"slug":"/2017-10-03-project-make-simple-memo-1/"},"frontmatter":{"title":"간단한 메모장 만들기 1"}}},"pageContext":{"id":"cd75c0ef-1eaf-5c74-bbd7-8f14ccb792db","previousPostId":"4da66c27-e8b4-5bc3-a7ef-242fa48aa6b0","nextPostId":"3f40d581-c48a-5e73-9e96-b754e808a4a8"}},
    "staticQueryHashes": ["230163734","2841359383"]}
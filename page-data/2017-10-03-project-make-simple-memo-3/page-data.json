{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/2017-10-03-project-make-simple-memo-3/",
    "result": {"data":{"site":{"siteMetadata":{"title":"YH.K Logs"}},"markdownRemark":{"id":"3b5d642e-342a-5c60-9dba-bb558bd3edf2","excerpt":"이번 시간에서는 목 객체와 Angular2의 서비스(보통 아이오닉에선 provider 라고 명칭합니다.)를 이용해서 메모가 어떻게 만들어지고, 수정되고, 삭제되는지 알아볼겁니다. 틀리거나 안되는것이 있다면 바로바로 댓글로 달아주세요! mock objects…","html":"<p>이번 시간에서는 목 객체와 Angular2의 서비스(보통 아이오닉에선 provider 라고 명칭합니다.)를 이용해서 메모가 어떻게 만들어지고, 수정되고, 삭제되는지 알아볼겁니다. 틀리거나 안되는것이 있다면 바로바로 댓글로 달아주세요!</p>\n<!-- more -->\n<p><strong>mock objects?</strong></p>\n<blockquote>\n<p>목 객체는 실제 객체의 동작을 흉내내는 시뮬레이션 객체입니다. 보통 프론트단에서 api와의 의존성을 없애고 테스트를 쉽게 하기 위해 하드코딩된 데이터들을 mock data라고 칭합니다.</p>\n</blockquote>\n<p><strong>service?</strong></p>\n<blockquote>\n<p>서비스는 애플리케이션 전반에 걸쳐 코드를 구성하고 공유하는 데 사용되며, 일반적으로 데이터 액세스 방법을 생성하는 곳이기도 합니다. 즉 재사용성이 높은 코드들을 모아놓은 것이며, Angular2에서 기본으로 제공해주는 패턴중의 하나입니다. 서비스를 이해할려면 DI(Dependency Injection)을 이해해야하는데, 포스트가 너무 길어지니 다음에 하죠.</p>\n</blockquote>\n<h3>메모 인터페이스 정의하기</h3>\n<p><strong>src</strong>폴더에서 <strong>models</strong>, <strong>memo</strong> 폴더를 차례대로 만들어 주신 후 그 안에 <strong>memo.interface.ts</strong>파일을 만들어주세요</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript**src/modes/memo/memo.interface.ts**\"><pre class=\"language-typescript**src/modes/memo/memo.interface.ts**\"><code class=\"language-typescript**src/modes/memo/memo.interface.ts**\">export interface Memo {\n    key: number;\n    author: string;                 // 작성자\n    title: string;                  // 제목\n    contents: string;               // 본문\n    publishedDate: Date;           // 작성일\n    recentUpdatedDate: Date;      // 최근 수정일\n}</code></pre></div>\n<h3>목 메모리스트 정의하기</h3>\n<p><strong>src</strong>폴더에서 <strong>mocks</strong>, <strong>memo</strong> 폴더를 만들어 주신 후</p>\n<p>그 안에 <strong>memo-list.mock.ts</strong>파일을 만들어주세요</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript**src/mocks/memo/memo-list.mock.ts**\"><pre class=\"language-typescript**src/mocks/memo/memo-list.mock.ts**\"><code class=\"language-typescript**src/mocks/memo/memo-list.mock.ts**\">import { Memo } from &#39;./../../models/memo/memo.interface&#39;;\nexport const MEMOLIST: Memo[] = [\n    {\n        key: 0,\n        title: &quot;제목 1&quot;,\n        contents: &quot;본문본문본문본문본문본문본문본문본문본문본문본문본문본문본문본문본문본문본문본문&quot;,\n        author: &quot;ddalpange@gmail.com&quot;,\n        recentUpdatedDate: new Date(),\n        publishedDate: new Date(),\n    },\n    {\n        key: 1,\n        title: &quot;제목 2&quot;,\n        contents: &quot;본문본문본문본문본문본문본문본문본문본문본문본문본문본문본문본문본문본문본문본문&quot;,\n        author: &quot;ddalpange@gmail.com&quot;,\n        recentUpdatedDate: new Date(),\n        publishedDate: new Date(),\n    }\n]</code></pre></div>\n<h3>메모 관리 서비스 만들기 !</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ ionic g provider memo-manager</code></pre></div>\n<p>위 명령어를 실행하고 나면 <strong>providers</strong>라는 폴더가 <strong>src</strong> 폴더에 생길거에요!\nIonic Cli로 만든 provider는 앱 모듈에 자동으로 추가(registering)됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript**src/proividers/memo-manager/memo-manager.ts**\"><pre class=\"language-typescript**src/proividers/memo-manager/memo-manager.ts**\"><code class=\"language-typescript**src/proividers/memo-manager/memo-manager.ts**\">import { MEMOLIST } from &#39;./../../mocks/memo/memo-list.mock&#39;;\nimport { Memo } from &#39;./../../models/memo/memo.interface&#39;;\nimport { Injectable } from &#39;@angular/core&#39;;\nimport { Http } from &#39;@angular/http&#39;;\n\n/*\n  Generated class for the MemoManagerProvider provider.\n\n  See https://angular.io/docs/ts/latest/guide/dependency-injection.html\n  for more info on providers and Angular DI.\n*/\n@Injectable()\nexport class MemoManagerProvider {\n\n  memoList: Memo[];\n\n  constructor(public http: Http) {\n    this.initMemoList();\n  }\n\n  initMemoList() {\n    this.memoList = MEMOLIST;\n  }\n\n  getMemoList(): Memo[] {\n    return this.memoList;\n  }\n\n  getMemo(key: number): Memo {\n    let index = this.memoList.findIndex((memo: Memo, i: number) =&gt; {\n      return memo.key === key;\n    });\n\n    return this.memoList[index] || null;\n  }\n\n  createMemo(title: string, contents: string, author: string) {\n    let lastMemo = this.memoList[this.memoList.length - 1];\n    let lastMemoKey = lastMemo ? lastMemo.key : -1;\n    let key = lastMemoKey + 1;\n\n    let memo: Memo = {\n      key: key,\n      title: title,\n      contents: contents,\n      author: author,\n      publishedDate: new Date(),\n      recentUpdatedDate: new Date(),\n    }\n\n    this.memoList.push(memo);\n  }\n\n  deleteMemo(deleteMemo: Memo) {\n    let index = this.memoList.findIndex((memo: Memo, i: number) =&gt; {\n      return memo.key === deleteMemo.key;\n    });\n\n    this.memoList.splice(index, 1);\n  }\n\n  editMemo(changeMemo: Memo, title: string, contents: string) {\n    let index = this.memoList.findIndex((memo: Memo, i: number) =&gt; {\n      return memo.key === changeMemo.key;\n    });\n\n    this.memoList[index].title = title;\n    this.memoList[index].contents = contents;\n    this.memoList[index].recentUpdatedDate = new Date();\n  }\n\n}</code></pre></div>\n<p>잘 되는지 메모 리스트 페이지에서 메모 매니저를 주입(DI) 받아보겠습니다.</p>\n<p>메모 리스트페이지의 constructor 부분을 아래와 같이 바꿔주세요.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript**src/pages/memo-list/memo-list.ts**\"><pre class=\"language-typescript**src/pages/memo-list/memo-list.ts**\"><code class=\"language-typescript**src/pages/memo-list/memo-list.ts**\">...\nimport { MemoManagerProvider } from &#39;./../../providers/memo-manager/memo-manager&#39;;\n\n...\n\nexport class MemoListPage {\n\n  constructor(\n    public navCtrl: NavController,\n    public navParams: NavParams,\n    public memoManager: MemoManagerProvider) {\n  }\n  .....\n}</code></pre></div>\n<p><strong>여기까지 !</strong></p>\n<p>잠시 숨 고르시고 에러 안나는지 살펴보세요.</p>\n<p>이제 페이지들의 뷰에 각 데이터들을 연동하고, 메모 매니저를 주입(DI)받아서 메모를 쓰기, 수정 삭제, 보기 할 수 있는 기능을 만들거에요.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript**src/pages/memo-list/memo-list.ts**\"><pre class=\"language-typescript**src/pages/memo-list/memo-list.ts**\"><code class=\"language-typescript**src/pages/memo-list/memo-list.ts**\">import { Memo } from &#39;./../../mod els/memo/memo.interface&#39;;\nimport { Component, OnInit } from &#39;@angular/core&#39;;\nimport { IonicPage, NavController, NavParams } from &#39;ionic-angular&#39;;\n\nimport { MemoCreatePage } from &#39;./../memo-create/memo-create&#39;;\nimport { MemoDetailPage } from &#39;./../memo-detail/memo-detail&#39;;\n\nimport { MemoManagerProvider } from &#39;./../../providers/memo-manager/memo-manager&#39;;\n@IonicPage()\n\n@Component({\n  selector: &#39;page-memo-list&#39;,\n  templateUrl: &#39;memo-list.html&#39;,\n})\n\nexport class MemoListPage {\n\n  memoList: Memo[] = [];\n\n  constructor(\n    public navCtrl: NavController,\n    public navParams: NavParams,\n    public memoManager: MemoManagerProvider) {\n  }\n \n  ngOnInit() {\n    this.memoList = this.memoManager.getMemoList();\n    console.log(this.memoList);\n  }\n\n  onClickViewMemoDetail(memo: Memo) {\n    this.navCtrl.push(MemoDetailPage, { memo: memo });\n  }\n  \n  onClickCreateMemo() {\n    this.navCtrl.push(MemoCreatePage);\n  }\n}</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"html**src/pages/memo-list/memo-list.html**\"><pre class=\"language-html**src/pages/memo-list/memo-list.html**\"><code class=\"language-html**src/pages/memo-list/memo-list.html**\">&lt;ion-header&gt;\n  &lt;ion-navbar color=&quot;primary&quot;&gt;\n    &lt;ion-title&gt;메모들&lt;/ion-title&gt;\n  &lt;/ion-navbar&gt;\n&lt;/ion-header&gt;\n&lt;ion-content&gt;\n  &lt;ng-template ngFor let-memo [ngForOf]=&quot;memoList&quot; let-i=&quot;index&quot;&gt;\n    &lt;ion-card (click)=&quot;onClickViewMemoDetail(memo)&quot;&gt;\n      &lt;ion-card-header&gt;\n        {{ memo.title }}\n      &lt;/ion-card-header&gt;\n      &lt;ion-card-content&gt;\n        {{ memo.contents }}\n      &lt;/ion-card-content&gt;\n    &lt;/ion-card&gt;\n  &lt;/ng-template&gt;\n  &lt;ion-fab right bottom&gt;\n    &lt;button ion-fab icon-only (click)=&quot;onClickCreateMemo()&quot;&gt;\n      &lt;ion-icon name=&quot;add&quot; big&gt;&lt;/ion-icon&gt;\n    &lt;/button&gt;\n  &lt;/ion-fab&gt;\n&lt;/ion-content&gt;</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"typescript**src/pages/memo-detail/memo-detail.ts**\"><pre class=\"language-typescript**src/pages/memo-detail/memo-detail.ts**\"><code class=\"language-typescript**src/pages/memo-detail/memo-detail.ts**\">import { MemoManagerProvider } from &#39;./../../providers/memo-manager/memo-manager&#39;;\nimport { Memo } from &#39;./../../models/memo/memo.interface&#39;;\nimport { Component, OnInit } from &#39;@angular/core&#39;;\nimport { IonicPage, NavController, NavParams } from &#39;ionic-angular&#39;;\n\nimport { MemoCreatePage } from &#39;./../memo-create/memo-create&#39;;\n\n@IonicPage()\n@Component({\n  selector: &#39;page-memo-detail&#39;,\n  templateUrl: &#39;memo-detail.html&#39;,\n})\n\nexport class MemoDetailPage {\n\n  memo: Memo;\n  title: string;\n  contents: string;\n\n  constructor(\n    public navCtrl: NavController, \n    public navParams: NavParams,\n    public memoManager: MemoManagerProvider) {\n  }\n  \n  ngOnInit() {\n    this.memo = this.navParams.get(&#39;memo&#39;);\n  }\n\n  onOpenEditMemo(memo: Memo) {\n    this.navCtrl.push(MemoCreatePage, { memo: memo });\n  }\n  \n  onDeleteMemo(memo: Memo) {\n    this.memoManager.deleteMemo(memo);\n    this.navCtrl.pop();\n  }\n}</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"html**src/pages/memo-detail/memo-detail.html**\"><pre class=\"language-html**src/pages/memo-detail/memo-detail.html**\"><code class=\"language-html**src/pages/memo-detail/memo-detail.html**\">&lt;ion-header&gt;\n  &lt;ion-navbar color=&quot;danger&quot;&gt;\n    &lt;ion-title&gt;메모 상세&lt;/ion-title&gt;\n    &lt;ion-buttons end&gt;\n      &lt;button ion-button icon-only (click)=&quot;onDeleteMemo(memo)&quot;&gt;\n        &lt;ion-icon name=&quot;trash&quot;&gt;&lt;/ion-icon&gt;\n      &lt;/button&gt;\n      &lt;button ion-button icon-only (click)=&quot;onOpenEditMemo(memo)&quot;&gt;\n        &lt;ion-icon name=&quot;hammer&quot;&gt;&lt;/ion-icon&gt;\n      &lt;/button&gt;\n    &lt;/ion-buttons&gt;\n  &lt;/ion-navbar&gt;\n&lt;/ion-header&gt;\n&lt;ion-content&gt;\n  &lt;ion-card&gt;\n    &lt;ion-card-header&gt;\n      &lt;h1&gt;{{ memo.title }}&lt;/h1&gt;\n    &lt;/ion-card-header&gt;\n    &lt;ion-card-content&gt;\n      &lt;p&gt;{{ memo.contents }}&lt;/p&gt;\n      &lt;div class=&quot;etc&quot;&gt;\n        &lt;p&gt;\n          &lt;span&gt;저자&lt;/span&gt; \n          {{ memo.author }}\n        &lt;/p&gt;\n        &lt;p&gt;\n          &lt;span&gt;발행일&lt;/span&gt;\n          {{ memo.publishedDate | date }}\n        &lt;/p&gt;\n        &lt;p&gt;\n          &lt;span&gt;최근 수정일&lt;/span&gt;\n           {{ memo.recentUpdatedDate | date }}\n        &lt;/p&gt;\n      &lt;/div&gt;\n    &lt;/ion-card-content&gt;\n  &lt;/ion-card&gt;\n&lt;/ion-content&gt;</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"typescript**src/pages/memo-create/memo-create.ts**\"><pre class=\"language-typescript**src/pages/memo-create/memo-create.ts**\"><code class=\"language-typescript**src/pages/memo-create/memo-create.ts**\">import { MemoManagerProvider } from &#39;./../../providers/memo-manager/memo-manager&#39;;\nimport { Memo } from &#39;./../../models/memo/memo.interface&#39;;\nimport { Component, OnInit } from &#39;@angular/core&#39;;\nimport { IonicPage, NavController, NavParams } from &#39;ionic-angular&#39;;\n\n@IonicPage()\n@Component({\n  selector: &#39;page-memo-create&#39;,\n  templateUrl: &#39;memo-create.html&#39;,\n})\n\nexport class MemoCreatePage {\n  memo: Memo;\n  title: string;\n  contents: string;\n  constructor(\n    public navCtrl: NavController, \n    public navParams: NavParams,\n    public memoManager: MemoManagerProvider) {\n  }\n\n  ngOnInit() {\n    let memo = this.navParams.get(&#39;memo&#39;);\n    if(memo) {\n      this.memo = memo;\n      this.title = memo.title;\n      this.contents = memo.contents;\n    }\n  }\n\n  onChangeTitle(event: KeyboardEvent) {\n    this.title = event.target[&#39;value&#39;];\n  }\n  \n  onChangeContents(event: KeyboardEvent) {\n    this.contents = event.target[&#39;value&#39;];\n  }\n\n  onSaveMemo() {\n    if(this.memo) {\n      this.memoManager.editMemo(this.memo, this.title, this.contents);\n    } else {\n      this.memoManager.createMemo(this.title, this.contents, &#39;ddalpange@gmail.com&#39;);\n    }\n    this.navCtrl.pop();\n  }\n}</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"html**src/pages/memo-create/memo-create.html**\"><pre class=\"language-html**src/pages/memo-create/memo-create.html**\"><code class=\"language-html**src/pages/memo-create/memo-create.html**\">&lt;ion-header&gt;\n  &lt;ion-navbar color=&quot;secondary&quot;&gt;\n    &lt;ion-title&gt;메모 만들기&lt;/ion-title&gt;\n  &lt;/ion-navbar&gt;\n&lt;/ion-header&gt;\n&lt;ion-content padding&gt;\n  &lt;ion-list&gt;\n    &lt;ion-item&gt;\n      &lt;ion-input placeholder=&quot;제목을 입력해주세요.&quot; [value]=&quot;title&quot; (change)=&quot;onChangeTitle($event)&quot;&gt;&lt;/ion-input&gt;\n    &lt;/ion-item&gt;\n    &lt;ion-item&gt;\n      &lt;ion-textarea rows=&quot;50&quot; placeholder=&quot;내용을 입력해 주시겠어요 ?&quot; [value]=&quot;contents&quot; (change)=&quot;onChangeContents($event)&quot;&gt;&lt;/ion-textarea&gt;\n    &lt;/ion-item&gt;\n  &lt;/ion-list&gt;\n  &lt;ion-fab right bottom&gt;\n    &lt;button ion-fab icon-only color=&quot;secondary&quot; (click)=&quot;onSaveMemo()&quot;&gt;&lt;ion-icon name=&quot;checkmark&quot;&gt;&lt;/ion-icon&gt;&lt;/button&gt;\n  &lt;/ion-fab&gt;\n&lt;/ion-content&gt;</code></pre></div>\n<h3>완성되었습니다!!</h3>\n<hr>\n<p>참고 링크</p>\n<ul>\n<li><a href=\"https://github.com/ddalpange/simple-memo\">해당 포스트에 작성된 모든 코드는 여기에 있습니다!</a></li>\n<li><a href=\"https://memo-28314.firebaseapp.com\">해당 프로젝트는 여기서 볼 수 있습니다 !!</a></li>\n</ul>\n<!--stackedit_data:\neyJoaXN0b3J5IjpbLTM3MTEyODA0OCwxNDU2ODEwNTgyLDYxOT\ng3NjM2OF19\n-->","frontmatter":{"title":"간단한 메모장 만들기 3 - 목데이터 사용","date":"October 03, 2017","description":null}},"previous":{"fields":{"slug":"/2017-10-03-project-make-simple-memo-2/"},"frontmatter":{"title":"간단한 메모장 만들기 2 - 프로토타이핑"}},"next":{"fields":{"slug":"/2017-10-03-project-make-simple-memo-4/"},"frontmatter":{"title":"간단한 메모장 만들기 4 - Auth"}}},"pageContext":{"id":"3b5d642e-342a-5c60-9dba-bb558bd3edf2","previousPostId":"f934ed46-017a-5fa1-8aa3-e99db711b61b","nextPostId":"8d3ba775-cebe-530a-b69b-2781f071835c"}},
    "staticQueryHashes": ["230163734","2841359383"]}
{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/2017-10-10-js-clone-object/",
    "result": {"data":{"site":{"siteMetadata":{"title":"YH.K Logs"}},"markdownRemark":{"id":"cae4b708-fac7-56bc-9f00-0ed4af8242b1","excerpt":"시작하기 전에 A코드 B코드 A코드와 B…","html":"<h4>시작하기 전에</h4>\n<p><strong>A코드</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\nb <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>B코드</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> p <span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\nb<span class=\"token punctuation\">.</span>p <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>p<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">.</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>A코드와 B코드 두가지의 코드가 있다.\n두 코드 모두 <code class=\"language-text\">b에 a를 대입하였다.</code>라고 생각하는가?\n혹은\n두 코드 모두 <code class=\"language-text\">b에 a를 복사하였다</code>라고 생각하는가?</p>\n<!-- more -->\n<p>결론부터 말하자면 <strong>틀렸다</strong>.\n자바스크립트는 불변형의 데이터를 선언할 때 포인터와 값 모두 생성하지만,\n오브젝트(배열)을 생성할 때에는 메모리 절약을 위해 포인터만 새로 할당할 뿐이다.</p>\n<p>즉 A코드에서는 <code class=\"language-text\">b에 a를 복사하였다.</code>가 맞는것이고\nB코드에서는 <code class=\"language-text\">b에 a를 대입하였다.</code>가 맞는 해석이 된다.\n이제 B코드에서 <code class=\"language-text\">b에 a를 복사하였다</code>가 성립하도록 해보자.</p>\n<h4>1. <a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\">Object.assign()</a>을 이용</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">cloneObject</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Object.assign</strong>은 첫번째 인자로 들어오는 객체에 두번째 인자로 들어오는 객체의 프로퍼티들을 차례대로 덮어쓰기하여 반환하는 메소드이다.\n여기서 주의할 점은 <strong>Object.assign</strong>은 프로퍼티들에 대한 참조를 덮어쓰기하기 때문에, 오브젝트 안에 오브젝트 또는 배열이 있을 경우 복사가 아닌 참조를 하게된다.\n즉 객체를 <code class=\"language-text\">얕은 복사(Shallow Copy)</code>한다.</p>\n<h4>2. JSON 객체의 메소드를 이용</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">cloneObject</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>JSON.stringify</strong>는 자바스크립트 오브젝트를 스트링 포멧으로 변환하는 메소드이다.\n<strong>JSON.parse</strong>는 스트링 포멧을 자바스크립트 오브젝트로 변환하는 메소드이다.</p>\n<p>스트링으로 변환하였다가 다시 오브젝트로 변환하기 때문에 이전 객체에 대한 참조가 없어지지만 JSON 메소드 자체가 성능면에서 다른 방법에 비해 굉장히 느리기 때문에 주의해야한다.\n이 방법은 객체를 <code class=\"language-text\">깊은 복사(Deep Copy)</code>한다.</p>\n<h4>3. 자바스크립트 재귀 사용</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">cloneObject</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> clone <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token string\">\"object\"</span> <span class=\"token operator\">&amp;&amp;</span> obj<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n            clone<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">cloneObject</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span>\n            clone<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> clone<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>오브젝트의 프로퍼티들을 순회하여 빈 오브젝트에 더한다. 그 과정에서 원본 오브젝트의 프로퍼티가 오브젝트일 경우 재귀적으로 함수를 실행한다.\n이 방법은 객체를 <code class=\"language-text\">깊은 복사(Deep Copy)</code>한다.</p>\n<h4>4. <a href=\"https://facebook.github.io/immutable-js/\">Immutable.js</a> 사용</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Map <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'immutable'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> map <span class=\"token operator\">=</span> <span class=\"token function\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>a <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> newMap <span class=\"token operator\">=</span> map<span class=\"token punctuation\">;</span>\nnewMap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>페이스북에서 만든 오픈소스 라이브러리이다.\nImmutable을 쓰게된다면 Array, Map 모두 이뮤터블하게 쓸 수 있게된다.\n객체의 내부 값을 변경해도 원본 객체의 값은 변화하지 않고 새로운 객체를 배출한다는 뜻이다.\n사용법이 비교적 간편하지만 처음 보는 사람일 경우 적응하는데 어려움이 있을 수 있다.</p>\n<blockquote>\n<p>여담이지만 이 라이브러리를 사용할 때 로그를 찍을려면 <strong>toJS</strong>메소드를 사용하여 순수 자바스크립트 객체로 변환해야하는데 매번 까먹어서 불편했다 :(</p>\n</blockquote>\n<h4>정리하며</h4>\n<p>사실 유지보수나 신규개발을 하면서 객체의 딥카피가 필요한 경우는 많이 없었다.\n대부분 스왈로카피로 해결할 수 있으며 딥카피는 피하는것이 더 빠르고 직관적이기 때문이다.</p>\n<p>주의할 점은 단순히 <code class=\"language-text\">=</code>를 통해 변수를 대입하는것과  <code class=\"language-text\">얕은 복사</code>는 엄연히 다르다는 것이다.\n<code class=\"language-text\">=</code>와 <code class=\"language-text\">얕은 복사</code>와 <code class=\"language-text\">깊은 복사</code>의 차이만 알아가도 성공한것이 아닐까 ?\n이것을 모르는 개발자들이 적지 않아서 조금 놀랐다.</p>","frontmatter":{"title":"자바스크립트 객체 복사하기","date":"October 10, 2017","description":null}},"previous":{"fields":{"slug":"/2017-10-10-js-not-duplicated-object-array/"},"frontmatter":{"title":"자바스크립트 오브젝트 배열 중복 삭제하기"}},"next":{"fields":{"slug":"/2017-10-26-js-interview-example/"},"frontmatter":{"title":"자바스크립트 코딩 인터뷰 정리"}}},"pageContext":{"id":"cae4b708-fac7-56bc-9f00-0ed4af8242b1","previousPostId":"b8f1961b-6e70-5b95-82ab-44090d2641bf","nextPostId":"bdaaea0a-b8a2-58e6-9ab4-4463a5f97500"}},
    "staticQueryHashes": ["230163734","2841359383"]}
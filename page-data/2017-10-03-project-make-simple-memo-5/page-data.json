{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/2017-10-03-project-make-simple-memo-5/",
    "result": {"data":{"site":{"siteMetadata":{"title":"YH.K Logs"}},"markdownRemark":{"id":"cab051e8-e0ff-57c9-a3b8-ad0553d3278b","excerpt":"이번 시간에는 메모리스트를 파이어베이스의 데이터베이스를 사용하여 를 해볼게요. 이나 에서 기능 개선을 위해 변경한 코드가 일부 있으니, 감안하여 봐주세요. CRUD CRUD는 대부분의 컴퓨터 소프트웨어가 가지는 기본적인 데이터 처리 기능인 Create(생성), Read…","html":"<p>이번 시간에는 메모리스트를 파이어베이스의 데이터베이스를 사용하여 <code class=\"language-text\">CRUD</code>를 해볼게요. <code class=\"language-text\">html</code>이나 <code class=\"language-text\">ts</code>에서 기능 개선을 위해 변경한 코드가 일부 있으니, 감안하여 봐주세요.</p>\n<!-- more -->\n<p><strong>CRUD</strong></p>\n<blockquote>\n<p>CRUD는 대부분의 컴퓨터 소프트웨어가 가지는 기본적인 데이터 처리 기능인 Create(생성), Read(읽기), Update(갱신), Delete(삭제)를 묶어서 일컫는 말이다. 사용자 인터페이스가 갖추어야 할 기능(정보의 참조/검색/갱신)을 가리키는 용어로서도 사용된다.</p>\n</blockquote>\n<p><strong>Real Time Database</strong></p>\n<blockquote>\n<p>Firebase 실시간 데이터베이스는 클라우드 호스팅 데이터베이스입니다. <strong>데이터는 JSON으로 저장되며 연결된 모든 클라이언트에 실시간으로 동기화됩니다.</strong> iOS, Android 및 자바스크립트 SDK로 교차 플랫폼 앱을 개발하면 모든 클라이언트가 하나의 실시간 데이터베이스 인스턴스를 공유하고 자동 업데이트로 최신 데이터를 수신합니다.</p>\n</blockquote>\n<h3>인터페이스 변경하여 적용하기.</h3>\n<div class=\"gatsby-highlight\" data-language=\"typescriptsrc/models/memo/memo.interface.ts\"><pre class=\"language-typescriptsrc/models/memo/memo.interface.ts\"><code class=\"language-typescriptsrc/models/memo/memo.interface.ts\">export interface Memo {\n    uid: string;                    // 유저넘버\n    author: string;                 // 작성자\n    title: string;                  // 제목\n    contents: string;               // 본문\n    publishedDate: Date;           // 작성일\n    recentUpdatedDate: Date;      // 최근 수정일\n}</code></pre></div>\n<p><strong>key</strong>가 사라지고 <strong>uid</strong>가 추가되었습니다.</p>\n<h3>메모매니저 파이어베이스 연동</h3>\n<div class=\"gatsby-highlight\" data-language=\"typescriptsrc/providers/memo-manager/memo-manager.ts\"><pre class=\"language-typescriptsrc/providers/memo-manager/memo-manager.ts\"><code class=\"language-typescriptsrc/providers/memo-manager/memo-manager.ts\">import { AuthManagerProvider } from &#39;./../auth-manager/auth-manager&#39;;\nimport { Memo } from &#39;./../../models/memo/memo.interface&#39;;\nimport { Injectable } from &#39;@angular/core&#39;;\nimport { Http } from &#39;@angular/http&#39;;\nimport { AngularFireDatabase, FirebaseListObservable } from &#39;angularfire2/database&#39;;\n\n/*\n  Generated class for the MemoManagerProvider provider.\n\n  See https://angular.io/docs/ts/latest/guide/dependency-injection.html\n  for more info on providers and Angular DI.\n*/\n@Injectable()\nexport class MemoManagerProvider {\n\n  memoList: FirebaseListObservable&lt;any&gt;\n\n  constructor(\n    public http: Http,\n    public afDB: AngularFireDatabase,\n    public authManager: AuthManagerProvider\n  ) {\n    this.initMemoList();\n  }\n\n  initMemoList() {\n    this.memoList = this.afDB.list(`/memoList/${this.authManager.getUserInfo().uid}`);\n  }\n\n  getMemoList(): FirebaseListObservable&lt;Memo&gt; {\n    return this.memoList;\n  }\n\n  createMemo(title: string, contents: string) {\n\n    let memo: Memo = {\n      uid: this.authManager.getUserInfo().uid,\n      title: title,\n      contents: contents,\n      author: this.authManager.getUserInfo().email,\n      publishedDate: new Date(),\n      recentUpdatedDate: new Date(),\n    }\n\n    this.memoList.push(memo);\n  }\n\n  deleteMemo(deleteMemo: any) {\n    this.memoList.remove(deleteMemo);\n  }\n\n  editMemo(memoToChange: Memo, title: string, contents: string) {\n    memoToChange.title = title;\n    memoToChange.contents = contents;\n    memoToChange.recentUpdatedDate = new Date();\n  }\n}</code></pre></div>\n<p>변경 및 생성을 하면 자동으로 <strong>Observable</strong>이 구독하여 변경사항이 반영됩니다.</p>\n<h3>메모리스트페이지에 반영하기</h3>\n<div class=\"gatsby-highlight\" data-language=\"htmlsrc/pages/memo-list/memo-list.html\"><pre class=\"language-htmlsrc/pages/memo-list/memo-list.html\"><code class=\"language-htmlsrc/pages/memo-list/memo-list.html\">&lt;ion-header&gt;\n  &lt;ion-navbar color=&quot;primary&quot;&gt;\n    &lt;ion-searchbar [(ngModel)]=&quot;searchKeyword&quot;&gt;&lt;/ion-searchbar&gt;\n    &lt;ion-buttons end&gt;\n      &lt;button ion-button icon-only (click)=&quot;onClickMoreOption()&quot;&gt;\n        &lt;ion-icon name=&quot;more&quot;&gt;\n        &lt;/ion-icon&gt;\n      &lt;/button&gt;\n    &lt;/ion-buttons&gt;\n  &lt;/ion-navbar&gt;\n&lt;/ion-header&gt;\n&lt;ion-content&gt;\n  &lt;ng-template ngFor let-memo [ngForOf]=&quot;memoList | async&quot; let-i=&quot;index&quot;&gt;\n    &lt;ion-card (click)=&quot;onClickViewMemoDetail(memo)&quot; *ngIf=&quot;filterMemo(memo)&quot;&gt;\n      &lt;ion-card-header&gt;\n        {{ memo.title }}\n      &lt;/ion-card-header&gt;\n      &lt;ion-card-content&gt;\n        {{ memo.contents }}\n      &lt;/ion-card-content&gt;\n    &lt;/ion-card&gt;\n  &lt;/ng-template&gt;\n  &lt;ion-fab right bottom&gt;\n    &lt;button ion-fab icon-only (click)=&quot;onClickCreateMemo()&quot;&gt;\n      &lt;ion-icon name=&quot;add&quot; big&gt;&lt;/ion-icon&gt;\n    &lt;/button&gt;\n  &lt;/ion-fab&gt;\n&lt;/ion-content&gt;</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"typescriptsrc/pages/memo-list/memo-list.ts\"><pre class=\"language-typescriptsrc/pages/memo-list/memo-list.ts\"><code class=\"language-typescriptsrc/pages/memo-list/memo-list.ts\">import { AuthManagerProvider } from &#39;./../../providers/auth-manager/auth-manager&#39;;\nimport { FirebaseListObservable } from &#39;angularfire2/database&#39;;\nimport { Memo } from &#39;./../../models/memo/memo.interface&#39;;\nimport { Component, OnInit } from &#39;@angular/core&#39;;\nimport { IonicPage, NavController, NavParams, LoadingController, ActionSheetController } from &#39;ionic-angular&#39;;\n\nimport { MemoCreatePage } from &#39;./../memo-create/memo-create&#39;;\nimport { MemoDetailPage } from &#39;./../memo-detail/memo-detail&#39;;\n\nimport { MemoManagerProvider } from &#39;./../../providers/memo-manager/memo-manager&#39;;\n@IonicPage()\n\n@Component({\n  selector: &#39;page-memo-list&#39;,\n  templateUrl: &#39;memo-list.html&#39;,\n})\n\nexport class MemoListPage {\n\n  searchKeyword: string = &#39;&#39;;\n  memoList: FirebaseListObservable&lt;Memo&gt;;\n\n  constructor(\n    public navCtrl: NavController,\n    public navParams: NavParams,\n    public loadingCtrl: LoadingController,\n    public actionSheetCtrl: ActionSheetController,\n    public authManager: AuthManagerProvider,\n    public memoManager: MemoManagerProvider) {\n  }\n \n  ngOnInit() {\n    this.memoList = this.memoManager.getMemoList();\n  }\n\n  filterMemo(memo: Memo): boolean {\n    return memo.title.includes(this.searchKeyword) || memo.title.includes(this.searchKeyword);\n  }\n\n  onClickViewMemoDetail(memo: Memo) {\n    this.navCtrl.push(MemoDetailPage, { memo: memo });\n  }\n  \n  onClickCreateMemo() {\n    this.navCtrl.push(MemoCreatePage);\n  }\n\n  onClickMoreOption() {\n    const actionSheet = this.getMoreOptionActionSheet();\n    actionSheet.present();\n  }\n\n  getMoreOptionActionSheet() {\n    return this.actionSheetCtrl.create({\n      buttons: [\n        {\n          text: &#39;Logout&#39;,\n          role: &#39;destructive&#39;,\n          handler: () =&gt; {\n            this.authManager.logoutUser();\n          }\n        }, {\n          text: &#39;Cancel&#39;,\n          role: &#39;cancel&#39;\n        }\n      ]\n    });\n  }\n}</code></pre></div>\n<h3>그 외 html 변경사항들입니다.</h3>\n<div class=\"gatsby-highlight\" data-language=\"htmlsrc/pages/memo-detail/memo-detail.html\"><pre class=\"language-htmlsrc/pages/memo-detail/memo-detail.html\"><code class=\"language-htmlsrc/pages/memo-detail/memo-detail.html\">&lt;ion-header&gt;\n  &lt;ion-navbar&gt;\n    &lt;ion-buttons end&gt;\n      &lt;button ion-button icon-only (click)=&quot;onDeleteMemo(memo)&quot;&gt;\n        &lt;ion-icon name=&quot;trash&quot;&gt;&lt;/ion-icon&gt;\n      &lt;/button&gt;\n      &lt;button ion-button icon-only&gt;\n        &lt;ion-icon name=&quot;more&quot;&gt;&lt;/ion-icon&gt;\n      &lt;/button&gt;\n    &lt;/ion-buttons&gt;\n  &lt;/ion-navbar&gt;\n&lt;/ion-header&gt;\n&lt;ion-content&gt;\n  &lt;ion-card (click)=&quot;onOpenEditMemo(memo)&quot;&gt;\n    &lt;ion-card-header&gt;\n      &lt;h1&gt;{{ memo.title }}&lt;/h1&gt;\n    &lt;/ion-card-header&gt;\n    &lt;ion-card-content&gt;\n      &lt;p&gt;\n        {{ memo.contents }}\n      &lt;/p&gt;\n      &lt;div class=&quot;etc&quot;&gt;\n        &lt;p&gt;\n          &lt;span&gt;저자&lt;/span&gt; \n          {{ memo.author }}\n        &lt;/p&gt;\n        &lt;p&gt;\n          &lt;span&gt;발행일&lt;/span&gt;\n          {{ memo.publishedDate }}\n        &lt;/p&gt;\n        &lt;p&gt;\n          &lt;span&gt;최근 수정일&lt;/span&gt;\n           {{ memo.recentUpdatedDate }}\n        &lt;/p&gt;\n      &lt;/div&gt;\n    &lt;/ion-card-content&gt;\n  &lt;/ion-card&gt;\n&lt;/ion-content&gt;</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"htmlsrc/pages/memo-detail/memo-detail.html\"><pre class=\"language-htmlsrc/pages/memo-detail/memo-detail.html\"><code class=\"language-htmlsrc/pages/memo-detail/memo-detail.html\">&lt;ion-header&gt;\n  &lt;ion-navbar color=&quot;secondary&quot;&gt;\n  &lt;/ion-navbar&gt;\n&lt;/ion-header&gt;\n&lt;ion-content&gt;\n  &lt;ion-list&gt;\n    &lt;ion-item&gt;\n      &lt;ion-label floating&gt;제목을 입력해주세요.&lt;/ion-label&gt;\n      &lt;ion-input type=&quot;text&quot; [(ngModel)]=&quot;title&quot;&gt;&lt;/ion-input&gt;\n    &lt;/ion-item&gt;\n    &lt;ion-item&gt;\n      &lt;ion-label floating&gt;내용을 입력해주세요.&lt;/ion-label&gt;\n      &lt;ion-textarea rows=&quot;18&quot; type=&quot;text&quot; [(ngModel)]=&quot;contents&quot;&gt;&lt;/ion-textarea&gt;\n    &lt;/ion-item&gt;\n  &lt;/ion-list&gt;\n  &lt;ion-fab right bottom&gt;\n    &lt;button ion-fab icon-only color=&quot;secondary&quot; (click)=&quot;onSaveMemo()&quot;&gt;&lt;ion-icon name=&quot;checkmark&quot;&gt;&lt;/ion-icon&gt;&lt;/button&gt;\n  &lt;/ion-fab&gt;\n&lt;/ion-content&gt;</code></pre></div>\n<hr>\n<p>참고 링크</p>\n<ul>\n<li><a href=\"https://github.com/ddalpange/simple-memo\">해당 포스트에 작성된 모든 코드는 여기에 있습니다!</a></li>\n<li><a href=\"https://memo-28314.firebaseapp.com\">해당 프로젝트는 여기서 볼 수 있습니다 !!</a></li>\n</ul>","frontmatter":{"title":"간단한 메모장 만들기 5 - CRUD","date":"October 03, 2017","description":null}},"previous":{"fields":{"slug":"/2017-10-03-project-make-simple-memo-4/"},"frontmatter":{"title":"간단한 메모장 만들기 4 - Auth"}},"next":{"fields":{"slug":"/2017-10-03-project-make-simple-memo-6/"},"frontmatter":{"title":"간단한 메모장 만들기 6 - 무한 스크롤 적용"}}},"pageContext":{"id":"cab051e8-e0ff-57c9-a3b8-ad0553d3278b","previousPostId":"8d3ba775-cebe-530a-b69b-2781f071835c","nextPostId":"a9d2a455-c0d4-58bf-8590-60400b2e3c71"}},
    "staticQueryHashes": ["230163734","2841359383"]}
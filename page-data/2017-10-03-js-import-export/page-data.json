{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/2017-10-03-js-import-export/",
    "result": {"data":{"site":{"siteMetadata":{"title":"YH.K Logs"}},"markdownRemark":{"id":"f071e8db-e897-5a6f-ac88-e2f55184316c","excerpt":"자바스크립트 프로젝에서 상수를 관리하기 위한 방법을 설명하는 글. Import, Export 기존 프로젝트 유지보수를 진행하다 보면 “AS20342”과 같은 특정한 코드값들이 있다. 그러한 코드값들은 전부 공통으로 모아 상수로 빼는게 상책인데, import, export…","html":"<p>자바스크립트 프로젝에서 상수를 관리하기 위한 방법을 설명하는 글.</p>\n<!-- more -->\n<h3>Import, Export</h3>\n<p>기존 프로젝트 유지보수를 진행하다 보면 “AS20342”과 같은 특정한 코드값들이 있다. 그러한 코드값들은 전부 공통으로 모아 상수로 빼는게 상책인데, import, export를 어떻게 해야할지 감이 오질 않았다. 아래 내용은 공통함수를 뺄때까지의 과정이다.</p>\n<h4>1. Obejct형태로 Export한다.</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"ddalpange\"</span><span class=\"token punctuation\">,</span>\n  password<span class=\"token operator\">:</span> <span class=\"token number\">123456</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> obj<span class=\"token punctuation\">;</span></code></pre></div>\n<p>-> 나쁘지 않은 방법이다. 하지만 오브젝트를 const로 선언한다면 오브젝트의 프로퍼티 값은 const가 아니기 때문에 obj.name  = “puppy”와 같이 값 자체를 바꿀 수 있다. 엄밀히 따지자면 상수가 아닌 셈이다. (Object.freeze()라는 것을 사용하면 될 수도 ??)</p>\n<h4>2. Class 형태로 Export한다.</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">test</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"name\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"ddalpange\"</span><span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">keyName</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">keyName</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>obj<span class=\"token punctuation\">[</span>keyName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>-> 이상하다. 그저 변수 하나를 뺴기 위하여 클래스를 선언한다는 것은 값어치가 없는 일이다.</p>\n<h4>3. const 선언을 할 떄 마다 export를 붙여준다.</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> c <span class=\"token operator\">=</span> <span class=\"token string\">\"3\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>-> 이 방법이 제일 좋은 방법인 것 같다. 하지만 위의 방법으로 Export하여 사용할려면 Import의 방식이 다르다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">Import <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> test from <span class=\"token punctuation\">{</span><span class=\"token constant\">SRC</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>위와 같이 Import하면 test.a, test.b 와 같이 접근할 수 있다.</p>\n<p>test라는 오브젝트의 프로퍼티에 접근한다고 생각하면 쉬울 듯 하다 :)</p>\n<p>별것 아닌것 같아 보이지만 찾느라 고생을 많이 한 것 같다.</p>\n<p>프로젝트 폴더구조가 알아보기 쉽지않고, import, export 경로 찾기도 매우 어려운데</p>\n<p>나중에 폴더마다 index.js를 만들어 import하기 쉽게 만들어야겠다.</p>\n<!--stackedit_data:\neyJoaXN0b3J5IjpbLTI0MTU5NTUyNF19\n-->","frontmatter":{"title":"임포트와 익스포트","date":"October 03, 2017","description":null}},"previous":{"fields":{"slug":"/2017-10-03-ionic-postcss-error/"},"frontmatter":{"title":"아이오닉 postCss 에러"}},"next":{"fields":{"slug":"/2017-10-03-js-pureFunc/"},"frontmatter":{"title":"순수 함수 (Pure Function)"}}},"pageContext":{"id":"f071e8db-e897-5a6f-ac88-e2f55184316c","previousPostId":"75c83c40-38f2-5b4e-afba-336a1959bbb5","nextPostId":"d05f8425-51bd-5981-9427-ad973592b9a7"}},
    "staticQueryHashes": ["230163734","2841359383"]}
{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/2017-10-03-js-pureFunc/",
    "result": {"data":{"site":{"siteMetadata":{"title":"YH.K Logs"}},"markdownRemark":{"id":"d05f8425-51bd-5981-9427-ad973592b9a7","excerpt":"요즘 힙한 프로그래밍 기법중 하나인 순수함수에 대해 알아보자. 순수함수의 정의 순수 함수(pure function)는 순수 입력과 순수 출력으로 구성되어 있다. 즉 순수 함수는 부수 효과(Side-Effect…","html":"<p>요즘 힙한 프로그래밍 기법중 하나인 순수함수에 대해 알아보자.</p>\n<!-- more -->\n<h3>순수함수의 정의</h3>\n<p>순수 함수(pure function)는 순수 입력과 순수 출력으로 구성되어 있다. 즉 순수 함수는 부수 효과(Side-Effect)가 없는 함수이다. 사이드 이펙트가 없다면 함수는 언제, 어디서나, 몇번이든 동일한 출력을 갖는다. 즉 똑같은 입력값에 대하여 똑같은 출력값을 돌려주는 것 의외에 다른 기능은 하지 않아야 한다. 이런 개념을 참조 투명성이라고 한다.</p>\n<p><em><strong>부수효과 (Side Effect)</strong></em></p>\n<blockquote>\n<p>함수의 입력 -> 실행 -> 출력 과정에서 외부에 있는 어떠한 것에 의해 함수의 출력값이 바뀌는 것을 의미한다.</p>\n</blockquote>\n<p><em><strong>참조 투명성 (referential transparency, RT)</strong></em></p>\n<blockquote>\n<p>모든 프로그램에 대해 어떤 표현식(expression) e를 모두 그 표현식의 결과로 치환해도 프로그램에 아무 영향이 없다면 그 표현식 e는 참조에 투명하다(referentially transparent).</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> outside <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">F</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> inside <span class=\"token operator\">=</span> outside <span class=\"token operator\">+</span> x<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> inside<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token constant\">F</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위의 함수는 순수 함수가 아니다. 함수의 외부스코프에있는 <code class=\"language-text\">outside</code>의 값이 변하면 <code class=\"language-text\">F(5)</code>의 값도 같이 변하기 때문이다.</p>\n<p>만약 <code class=\"language-text\">outside</code>가 <code class=\"language-text\">var</code>가 아닌 <code class=\"language-text\">const</code>로 선언되었다면 함수 F는 순수 함수라 할 수 있다. 외부 변수인 <code class=\"language-text\">outside</code>는 읽기 전용이며, 값이 바뀔 염려가 없기 때문이다.</p>\n<h3>순수함수의 장점은 무엇인가?</h3>\n<ol>\n<li>모듈성\n로직 처리에 쓰이는 모든 변수를 파라미터로 받는다면, 함수의 모듈성은 크게 증가한다. 한 클래스의 메소드를 다른 클래스에서 다른 쪽에서 쓸 일이 생긴다면, 공통유틸에 이동하기만 하면 되기 때문이다.</li>\n<li>테스트\n함수에서 로직을 처리할 때 모든 것을 <code class=\"language-text\">this</code> 에서 참조한다고 가정할 때 클래스가 커지면 전역 프로퍼티의 흐름을 알 수 없기 때문에, 디버깅이 매우 어렵다.</li>\n</ol>\n<h3>의문을 가져보자.</h3>\n<p>** 입력값에 영향을 준다면 그것은 순수함수라고 할 수 있는가? **</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">test</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> test <span class=\"token operator\">+</span> <span class=\"token string\">'world'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> string <span class=\"token operator\">=</span> <span class=\"token string\">'hello'</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'hello world';</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'hello'</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">test2</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">array</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> array<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'world'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'hello world'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'hello world'</span></code></pre></div>\n<p>위의 함수는 함수에 파라미터로 전달한 <code class=\"language-text\">string</code> 변수의 값이 함수 <code class=\"language-text\">test</code>를 실행한 후에도 영향을 받지 않았지만, 아래 예제의 <code class=\"language-text\">array</code>는 입력 변수의 값이 바뀌어 버렸다.\n기본적으로 자바스크립트에서 <code class=\"language-text\">string</code>은 불변 객체이고, <code class=\"language-text\">array</code>는 가변 객체이기 때문이다. 생각해보자. <code class=\"language-text\">test2</code> 함수는 <strong>순수 함수라고 할 수 있는가?</strong> (사내 스터디중 경력자 분께 직접 물어본 질문이다.)</p>\n<p>경력자분은 “순수함수라 할 수 있다.” 라고 대답하셨다. 순수 함수에서 입력값의 변화에 관한건 정의가 되어있지 않기 때문에, 입력값의 변경 여부는 순수함수와는 거리가 멀다는 의견이었다.\n하지만 내 생각은 좀 다르다. 인풋으로 들어간 값이 불변이 아니라 가변이여서 함수를 호출할 때마다 바뀐다면, 함수를 매번 호출할때마다 값이 다르게 나올 것이다. 특히 멀티 스레드나 멀티 프로세싱과 같이 한 데이터를 동시에 병렬처리를 진행한다면, 원하지 않는 값이 매번 도출될 것이다.</p>\n<p>그래서 파라미터로 넘겨준 값은 함수가 실행된 후에도 변하지 않아야 한다는게 내 생각이다.</p>\n<p>최종적으로 순수함수에 대해 정의를 내려보자면 <em><strong>순수함수는 부수효과가 없으며 입력값이 같으면 동일한 출력값을 내뱉고 입력값에 영향을 주지 않는 함수이다.</strong></em> 라고 할 수 있겠다.</p>\n<!--stackedit_data:\neyJoaXN0b3J5IjpbMTE4MTA2MTIzMCw4MzcwODcyMjddfQ==\n-->","frontmatter":{"title":"순수 함수 (Pure Function)","date":"October 03, 2017","description":null}},"previous":{"fields":{"slug":"/2017-10-03-js-import-export/"},"frontmatter":{"title":"임포트와 익스포트"}},"next":{"fields":{"slug":"/2017-10-03-algorithm-make-thin-wallet/"},"frontmatter":{"title":"가장 얇은 지갑 만들기"}}},"pageContext":{"id":"d05f8425-51bd-5981-9427-ad973592b9a7","previousPostId":"f071e8db-e897-5a6f-ac88-e2f55184316c","nextPostId":"9f0ea45a-1cef-5c87-b6b3-bab1485654d0"}},
    "staticQueryHashes": ["230163734","2841359383"]}
{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/2019-01-09-redux-step1/",
    "result": {"data":{"site":{"siteMetadata":{"title":"YH.K Logs"}},"markdownRemark":{"id":"3a2ce80f-e4e8-5b31-8e94-18414223db10","excerpt":"…","html":"<p>현재 <code class=\"language-text\">RxJS</code>와 <code class=\"language-text\">Vuex</code>를 쓰고 있는데 뭐니뭐니해도 대세는 <code class=\"language-text\">Redux</code>다. <code class=\"language-text\">Redux</code>를 심도깊게 본적이 없어서 이번기회에 정리할려고 한다. 많은 사람들이 <code class=\"language-text\">React</code>와 <code class=\"language-text\">Redux</code>를 세트메뉴로 생각하시는 분들이 많은데 나는 그냥 <code class=\"language-text\">Redux</code>에만 초점을 맞추고자 한다. 이번 포스트에는 간단히 <code class=\"language-text\">Redux</code>와 <code class=\"language-text\">Flux</code>의 차이를 알아보고 리덕스를 구현해보자.</p>\n<!-- more -->\n<h2>작성 예정 포스트</h2>\n<ol>\n<li>리덕스란 무엇인가</li>\n<li>리덕스의 미들웨어에 대하여 알아보자.</li>\n<li>리액트와 리덕스를 연결해보자.</li>\n<li>리덕스청크와 리덕스사가의 차이점은?</li>\n</ol>\n<h2>Redux와 Flux의 차이점</h2>\n<p><img src=\"https://cdn-images-1.medium.com/max/949/1*3lvNEQE4SF6Z1l-680cfSQ.jpeg\" alt=\"Redux와 Flux의 차이\"></p>\n<p><code class=\"language-text\">Flux</code>와 대비되는 <code class=\"language-text\">Redux</code>의 주요 특징을 꼽자면 <strong>하나의 스토어</strong>와 <strong>리듀서</strong> 그리고 <strong>불변</strong>이라는 개념을 탑재했다. 어려워보이지만 별거 없다. 하나하나 따라치며 구현하다 보면 저절로 생각이 정리될 것이다.</p>\n<h2>코드로 구현해보자</h2>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">npm i -S redux</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"jsactions.js\"><pre class=\"language-jsactions.js\"><code class=\"language-jsactions.js\">let nextTodoId = 0;\n\nexport const addTodo = text =&gt; ({\n  type: &quot;ADD_TODO&quot;,\n  id: nextTodoId++,\n  text\n});</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"jsreducers.js\"><pre class=\"language-jsreducers.js\"><code class=\"language-jsreducers.js\">import { combineReducers } from &quot;redux&quot;;\n\nexport default combineReducers({\n  todos: (todos = [], action) =&gt; {\n    switch (action.type) {\n      case &quot;ADD_TODO&quot;:\n        return [\n          ...todos,\n          {\n            id: action.id,\n            text: action.text,\n            completed: false\n          }\n        ];\n      default:\n        return todos;\n    }\n  }\n});</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"jsindex.js\"><pre class=\"language-jsindex.js\"><code class=\"language-jsindex.js\">import { createStore } from &quot;redux&quot;;\nimport { addTodo } from &quot;./actions&quot;;\nimport reducers from &quot;./reducers&quot;;\n\nconst store = createStore(reducers);\n\nlog(&quot;before&quot;, store.getState());\nstore.dispatch(addTodo(&quot;Hello world&quot;));\nlog(&quot;after&quot;, store.getState());\n\nfunction log(label, json) {\n  const app = document.getElementById(&quot;app&quot;);\n  app.innerHTML += `&lt;h1&gt;${label}&lt;h1&gt;`;\n  app.innerHTML += `&lt;pre&gt;${JSON.stringify(json, undefined, 2)}&lt;/pre&gt;`;\n}</code></pre></div>\n<p>간단하게 보자면 <code class=\"language-text\">action</code>에 비지니스 로직(비동기 통신 등)이 들어가고 리턴한 값을 <code class=\"language-text\">reducer</code>에서 <code class=\"language-text\">state</code>에 세팅한다.\n즉 <code class=\"language-text\">initial state</code> -> <code class=\"language-text\">action</code> -> <code class=\"language-text\">reducer</code> -> <code class=\"language-text\">changed state</code> 의 순서이다. 여기서 중요한 점은 <code class=\"language-text\">reducer</code>에서 들어온 인자값과 내뱉는 리턴값 사이의 종속성이 없어야하며, 인자가 아닌 외부 값들에 의하여 리턴값이 영향을 받아서는 안된다.\n즉 <code class=\"language-text\">reducer</code>는 <strong>순수함수</strong>여야만 한다. <strong>순수함수</strong>에 대한 설명은 이 <a href=\"https://ddalpange.github.io/2017/10/03/js-pureFunc/\">포스트</a>를 참고하면 좋다.</p>\n<h2>완성본 보기</h2>\n<p>CodeSandbox에 올려두었다.</p>\n<iframe src=\"https://codesandbox.io/embed/7jm4xr7lv6\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"></iframe>\n<p>다음 포스트에서는<code class=\"language-text\">Action</code>에서 비동기 통신을 도와주는 미들웨어를 소개할 예정이다.</p>","frontmatter":{"title":"Redux 마스터하기 - 리덕스란 무엇인가","date":"January 09, 2019","description":null}},"previous":{"fields":{"slug":"/2018-12-31-remember-2018/"},"frontmatter":{"title":"2018년 회고"}},"next":{"fields":{"slug":"/2019-01-11-redux-step2/"},"frontmatter":{"title":"Redux 마스터하기 - 리덕스의 미들웨어에 대하여 알아보자."}}},"pageContext":{"id":"3a2ce80f-e4e8-5b31-8e94-18414223db10","previousPostId":"b9322025-363c-53a1-9895-c324fe05e141","nextPostId":"77767685-eeaa-559b-b363-62a11bf3826a"}},
    "staticQueryHashes": ["230163734","2841359383"]}
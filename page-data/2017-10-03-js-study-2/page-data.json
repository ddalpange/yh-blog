{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/2017-10-03-js-study-2/",
    "result": {"data":{"site":{"siteMetadata":{"title":"YH.K Logs"}},"markdownRemark":{"id":"6e41194a-fef8-5307-87e9-2d23cfcd8a13","excerpt":"자바스크립트의 자료형에 대하여 알아보자. Number 자바스크립트는 다른 언어와 다르게 실수와 정수값을 구분하지 않습니다. 자바스크립트는 모든 숫자를 실수로 표현합니다. 자바스크립트는 숫자를 IEEE 754 표준에서 정의한 64비트 실수 형태로 표현합니다. 따라서 가장 큰 숫자로…","html":"<p>자바스크립트의 자료형에 대하여 알아보자.</p>\n<!-- more -->\n<h2>Number</h2>\n<ol>\n<li>자바스크립트는 다른 언어와 다르게 실수와 정수값을 구분하지 않습니다.</li>\n<li>자바스크립트는 모든 숫자를 실수로 표현합니다.</li>\n<li>자바스크립트는 숫자를 IEEE 754 표준에서 정의한 64비트 실수 형태로 표현합니다. 따라서 가장 큰 숫자로 1.7976931348623157e+308 까지, 작게는 5e-324 만큼 표현할 수 있습니다.</li>\n<li>자바스크립트는 1.7976931348623157e+308 와 5e-324 사이의 정수 값을 정활하게 표현할 수 있습니다. 이보다 더 큰 정수 값을 사용한다면 낮은 자리에 대한 정밀도를 잃을수도 있습니다. 또 자바스크립트는 배열 인덱싱이나 비트연산과 같은 특정한 연산은 32비트 정수로 수행합니다.</li>\n<li>프로그램 안에서 그대로 등장하는 숫자를 숫자 리터럴(numeric literal)이라고 합니다.</li>\n<li>숫자 리터럴은 왼쪽에 -를 표기하는 것으로 음수를 표현할 수 있습니다. 하지만 기술적으로 -는 단항 연산자이지 숫자 리터럴의 일부는 아닙니다.</li>\n</ol>\n<h3>정수 리터럴</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token number\">0</span>\n<span class=\"token number\">3</span>\n<span class=\"token number\">100000</span></code></pre></div>\n<ul>\n<li>자바스크립트는 10진수 외에도 16진수를 인식합니다.</li>\n<li>16진수 리터럴은 “0x” 또는 “0X” 뒤에 16진수 숫자들이 뒤따르는 형태입니다.</li>\n<li>16진수 숫자는 0에서 9까지의 문자와 10부터 15까지의 숫자를 표현하는 a부터 f까지의 문자중 하나입니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token number\">0xff</span> <span class=\"token comment\">// 15*16 + 15 = 255</span>\n<span class=\"token number\">0xaaa</span> <span class=\"token comment\">// 10*16 + 10*16 + 10 = 2730</span></code></pre></div>\n<ul>\n<li>일부 자바스크립트 구현체에서는 정수 리터럴을 8진수로도 표현할 수 있습니다.</li>\n<li>하지만 ECMAScript 표준에서 8진수 표현을 지원하지 않습니다.</li>\n<li>8진수 리터럴은 숫자 0뒤에 0부터 7사이의 숫자 시퀸스가 뒤따르는 형태입니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token number\">0377</span> <span class=\"token comment\">// 3*64 + 7*8 + 7 + 255</span></code></pre></div>\n<ul>\n<li>자바스크립트 구현체에 따라 8진수를 지원하지 않을 수 있기 때문에 0으로 시작하는 정수 리터럴은 절대 사용하지 말아야합니다.</li>\n<li>ECMAScript5의 Strict 모드에서는 8진수 리터럴을 명시적으로 금지하고 있습니다.</li>\n</ul>\n<h3>부동소수점 리터럴</h3>\n<ul>\n<li>부동소수점(floating-point) 리터럴은 소수점을 가질 수 있다. 부동 소수점 리터럴은 실수를 표현하는 전통적인 문법을 따른다. 실수는 정수 부분과 소수점, 소수점 이하 부분으로 표현한다.</li>\n<li>부동소수점 리터럴은 지수 표기법으로도 표현할 수 있다. 실수에 이어 문자 e(혹은 E)가 따라나오고, 그 뒤에 선택적으로 덧셈 혹은 뺄셈 기호가 나타나고 마지막으로 정수 지수 값이 따라온다.</li>\n<li>지수 표기법으로 표현한 값은 실수에 10을 지수 횟수만큼 곱한 값을 나타낸다.</li>\n<li>부동소수점 표기법을 간단히 표현하면 다음과 같다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[\"digits\"][.\"digits\"][(E|e)\"digits\"]</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token number\">3.14</span>\n<span class=\"token number\">2345.789</span>\n<span class=\"token number\">.333333333333333333</span> <span class=\"token comment\">// 0.333333333333333333</span>\n<span class=\"token number\">6.02e23</span> <span class=\"token comment\">// 6.02e+23  6.02 x 10^23 (10의 23승)</span>\n<span class=\"token number\">1.4738223E-32</span> <span class=\"token comment\">// 1.4738223e-32  1.4738223 x 10^-32 (10의 -32승)</span></code></pre></div>\n<h3>산술 연산자</h3>\n<ul>\n<li>\n<p>자바스크립트에서는 언어에서 제공하는 산술 연산자를 사용하여 숫자를 다룬다.</p>\n<ol>\n<li>덧셈 +</li>\n<li>뺄셈 -</li>\n<li>곱셈 *</li>\n<li>나눗셈 /</li>\n<li>나눗셈 연산을 한 후 나머지 %</li>\n</ol>\n</li>\n<li>\n<p>자바스크립트는 기본적인 산술 연산뿐 아니라, 더 복잡한 수치 연산을 Math 객체를 통해 지원한다.</p>\n</li>\n<li>\n<p>Math객체에는 수치 연산에 쓰이는 다양한 함수와 상수들이 프로퍼티 형태로 정의되어 있다.</p>\n</li>\n</ul>\n<h4>example.</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">Math<span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">53</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 9007199254740992 (2의 53승)</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span><span class=\"token number\">.6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1 (반올림)</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span><span class=\"token number\">.6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1 (올림)</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token number\">.6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0 (내림)</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5 (절대값)</span>\n<span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> y <span class=\"token operator\">=</span> <span class=\"token number\">55</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> z <span class=\"token operator\">=</span> <span class=\"token number\">60</span><span class=\"token punctuation\">;</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>z<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 100 (가장 큰 인자를 반환한다.)</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>z<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 55 (가장 작은 인자를 반환한다.)</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0과 1.0 사이에 임의의 수 x를 반환한다.</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span> <span class=\"token comment\">// 3.141592653589793 (원주율, 파이)</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token constant\">E</span> <span class=\"token comment\">// 2.718281828459045 (자연 로그 상수 e)</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1.7320508075688772 (3의 제곱근)</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 27 (3의 세제곱)</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0 삼각함수(Math.cos, Math.atan 등)</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2.302585092994046 (자연 로그 10)</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span> Math<span class=\"token punctuation\">.</span><span class=\"token constant\">LN10</span> <span class=\"token comment\">// 2 (밑이 10인 로그 100)</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span> Math<span class=\"token punctuation\">.</span><span class=\"token constant\">LN2</span> <span class=\"token comment\">// 9 (밑이 2인 로그 512)</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">exp</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 20.085536923187668 (Math.E의 3 거듭제곱)</span></code></pre></div>\n<ul>\n<li>자바스크립트가 지원하는 모든 수리 함수에 대한 자세한 설명은 <a href=\"http://www.w3schools.com/jsref/jsref_obj_math.asp\">레퍼런스</a>의 Math부분을 살펴보기!* 자바스크립트의 산술 연산은 오버플로와 언더플로, 0으로 나누는 에러를 발생시키지 않는다.</li>\n<li>산술 연산의 결과가 표현할 수 있는 가장 큰 수보다 더 크다면(오버플로), 자바스크립트는 Infinity라고 표현하는 무한대의 값을 출력한다.</li>\n<li>표현 가능한 가장 작은 음수 값보다 더 작은 값은 음의 무한대가 되고 이 값을 -Infinity로 출력한다.</li>\n<li>언더플로(underflow)는 산술 연산의 결과가 표현할 수 있는 가장 작은 값보다 0에 가까울 때 발생한다. 이런 경우에 자바스크립트는 0을 돌려준다.</li>\n<li>만약 언더플로가 음수에서 발생했다면 자바스크립트는 특수 값인 ‘음의 0’을 반환한다.</li>\n<li>자바스크립트에서 0으로 나누는 연산은 에러가 아니다. 이런 경우에 무한대 또는 음의 무한대가 반환된다. 그런데 여기에는 한 가지 예외가 있다. 0을 0으로 나누는 것은 정의되지 않은 값을 갖고, 그 결과로 숫자가 아닌 특수한 값을 가진다.</li>\n<li>자바스크립트에서는 이러한 값을 NaN으로 출력한다.</li>\n<li>또한 NaN은 무한대를 무한대로 나누는 경우와 음수 값에 루트를 씌우는 경우, 숫자가 아닌 피연산자로 산술 연산을 시도하는 경우에도 발생한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token number\">0</span><span class=\"token operator\">/</span><span class=\"token number\">0</span> <span class=\"token comment\">// NaN</span>\n<span class=\"token number\">100</span><span class=\"token operator\">/</span><span class=\"token string\">'s'</span> <span class=\"token comment\">// NaN</span></code></pre></div>\n<ul>\n<li>자바스크립트는 양의 무한대와 숫자가 아닌 값을 표현하기 위해 전역 변수 Infinity, NaN을 미리 정의한다.</li>\n<li>ECMAScript3에서 Infinity와 NaN을 읽기 전용 값으로 정의한다. Number 객체에는 Infinity와 NaN이 따로 상수로 정의되어 있으며,</li>\n<li>이들 상수는 ECMAScript3에서도 읽기 전용이다</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token number\">Infinity</span> <span class=\"token comment\">// Infinity (읽고 쓰기 가능한 변수로 Infinity로 초기화 된다.)</span>\nNumber<span class=\"token punctuation\">.</span><span class=\"token constant\">POSITIVE_INFINITY</span> <span class=\"token comment\">// Infinity(Infinity와 같은 값이지만 읽기 전용이다.)</span>\n<span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">0</span> <span class=\"token comment\">// Infinity</span>\nNumber<span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_VALUE</span> <span class=\"token comment\">// 1.7976931348623157e+308</span>\nNumber<span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_VALUE</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token comment\">// 1.7976931348623157e+308</span>\nNumber<span class=\"token punctuation\">.</span><span class=\"token constant\">NEGATIVE_INFINITY</span> <span class=\"token comment\">// -Infinity</span>\n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">0</span> <span class=\"token comment\">// -Infinity</span>\n<span class=\"token operator\">-</span>Number<span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_VALUE</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token comment\">// -1.7976931348623157e+308</span>\n<span class=\"token number\">NaN</span> <span class=\"token comment\">// NaN</span>\nNuber<span class=\"token punctuation\">.</span><span class=\"token number\">NaN</span> <span class=\"token comment\">// NaN</span>\n<span class=\"token number\">0</span><span class=\"token operator\">/</span><span class=\"token number\">0</span> <span class=\"token comment\">// NaN</span>\nNumber<span class=\"token punctuation\">.</span><span class=\"token constant\">MIN_VALUE</span><span class=\"token operator\">/</span><span class=\"token number\">2</span> <span class=\"token comment\">// 0 (언더플로)</span>\n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">Infinity</span> <span class=\"token comment\">// -0(음의 0)</span>\n<span class=\"token operator\">-</span><span class=\"token number\">0</span> <span class=\"token comment\">// -0</span></code></pre></div>\n<ul>\n<li>자바스크립트에서 NaN은 한 가지 독특한 기능을 가지고 있다.</li>\n<li>NaN은 그 자신 뿐만아니라 다른 값과 같은지 비교할 수 없다.</li>\n<li>isNaN( ) 함수를 사용하여 비교할 수 있다. 이 함수는 인자가 NaN이거나, 문자열이나 객체처럼 숫자가 아니라면 참을 반환한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\nx <span class=\"token operator\">===</span> <span class=\"token function\">NaN</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\nx <span class=\"token operator\">!=</span> <span class=\"token function\">x</span> <span class=\"token punctuation\">(</span>o 이렇게 비교 해야 한다<span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span>\nx <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token operator\">/</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\nx <span class=\"token operator\">===</span> <span class=\"token number\">NaN</span> <span class=\"token comment\">// false</span>\nx <span class=\"token operator\">!=</span> x <span class=\"token comment\">// true</span>\n<span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></code></pre></div>\n<ul>\n<li>비슷한 의미로 isFinite()함수는 인자가 Nan, infinitiy -infinitiy 외의 숫자라면 참을 반환한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">isFinite</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token function\">isFinite</span><span class=\"token punctuation\">(</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token function\">isFinite</span><span class=\"token punctuation\">(</span><span class=\"token number\">Infinity</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token function\">isFinite</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">Infinity</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></code></pre></div>\n<ul>\n<li>음의 0은 양의 0과 같은지(자바스크립트의 엄격한 동치 테스트를 사용하여) 비교할 수 있는데, 나눗셈을 할 때를 제외하고는 거의 같다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> zero <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 일반적인 0</span>\n<span class=\"token keyword\">var</span> negz <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 음의 0</span>\nzero <span class=\"token operator\">===</span> negz <span class=\"token comment\">// true</span>\n<span class=\"token number\">1</span> <span class=\"token operator\">/</span> zero <span class=\"token operator\">===</span> <span class=\"token number\">1</span> <span class=\"token operator\">/</span> negz <span class=\"token comment\">// false</span></code></pre></div>\n<h3>이진 부동소수점과 반올림 오류</h3>\n<ul>\n<li>무한히 많은 실수가 있지만 자바스크립트에서는 한정된 숫자만 부동소수점 형태로 표현할 수 있다(정확히는 184377368744548106271까지 허용).</li>\n<li>자바스크립트 연산을 할때는 근사 값으로 표현한다.</li>\n<li>자바스크립트에서 사용하는 IEEE-754 부동소수점 표현방식은 1/2, 1/8, 1/1024 같은 분수를 정확하게 표현할 수 있는 이진 표현법(binary representation)이다.</li>\n<li>하지만 가장 많이 사용하는 분수는 10진수 분수로 1/10, 1/100 등 인데, 이진 표현법으로는 0.1과 같은 간단한 값도 정확하게 표현할 수 없다.</li>\n<li>자바스크립트에서 숫자는 높은 정밀도를 가지고 있어서 0.1에 근접한 근사치를 낼 수 있지만, 정확하게 표현할 수 없다는 점은 문제를 야기할 수 있다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">.3</span> <span class=\"token operator\">-</span> <span class=\"token number\">.2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0.3 - 0.2</span>\n<span class=\"token keyword\">var</span> y <span class=\"token operator\">=</span> <span class=\"token number\">.2</span> <span class=\"token operator\">-</span> <span class=\"token number\">.1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0.2 - 0.1</span>\nx <span class=\"token operator\">==</span> y <span class=\"token comment\">// false</span>\nx <span class=\"token operator\">==</span> <span class=\"token number\">.1</span> <span class=\"token comment\">// false</span>\ny <span class=\"token operator\">==</span> <span class=\"token number\">.1</span> <span class=\"token comment\">// false</span></code></pre></div>\n<ul>\n<li>반올림 오류 때문에 .3 근사치와 .2근사치의 차는 .2와 .1의 근사치 사이의 차이와 같지 않다</li>\n<li>이는 자바스크립트가 가진 결함이 아니라 이진 부동소수점 숫자를 사용하기 때문에 벌어지는 현상이며,</li>\n<li>이진 부동소수점 숫자를 사용하는 프로그래밍 언어에서 볼 수 있는 공통적인 현상이다.</li>\n<li>또한 코드 x 와 y값은 서로 매우 근접하고 정답(0.1)에 가까운 값이다. 계산된 값은 대부분 적절하지만,</li>\n<li>값들을 동등 비교할 경우에는 문제가 발생한다.</li>\n</ul>\n<h3>날짜와 시간</h3>\n<ul>\n<li>코어 자바스크립트는 날짜와 시간을 표현하는 객체를 생성하는 Date( ) 생성자를 제공한다.</li>\n<li>Date( ) 객체는 간단한 날짜 계산을 하는 메서드를 가지고 있다.</li>\n<li>Date( ) 객체는 숫자 같은 원시 타입이 아니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> then <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token number\">2016</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//Fri Jan 01 2016 00:00:00 GMT+0900 (대한민국 표준시) 2016년 1월 1일</span>\n<span class=\"token keyword\">var</span> later <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token number\">2016</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Fri Jan 01 2016 01:32:50 GMT+0900 (대한민국 표준시)</span>\n <span class=\"token comment\">//2016년 1월 1일, 오전 1시 32분 50초</span>\n<span class=\"token keyword\">var</span> now <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Tue Dec 13 2016 01:34:48 GMT+0900 (대한민국 표준시) 현재 날짜와 시간</span>\n<span class=\"token keyword\">var</span> elapsed <span class=\"token operator\">=</span> now <span class=\"token operator\">-</span> then<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 29986488159 밀리초로 날짜 계산</span>\n\nlater<span class=\"token punctuation\">.</span><span class=\"token function\">getFullYear</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2016</span>\nlater<span class=\"token punctuation\">.</span><span class=\"token function\">getMonth</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0 월은 0부터 시작한다.</span>\nlater<span class=\"token punctuation\">.</span><span class=\"token function\">getDate</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token comment\">// 13</span>\nlater<span class=\"token punctuation\">.</span><span class=\"token function\">getDay</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token comment\">// 5 0은 일요일, 5는 금요일</span>\nlater<span class=\"token punctuation\">.</span><span class=\"token function\">getHours</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1 오전 1시</span>\nlater<span class=\"token punctuation\">.</span><span class=\"token function\">getUTCHours</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token comment\">// 16 시간대에 의존 한 UTC 시간</span>\nlater<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"Fri Jan 01 2016 01:32:50 GMT+0900 (대한민국 표준시)\"</span>\nlater<span class=\"token punctuation\">.</span><span class=\"token function\">toUTCString</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"Thu, 31 Dec 2015 16:32:50 GMT\"</span>\nlater<span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleTimeString</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"오전 1:32:50\"</span>\nlater<span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleDateString</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"2016. 1. 1.\"</span>\nlater<span class=\"token punctuation\">.</span><span class=\"token function\">toISOString</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"2015-12-31T16:32:50.000Z\" ( ECMAScript5에서만 지원)</span></code></pre></div>\n<p>출처 : <a href=\"http://gahee0416.tistory.com/4\">http://gahee0416.tistory.com/4</a></p>\n<!--stackedit_data:\neyJoaXN0b3J5IjpbLTExNDEyNDM5NDksLTEwMjY1NDEwNDMsMT\nk2Mjg0NTgyN119\n-->","frontmatter":{"title":"자바스크립트 자료형","date":"October 03, 2017","description":null}},"previous":{"fields":{"slug":"/2017-10-03-js-study-1/"},"frontmatter":{"title":"자바스크립트"}},"next":{"fields":{"slug":"/2017-10-03-js-study-3/"},"frontmatter":{"title":"자바스크립트 객체 종류"}}},"pageContext":{"id":"6e41194a-fef8-5307-87e9-2d23cfcd8a13","previousPostId":"3f2df8e5-6fe8-5356-8b39-b0d50c236a47","nextPostId":"dd2a01bc-45d5-5e8a-a8e0-695de263f2ec"}},
    "staticQueryHashes": ["230163734","2841359383"]}
{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/2019-01-11-redux-step2/",
    "result": {"data":{"site":{"siteMetadata":{"title":"YH.K Logs"}},"markdownRemark":{"id":"77767685-eeaa-559b-b363-62a11bf3826a","excerpt":"는 이 에 전해지기 전 해야할 작업을 정의할 수 있는 미들웨어를 지원한다. 의 비동기 작업들을 도와주는 미들웨어에 대하여 알아보자. 을 걸어 를 반환하는 비동기 작업을 임시로 구현하였다. 위와 같은 비동기 작업이 있을때 의 은 어떻게 처리해야 할까? Async / Await…","html":"<p><code class=\"language-text\">Redux</code>는 <code class=\"language-text\">Action</code>이 <code class=\"language-text\">Reducer</code>에 전해지기 전 해야할 작업을 정의할 수 있는 미들웨어를 지원한다. <code class=\"language-text\">Redux</code>의 비동기 작업들을 도와주는 미들웨어에 대하여 알아보자.</p>\n <!-- more -->\n<div class=\"gatsby-highlight\" data-language=\"jsapi.js\"><pre class=\"language-jsapi.js\"><code class=\"language-jsapi.js\">let todoId = 0;\nexport const addTodo = text =&gt;\n  new Promise(resolve =&gt; {\n    window.setTimeout(() =&gt; {\n      resolve({\n        text: text,\n        id: todoId++,\n        completed: false\n      });\n    }, 2000);\n  });</code></pre></div>\n<p><code class=\"language-text\">setTimeout</code>을 걸어 <code class=\"language-text\">Promise</code>를 반환하는 비동기 작업을 임시로 구현하였다. 위와 같은 비동기 작업이 있을때 <code class=\"language-text\">Redux</code>의 <code class=\"language-text\">Action</code>은 어떻게 처리해야 할까?</p>\n<h2>Async / Await</h2>\n<p>간단하게 <strong>Async / Await</strong> 를 이용하여 동기적으로 구현할 수 있을것 같아서 테스트해보았다. 코드는 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsactions.js\"><pre class=\"language-jsactions.js\"><code class=\"language-jsactions.js\">import * as Api from &quot;./api&quot;;\nexport const addTodo = async text =&gt; await Api.addTodo(text);</code></pre></div>\n<p>돌려보니 <code class=\"language-text\">Actions must be plain objects. Use custom middleware for async actions.</code>라는 에러가 뜨면서 되질 않는다. 액션은 순수한 객체여야 하며 비동기 액션을 위해서는 커스텀 미들웨어를 쓰라는 뜻이다.</p>\n<h2>Redux Thunk</h2>\n<p>대표적으로 많이들 쓰는 <a href=\"https://github.com/reduxjs/redux-thunk\">redux-thunk</a>에 대하여 알아보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> -S redux-thunk</code></pre></div>\n<p>기존 <code class=\"language-text\">action -> addTodo</code>는 단순한 <strong>객체</strong>를 리턴했지만 이제 비동기를 처리하기 위해 <strong>dispatch를 인자로 받고 그에 대한 작업을 promise로 반환하는 함수</strong>를 리턴해야한다.\n<code class=\"language-text\">redux-thunk</code>는 단순히 <code class=\"language-text\">action</code>에서 반환되어온 함수에 <code class=\"language-text\">dispatch</code>를 인자로 넣어 실행할 뿐이다. <code class=\"language-text\">redux-thunk</code>를 적용한 코드는 아래와 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsindex.js\"><pre class=\"language-jsindex.js\"><code class=\"language-jsindex.js\">import { createStore, applyMiddleware } from &quot;redux&quot;;\nimport { addTodo } from &quot;./actions&quot;;\nimport reducers from &quot;./reducers&quot;;\nimport ReduxThunk from &quot;redux-thunk&quot;;\nconst store = createStore(reducers, applyMiddleware(ReduxThunk));\nlog(&quot;before&quot;, store.getState());\nstore.dispatch(addTodo(&quot;Hello world&quot;)).then(() =&gt; {\n  log(&quot;after&quot;, store.getState());\n});\nfunction log(label, json) {\n  const app = document.getElementById(&quot;app&quot;);\n  app.innerHTML += `&lt;h1&gt;${label}&lt;h1&gt;`;\n  app.innerHTML += `&lt;pre&gt;${JSON.stringify(json, undefined, 2)}&lt;/pre&gt;`;\n}</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"jsactions.js\"><pre class=\"language-jsactions.js\"><code class=\"language-jsactions.js\">import * as Api from &quot;./api&quot;;\nexport const addTodo = text =&gt; dispatch =&gt;\n  Api.addTodo(text).then(todo =&gt; dispatch({ type: &quot;ADD_TODO&quot;, newTodo: todo }));</code></pre></div>\n<p><code class=\"language-text\">action</code>이 <code class=\"language-text\">Promise</code>를 반환한다는거 외에는 크게 달라진점이 없다. 나머지 <code class=\"language-text\">getTodos</code>, <code class=\"language-text\">editTodos</code>, <code class=\"language-text\">removeTodos</code>도 액션과 리듀서에 추가해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsapi.js\"><pre class=\"language-jsapi.js\"><code class=\"language-jsapi.js\">const todos = [\n  {\n    text: &quot;First Todo&quot;,\n    id: 0,\n    completed: false\n  }\n];\nlet todoId = 1;\nexport const getTodos = () =&gt;\n  new Promise(resolve =&gt; {\n    window.setTimeout(() =&gt; {\n      resolve(todos);\n    }, 2000);\n  });\nexport const addTodo = text =&gt;\n  new Promise(resolve =&gt; {\n    window.setTimeout(() =&gt; {\n      resolve({\n        text: text,\n        id: todoId++,\n        completed: false\n      });\n    }, 2000);\n  });\nexport const editTodo = newTodo =&gt;\n  new Promise(resolve =&gt; {\n    window.setTimeout(() =&gt; {\n      const todoIndex = todos.find(todo =&gt; todo.id === newTodo.id);\n      todos[todoIndex] = { ...todos[todoIndex], ...newTodo };\n      resolve(todos[todoIndex]);\n    }, 2000);\n  });\nexport const removeTodo = todoId =&gt;\n  new Promise(resolve =&gt; {\n    window.setTimeout(() =&gt; {\n      todos.splice(todos.findIndex(todo =&gt; todo.id === todoId));\n      resolve(todoId);\n    }, 2000);\n  });</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"jsactions.js\"><pre class=\"language-jsactions.js\"><code class=\"language-jsactions.js\">import * as Api from &quot;./api&quot;;\nexport const addTodo = text =&gt; dispatch =&gt;\n  Api.addTodo(text).then(res =&gt; dispatch({ type: &quot;ADD_TODO&quot;, newTodo: res }));\nexport const editTodo = newTodo =&gt; dispatch =&gt;\n  Api.editTodo(newTodo).then(res =&gt;\n    dispatch({ type: &quot;EDIT_TODO&quot;, newTodo: res })\n  );\nexport const removeTodo = todoId =&gt; dispatch =&gt;\n  Api.removeTodo(todoId).then(res =&gt;\n    dispatch({ type: &quot;REMOVE_TODO&quot;, todoId: res })\n  );\nexport const getTodos = () =&gt; dispatch =&gt;\n  Api.getTodos().then(res =&gt; dispatch({ type: &quot;GET_TODOS&quot;, todos: res }));</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"jsreducers.js\"><pre class=\"language-jsreducers.js\"><code class=\"language-jsreducers.js\">import { combineReducers } from &quot;redux&quot;;\nexport default combineReducers({\n  todos: (todos = [], action) =&gt; {\n    switch (action.type) {\n      case &quot;GET_TODOS&quot;:\n        return action.todos;\n      case &quot;ADD_TODO&quot;:\n        return [...todos, action.newTodo];\n      case &quot;REMOVE_TODO&quot;:\n        return todos.filter(todo =&gt; todo.id !== action.todoId);\n      case &quot;EDIT_TODO&quot;:\n        const sliced = todos.slice();\n        const index = sliced.findIndex(todo =&gt; todo.id === action.newTodo.id);\n        if (index &gt; -1) sliced[index] = action.newTodo;\n        return sliced;\n      default:\n        return todos;\n    }\n  }\n});</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"jsindex.js\"><pre class=\"language-jsindex.js\"><code class=\"language-jsindex.js\">import { createStore, applyMiddleware } from &quot;redux&quot;;\nimport { addTodo, getTodos, editTodo, removeTodo } from &quot;./actions&quot;;\nimport reducers from &quot;./reducers&quot;;\nimport ReduxThunk from &quot;redux-thunk&quot;;\nconst store = createStore(reducers, applyMiddleware(ReduxThunk));\nstart();\nasync function start() {\n  log(&quot;initial&quot;, store.getState());\n  await store.dispatch(getTodos());\n  log(&quot;getTodos&quot;, store.getState());\n  await store.dispatch(addTodo(&quot;Hello Todo!&quot;));\n  log(&quot;addTodos&quot;, store.getState());\n  await store.dispatch(\n    editTodo({\n      id: store.getState().todos[0].id,\n      completed: true,\n      text: &quot;Edited!&quot;\n    })\n  );\n  log(&quot;editTodo&quot;, store.getState());\n  await store.dispatch(removeTodo(store.getState().todos[0].id));\n  log(&quot;removeTodo&quot;, store.getState());\n}\nfunction log(label, json) {\n  const app = document.getElementById(&quot;app&quot;);\n  app.innerHTML += `&lt;h1&gt;${label}&lt;h1&gt;`;\n  app.innerHTML += `&lt;pre&gt;${JSON.stringify(json, undefined, 2)}&lt;/pre&gt;`;\n}</code></pre></div>\n<p>기본적인 <code class=\"language-text\">CRUD</code> 작업을 완료하였다. 다음 포스트에서는 <code class=\"language-text\">react</code>와 <code class=\"language-text\">react-redux</code>를 이용해 뷰를 만드는 작업을 진행한다.\nCodeSandBox에 예제를 올려두었으니 참고하면 된다.</p>\n <iframe src=\"https://codesandbox.io/embed/kmx0w14lo3\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"></iframe>","frontmatter":{"title":"Redux 마스터하기 - 리덕스의 미들웨어에 대하여 알아보자.","date":"January 11, 2019","description":null}},"previous":{"fields":{"slug":"/2019-01-09-redux-step1/"},"frontmatter":{"title":"Redux 마스터하기 - 리덕스란 무엇인가"}},"next":{"fields":{"slug":"/2019-04-25-change-company/"},"frontmatter":{"title":"또 한번의 이직"}}},"pageContext":{"id":"77767685-eeaa-559b-b363-62a11bf3826a","previousPostId":"3a2ce80f-e4e8-5b31-8e94-18414223db10","nextPostId":"9afe74ce-b669-502c-b4cb-18875f44e820"}},
    "staticQueryHashes": ["230163734","2841359383"]}
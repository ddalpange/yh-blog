{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/2017-10-03-js-study-5/",
    "result": {"data":{"site":{"siteMetadata":{"title":"YH.K Logs"}},"markdownRemark":{"id":"0f5fc79d-4926-5987-afca-49e6d98f1248","excerpt":"…","html":"<p>자바스크립트의 기본 데이터 타입은 객체다. 객체는 일종의 복합체로 원시 타입의 값 또는 다른 객체들을 묶어 이름으로 저장하고, 값을 가져올 수 있다. 다시 말해 객체는 <em>이름과 값으로 구성된 프로퍼티들의 정렬되지 않은 집합</em> 이다.</p>\n<!-- more -->\n<p>객체는 고유 프로퍼티를 유지하는 것 외에 <strong>프로토타입</strong>이라고 하는 다른 객체의 프로퍼티를 상속받는다. 객체의 메서드들은 일반적으로 상속받은 프로퍼티이고, 이를 <strong>프토로타입 상속</strong>이라고 한다.</p>\n<h4>객체 속성</h4>\n<ul>\n<li>prototype은 상속받은 프로퍼티들을 가진 객체들을 참조한다.</li>\n<li>class는 객체의 자료형(타입)을 특정짓는 문자열이다.</li>\n<li>extensible 속성(ECMAScript 5)은 객체에 새 프로퍼티를 추가할 수 있는지를 결정한다.</li>\n</ul>\n<h4>프로퍼티 속성</h4>\n<ul>\n<li>쓰기(Writable) 속성은 프로퍼티 값의 수정 가능 여부를 결정한다</li>\n<li>열거(enmerable) 속성은 프로퍼티의 이름을 for/in루프에서 읽을수 있는지를 결정한다.</li>\n<li>설정(cofigurable) 속성은 프로퍼티의 삭제 가능 여부와 프로퍼티의 속성 변경 가능 여부를 설정한다.</li>\n</ul>\n<h4>선언</h4>\n<!-- more -->\n<h5>리터럴 문법</h5>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> empty <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> hotelsInfo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  cityName<span class=\"token operator\">:</span> <span class=\"token string\">'오사카'</span><span class=\"token punctuation\">,</span>\n  hotelName<span class=\"token operator\">:</span> <span class=\"token string\">'오사카안에있는호텔'</span><span class=\"token punctuation\">,</span>\n  data<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toISOString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h5>new</h5>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> o <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> d <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> r <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"js\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ol>\n<li>new 연산자는 객체를 만들고 반드시 초기화한다.</li>\n<li>new 키워드 다음에는 반드시 함수 호출문이 와야한다.</li>\n<li>이때 호출되는 함수를 생성자(constructor)라고 한다.</li>\n<li>코어자바스크립트는 기본 타입에 대한 생성자를 내장하고 있다.</li>\n</ol>\n<h5>프로토타입</h5>\n<ol>\n<li>자바스크립트의 모든 객체인 또 다른 자바스크립트의 객체인 prototype과 연관되어있다.</li>\n<li>객체는 프로토타입으로부터 프로퍼티들을 상속받는다.</li>\n<li>객체 리터럴로 생성된 모든 객체는 프로토타입 객체가 같으며, Object.prototype으로 참조할 수 있다.</li>\n<li>new 키워드를 사용해 생성자를 호출하면 생성자 함수의 프로토타입이 생성된 객체의 프로토타입이 된다.</li>\n<li>Object.prototype은 아무 프로토타입도 상속받지 않는다.</li>\n<li>다른 프로토타입 객체들은 모두 Object.prototype을 상속받는다.</li>\n<li>이렇게 프로토타입 객체들이 연결된 것을 프로토타입 체인이라고 한다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Date 객체 프로토타입</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Object 프로토타입</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Obeject 프로토 타입</span>\n</code></pre></div>\n<h5>Object.creat()</h5>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">inherit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">p</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token function\">TypeError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> type <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> p<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>type <span class=\"token operator\">!==</span> object <span class=\"token operator\">&amp;&amp;</span> t <span class=\"token operator\">!==</span> <span class=\"token string\">\"function\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token function\">TypeError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  f<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> </code></pre></div>\n<h4>접근 &#x26;&#x26; 삭제</h4>\n<h5>일반적인 접근 방법</h5>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> hotelsInfo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  cityName<span class=\"token operator\">:</span> <span class=\"token string\">'오사카'</span><span class=\"token punctuation\">,</span>\n  hotelName<span class=\"token operator\">:</span> <span class=\"token string\">'오사카안에있는호텔'</span><span class=\"token punctuation\">,</span>\n  data<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toISOString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>hotelsInfo<span class=\"token punctuation\">.</span>cityName<span class=\"token punctuation\">)</span> <span class=\"token comment\">// '오사카'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>hotelsInfo<span class=\"token punctuation\">[</span><span class=\"token string\">'hotelName'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// '오사카안에있는호텔'</span>\n\n<span class=\"token keyword\">delete</span> hotelsInfo<span class=\"token punctuation\">.</span>cityName<span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>hotelsInfo<span class=\"token punctuation\">.</span>cityName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> key <span class=\"token keyword\">in</span> hotelsInfo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>hotelsInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyNames</span><span class=\"token punctuation\">(</span>hotelsInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>for…in 루프 -> 이 방법은 객체와 객체의 프로토타입 체인 상의 열거 가능한 모든 프로퍼티를 순회한다.</li>\n<li>Object.keys(o) -> 이 메소드는 객체 자체에 속한(즉 프로토타입 체인 상에 있는 것은 제외)  열거 가능한 프로퍼티 이름들(“keys”)의 배열을 반환한다.</li>\n<li>Object.getOwnPropertyNames(o) -> 이 메소드는 객체 자체의 모든  프로퍼티(열거 가능 여부에 무관) 이름들의  배열을 반환한다.</li>\n</ul>\n<hr>\n<p>참고</p>\n<p><a href=\"http://stackoverflow.com/questions/21545687/javascript-vs-new-object-performance\">리터럴 문법 속도 비교</a></p>\n<p><a href=\"http://unikys.tistory.com/320\">자바스크립트 상속의 역사</a></p>\n<!--stackedit_data:\neyJoaXN0b3J5IjpbLTU1NDgyNzU1NCwtMTUwNjA5OTIwNSwtNT\nY4MTgwMzE3XX0=\n-->","frontmatter":{"title":"자바스크립트 객체","date":"October 03, 2017","description":null}},"previous":{"fields":{"slug":"/2017-10-03-js-study-4/"},"frontmatter":{"title":"자바스크립트 연산자"}},"next":{"fields":{"slug":"/2017-10-03-js-closure/"},"frontmatter":{"title":"자바스크립트 클로져"}}},"pageContext":{"id":"0f5fc79d-4926-5987-afca-49e6d98f1248","previousPostId":"f03380e5-e012-5877-a02f-42e59a57bb7f","nextPostId":"ab5fd66a-ba34-57ba-a6bd-6cd877d9977b"}},
    "staticQueryHashes": ["230163734","2841359383"]}
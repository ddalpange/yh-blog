{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/2017-10-03-js-study-3/",
    "result": {"data":{"site":{"siteMetadata":{"title":"YH.K Logs"}},"markdownRemark":{"id":"dd2a01bc-45d5-5e8a-a8e0-695de263f2ec","excerpt":"자바스크립트의 객체 종류에 대하여 알아보자. 1. 전역 객체 전역 객체(global object…","html":"<p>자바스크립트의 객체 종류에 대하여 알아보자.</p>\n<!-- more -->\n<h2>1. 전역 객체</h2>\n<ul>\n<li>전역 객체(global object)는 매우 중요한 용도로 사용되는 일반적인 자바스크립트 객체이다.</li>\n<li>전역객체의 프로퍼티는 자바스크립트 프로그램 전역에서 사용될수 있게 정의된 심벌이다.</li>\n<li>자바스크립트 인터프리터가 시작할 때 새로운 전역객체를 만들고 또 그 프로퍼티들을 초기화한다.</li>\n<li>undefined, NaN, Date(), RegExp() 등.</li>\n<li>윈도우 프로퍼티는 F12를 누른 후 브라우저 콘솔창에서 다음의 명령어로 확인 가능하다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>전역 객체가 생성 될 떄 초기화되는 프로퍼티들은 예약어는 아니지만 예약어처럼 취급된다.</li>\n<li>최상위 코드(함수의 일부가 아닌 코드)에서는 this 키워드를 통해 전역 객체를 참조할 수 있다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> global <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>윈도우 객체 종류</h3>\n<p><img src=\"/images/windowObj.png\" alt=\"객체\"></p>\n<h3>윈도우 프로퍼티</h3>\n<p><img src=\"/images/windowProp.png\" alt=\"프롭\"></p>\n<h3>윈도우 메소드</h3>\n<p><img src=\"/images/windowMethod.png\" alt=\"메솥\"></p>\n<h3>윈도우 이벤트</h3>\n<p><img src=\"/images/windowEvent.png\" alt=\"이벤\"></p>\n<h2>2. 래퍼(Wrapper) 객체</h2>\n<p><code class=\"language-text\">1</code>, <code class=\"language-text\">\"string\"</code>, <code class=\"language-text\">true</code> 같은 원시 값은 객체가 아니다. 그러므로 프로퍼티(메소드)를 가지고 있지 않다. 그런데 <code class=\"language-text\">name.length</code>, <code class=\"language-text\">name.substr(\"2\".\"3\")</code>과 같이 어떻게 프로퍼티(메소드)에 접근하는 것일까??</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"kim yohan\"</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// -> new String(name).length</span></code></pre></div>\n<p>만약 스트링 <code class=\"language-text\">name</code>의 프로퍼티를 참조할 때 자바스크립트는 문자열 값을 임시 객체로 래핑한다. 프로퍼티 참조가 해제되면 임시 객체는 메모리에서 사라진다. 객체 자체로 선언할 수 있지만, 원시 값(리터럴)으로 선언하는 것과는 엄연히 다르다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"kim yohan\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> name2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"kim yohan\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">===</span> name2<span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span>\n\nname<span class=\"token punctuation\">.</span>job <span class=\"token operator\">=</span> <span class=\"token string\">\"programmer\"</span><span class=\"token punctuation\">;</span>\nname2<span class=\"token punctuation\">.</span>job <span class=\"token operator\">=</span> <span class=\"token string\">\"programmer\"</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name1<span class=\"token punctuation\">.</span>nikname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// undefined</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name2<span class=\"token punctuation\">.</span>nikname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// ddalpange</span></code></pre></div>\n<blockquote>\n<p><code class=\"language-text\">name</code>의 임시 객체의 <code class=\"language-text\">job</code>에 <strong>ddalpange</strong>를 할당하였지만 메모리 할당이 해제됨으로써 프로퍼티가 사라졌다 즉, 문자열, 넘버, 불리언 값의 프로퍼티들은 읽기 전용이며, <code class=\"language-text\">새로운 프로퍼티를 할당할 수 없다</code>는 것을 알 수 있다.</p>\n</blockquote>\n<h2>3. 변경 불가능한 원시 타입 값과 변경 가능 객체 참조.</h2>\n<ul>\n<li>원시타입은 자체가 값이라 바꿀수가 없다.</li>\n<li>값이 바뀔 필요가 있다면 새로운 값을 생성하여 대체한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span>\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// return \"hello\";</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> x <span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nobj<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// return 2</span></code></pre></div>\n<ul>\n<li>자세한 내용은 <a href=\"https://ddalpange.github.io/2017/10/10/js-clone-object/\">여기</a>를 참조하세요.</li>\n</ul>\n<p>오류가 있거나 궁금하신 사항이 있다면 댓글을 달아주세요.</p>","frontmatter":{"title":"자바스크립트 객체 종류","date":"October 03, 2017","description":null}},"previous":{"fields":{"slug":"/2017-10-03-js-study-2/"},"frontmatter":{"title":"자바스크립트 자료형"}},"next":{"fields":{"slug":"/2017-10-03-js-study-4/"},"frontmatter":{"title":"자바스크립트 연산자"}}},"pageContext":{"id":"dd2a01bc-45d5-5e8a-a8e0-695de263f2ec","previousPostId":"6e41194a-fef8-5307-87e9-2d23cfcd8a13","nextPostId":"f03380e5-e012-5877-a02f-42e59a57bb7f"}},
    "staticQueryHashes": ["230163734","2841359383"]}